{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"selectors.js","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.guards.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/selectors/selectors.ts"],"sourcesContent":["import {\n  isPortableTextListBlock,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\n\n/**\n * @alpha\n */\nexport type BehaviorGuards = ReturnType<typeof createGuards>\n\nexport function createGuards({schema}: {schema: EditorSchema}) {\n  function isListBlock(block: unknown): block is PortableTextListBlock {\n    return isPortableTextListBlock(block) && block._type === schema.block.name\n  }\n\n  function isTextBlock(block: unknown): block is PortableTextTextBlock {\n    return isPortableTextTextBlock(block) && block._type === schema.block.name\n  }\n\n  return {isListBlock, isTextBlock}\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextListBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @alpha\n */\nexport const selectionIsCollapsed: EditorSelector<boolean> = ({context}) => {\n  return (\n    JSON.stringify(context.selection?.anchor.path) ===\n      JSON.stringify(context.selection?.focus.path) &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n\n/**\n * @alpha\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @alpha\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const guards = createGuards(context)\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && guards.isListBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @alpha\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @alpha\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @alpha\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  const focusBlock = getFocusTextBlock({context})\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @alpha\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = ({context}) => {\n  const focusChild = getFocusChild({context})\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @alpha\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @alpha\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[context.value.length - 1]\n    ? context.value[context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @alpha\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = ({context}) => {\n  if (!context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @alpha\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @alpha\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @alpha\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock({context})\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @alpha\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock({context})\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n"],"names":["createGuards","schema","isListBlock","block","isPortableTextListBlock","_type","name","isTextBlock","isPortableTextTextBlock","selectionIsCollapsed","context","JSON","stringify","selection","anchor","path","focus","offset","getFocusBlock","key","isKeySegment","_key","undefined","node","value","find","getFocusListBlock","guards","focusBlock","getFocusTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getFirstBlock","getLastBlock","length","getSelectedBlocks","selectedBlocks","startKey","backward","endKey","push","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock"],"mappings":"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","ignoreList":[0,1]}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"file":"behavior.core.js","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/utils/utils.block-offset.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/utils/utils.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/is-hotkey.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behaviors/behavior.types.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts"],"sourcesContent":["import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../../behaviors/behavior.types'\n\nexport function blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n\n  for (const block of value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (offsetLeft === 0) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: 0,\n        }\n        break\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n        break\n      }\n\n      offsetLeft -= child.text.length\n    }\n  }\n\n  return selectionPoint\n}\n\nexport function spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: {\n    path: [KeyedSegment, 'children', KeyedSegment]\n    offset: number\n  }\n}): BlockOffset | undefined {\n  let offset = 0\n\n  for (const block of value) {\n    if (block._key !== selectionPoint.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (child._key === selectionPoint.path[2]._key) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\n\nexport function isEmptyTextBlock(block: PortableTextBlock) {\n  if (!isPortableTextTextBlock(block)) {\n    return false\n  }\n\n  const onlyText = block.children.every(isPortableTextSpan)\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyedSegment, PortableTextTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\n\n/**\n * @alpha\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: 'annotation.add'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'annotation.remove'\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: 'annotation.toggle'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'blur'\n    }\n  | {\n      type: 'decorator.add'\n      decorator: string\n    }\n  | {\n      type: 'decorator.remove'\n      decorator: string\n    }\n  | {\n      type: 'decorator.toggle'\n      decorator: string\n    }\n  | {\n      type: 'delete.backward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete.forward'\n      unit: TextUnit\n    }\n  | {\n      type: 'focus'\n    }\n  | {\n      type: 'insert.block object'\n      placement: 'auto' | 'after' | 'before'\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert.inline object'\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert.break'\n    }\n  | {\n      type: 'insert.soft break'\n    }\n  | {\n      type: 'insert.text'\n      text: string\n      options?: TextInsertTextOptions\n    }\n  | {\n      type: 'list item.toggle'\n      listItem: string\n    }\n  | {\n      type: 'style.toggle'\n      style: string\n    }\n\n/**\n * @alpha\n */\nexport type NativeBehaviorEvent =\n  | {\n      type: 'copy'\n      data: DataTransfer\n    }\n  | {\n      type: 'key.down'\n      keyboardEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: 'key.up'\n      keyboardEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: 'paste'\n      data: DataTransfer\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntend =\n  | SyntheticBehaviorEvent\n  | {\n      type: 'insert.span'\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: 'insert.text block'\n      placement: 'auto' | 'after' | 'before'\n      textBlock?: {\n        children?: PortableTextTextBlock['children']\n      }\n    }\n  | {\n      type: 'list item.add'\n      listItem: string\n    }\n  | {\n      type: 'list item.remove'\n      listItem: string\n    }\n  | {\n      type: 'move.block'\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: 'move.block down'\n      at: [KeyedSegment]\n    }\n  | {\n      type: 'move.block up'\n      at: [KeyedSegment]\n    }\n  | {\n      type: 'noop'\n    }\n  | {\n      type: 'delete.block'\n      blockPath: [KeyedSegment]\n    }\n  | {\n      type: 'delete.text'\n      anchor: BlockOffset\n      focus: BlockOffset\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n  | {\n      type: 'reselect'\n    }\n  | {\n      type: 'select'\n      selection: EditorSelection\n    }\n  | {\n      type: 'select.previous block'\n    }\n  | {\n      type: 'select.next block'\n    }\n  | {\n      type: 'style.add'\n      style: string\n    }\n  | {\n      type: 'style.remove'\n      style: string\n    }\n  | {\n      type: 'text block.set'\n      at: [KeyedSegment]\n      level?: number\n      listItem?: string\n      style?: string\n    }\n  | {\n      type: 'text block.unset'\n      at: [KeyedSegment]\n      props: Array<'level' | 'listItem' | 'style'>\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorAction = BehaviorActionIntend & {\n  editor: PortableTextSlateEditor\n}\n\n/**\n * @alpha\n */\nexport type BehaviorEvent = SyntheticBehaviorEvent | NativeBehaviorEvent\n\n/**\n * @alpha\n */\nexport type Behavior<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<\n    PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,\n    TGuardResponse\n  >\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionIntendSet<TBehaviorEventType, TGuardResponse>>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorGuard<\n  TBehaviorEvent extends BehaviorEvent,\n  TGuardResponse,\n> = ({\n  context,\n  event,\n}: {\n  context: EditorContext\n  event: TBehaviorEvent\n}) => TGuardResponse | false\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntendSet<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = (\n  {\n    context,\n    event,\n  }: {\n    context: EditorContext\n    event: PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorActionIntend>\n\n/**\n * @alpha\n */\nexport function defineBehavior<\n  TAnyBehaviorEventType extends BehaviorEvent['type'],\n  TGuardResponse = true,\n>(behavior: Behavior<TAnyBehaviorEventType, TGuardResponse>): Behavior {\n  return behavior as unknown as Behavior\n}\n\n/**\n * @alpha\n */\nexport type BlockOffset = {\n  path: [KeyedSegment]\n  offset: number\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {isEmptyTextBlock} from '../editor/utils/utils'\nimport {\n  getFocusBlockObject,\n  getFocusTextBlock,\n  getNextBlock,\n  getPreviousBlock,\n  selectionIsCollapsed,\n} from '../selectors/selectors'\nimport {isHotkey} from '../utils/is-hotkey'\nimport {defineBehavior} from './behavior.types'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.keyboardEvent)\n    const focusBlockObject = getFocusBlockObject({context})\n    const nextBlock = getNextBlock({context})\n\n    return isArrowDown && focusBlockObject && !nextBlock\n  },\n  actions: [() => [{type: 'insert.text block', placement: 'after'}]],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.keyboardEvent)\n    const focusBlockObject = getFocusBlockObject({context})\n    const previousBlock = getPreviousBlock({context})\n\n    return isArrowUp && focusBlockObject && !previousBlock\n  },\n  actions: [\n    () => [\n      {type: 'insert.text block', placement: 'before'},\n      {type: 'select.previous block'},\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const focusBlockObject = getFocusBlockObject({context})\n    const collapsedSelection = selectionIsCollapsed({context})\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [() => [{type: 'insert.text block', placement: 'after'}]],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock({context})\n    const selectionCollapsed = selectionIsCollapsed({context})\n    const previousBlock = getPreviousBlock({context})\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      {\n        type: 'delete.block',\n        blockPath: focusTextBlock.path,\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock({context})\n    const selectionCollapsed = selectionIsCollapsed({context})\n    const nextBlock = getNextBlock({context})\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      {\n        type: 'delete.block',\n        blockPath: focusTextBlock.path,\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defineBehavior} from './behavior.types'\n\nconst decoratorAdd = defineBehavior({\n  on: 'decorator.add',\n  actions: [\n    ({event}) => [\n      event,\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorRemove = defineBehavior({\n  on: 'decorator.remove',\n  guard: ({event}) => ({decorator: event.decorator}),\n  actions: [\n    ({event}) => [\n      event,\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorToggle = defineBehavior({\n  on: 'decorator.toggle',\n  guard: ({event}) => ({decorator: event.decorator}),\n  actions: [\n    ({event}) => [\n      event,\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nexport const coreDecoratorBehaviors = {\n  decoratorAdd,\n  decoratorRemove,\n  decoratorToggle,\n}\n","import {createGuards} from '../behavior-actions/behavior.guards'\nimport {isEmptyTextBlock} from '../editor/utils/utils'\nimport {\n  getFocusListBlock,\n  getFocusSpan,\n  getFocusTextBlock,\n  getSelectedBlocks,\n  selectionIsCollapsed,\n} from '../selectors/selectors'\nimport {isHotkey} from '../utils/is-hotkey'\nimport {defineBehavior} from './behavior.types'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed({context})\n    const focusTextBlock = getFocusTextBlock({context})\n    const focusSpan = getFocusSpan({context})\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      {\n        type: 'text block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      },\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed({context})\n    const focusTextBlock = getFocusTextBlock({context})\n    const focusSpan = getFocusSpan({context})\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      {\n        type: 'text block.set',\n        level,\n        at: focusTextBlock.path,\n      },\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed({context})\n    const focusListBlock = getFocusListBlock({context})\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      {\n        type: 'text block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      },\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isTab = isHotkey('Tab', event.keyboardEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks({context})\n    const guards = createGuards(context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) => ({\n        type: 'text block.set',\n        level: Math.min(\n          MAX_LIST_LEVEL,\n          Math.max(1, selectedListBlock.node.level + 1),\n        ),\n        at: selectedListBlock.path,\n      })),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'key.down',\n  guard: ({context, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.keyboardEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks({context})\n    const guards = createGuards(context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) => ({\n        type: 'text block.set',\n        level: Math.min(\n          MAX_LIST_LEVEL,\n          Math.max(1, selectedListBlock.node.level - 1),\n        ),\n        at: selectedListBlock.path,\n      })),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreListBehaviors} from './behavior.core.lists'\nimport {defineBehavior} from './behavior.types'\n\nconst softReturn = defineBehavior({\n  on: 'insert.soft break',\n  actions: [() => [{type: 'insert.text', text: '\\n'}]],\n})\n\n/**\n * @alpha\n */\nexport const coreBehaviors = [\n  softReturn,\n  coreDecoratorBehaviors.decoratorAdd,\n  coreDecoratorBehaviors.decoratorRemove,\n  coreDecoratorBehaviors.decoratorToggle,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n]\n\n/**\n * @alpha\n */\nexport const coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors,\n}\n"],"names":["blockOffsetToSpanSelectionPoint","value","blockOffset","offsetLeft","offset","selectionPoint","block","_key","path","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","spanSelectionPointToBlockOffset","isEmptyTextBlock","onlyText","every","blockText","getTextBlockText","map","join","IS_MAC","window","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","event","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","hotkeySegment","slice","keyName","toKeyName","modifier","alias","code","undefined","TypeError","key","keyCode","toKeyCode","toLowerCase","name","toUpperCase","charCodeAt","defineBehavior","behavior","arrowDownOnLonelyBlockObject","on","guard","context","isArrowDown","keyboardEvent","focusBlockObject","getFocusBlockObject","nextBlock","getNextBlock","actions","type","placement","arrowUpOnLonelyBlockObject","isArrowUp","previousBlock","getPreviousBlock","breakingBlockObject","selectionIsCollapsed","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","getFocusTextBlock","selectionCollapsed","node","_","blockPath","selection","anchor","focus","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","decoratorAdd","decoratorRemove","decorator","decoratorToggle","coreDecoratorBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","focusSpan","getFocusSpan","level","props","at","unindentListOnBackspace","clearListOnEnter","focusListBlock","getFocusListBlock","indentListOnTab","selectedBlocks","getSelectedBlocks","guards","createGuards","selectedListBlocks","flatMap","isListBlock","selectedListBlock","Math","min","max","unindentListOnShiftTab","coreListBehaviors","softReturn","coreBehaviors","coreBehavior","decorators","blockObjects","lists"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7]}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 768, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/create-editor-schema.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/define-schema.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/debug.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/paths.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/ranges.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/selection.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/values.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/weakMaps.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/nodes/DefaultObject.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/nodes/index.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/components/DraggableBlock.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/components/Element.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/nodes/DefaultAnnotation.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/schema.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/validateValue.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/withChanges.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/withoutPatching.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.1.1/node_modules/%40sanity/diff-match-patch/dist/index.js","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/withUndoRedo.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/hooks/useSyncValue.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/components/Synchronizer.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/operationToPatches.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/applyPatch.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextBlockStyle.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.16/node_modules/%40portabletext/toolkit/dist/index.js","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/utils/sibling-utils.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextSelections.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.list-item.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.style.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action-utils.insert-block.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-block-object.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-break.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-inline-object.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-span.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.text-block.set.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.text-block.unset.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/behavior-actions/behavior.actions.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/components/Leaf.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/plugins/createWithInsertData.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/withSyncRangeDecorations.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/editor-event-listener.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/get-value.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40portabletext/editor/src/editor/editor-selector.ts"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {\n  defineField,\n  defineType,\n  type BlockDecoratorDefinition,\n  type ObjectSchemaType,\n} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @alpha\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n  icon?: BlockDecoratorDefinition['icon']\n}\n\n/**\n * @alpha\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @alpha\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @alpha\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        icon: blockObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        icon: inlineObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n              icon: decorator.icon,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              icon: annotation.icon,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n            icon: list.icon,\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n            icon: style.icon,\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {\n  IS_PROCESSING_LOCAL_CHANGES,\n  IS_PROCESSING_REMOTE_CHANGES,\n} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {useCallback, useMemo, useRef} from 'react'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../../utils/values'\nimport {\n  isChangingLocally,\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../../utils/withChanges'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  editorActor: EditorActor\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n  slateEditor: PortableTextSlateEditor\n}\n\nconst CURRENT_VALUE = new WeakMap<\n  PortableTextEditor,\n  PortableTextBlock[] | undefined\n>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (\n  value: PortableTextBlock[] | undefined,\n  userCallbackFn?: () => void,\n) => void {\n  const {editorActor, portableTextEditor, readOnly, slateEditor} = props\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const previousValue = useRef<PortableTextBlock[]>(undefined)\n  const updateValueFunctionRef =\n    useRef<(value: PortableTextBlock[] | undefined) => void>(undefined)\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n  const updateValueDebounced = useMemo(\n    () =>\n      debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(\n                slateEditor,\n                slateEditor.pteCreateTextBlock({decorators: []}),\n                {at: [0]},\n              )\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (\n                    let i = childrenLength - 1;\n                    i > slateValueFromProps.length - 1;\n                    i--\n                  ) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach(\n                  (currentBlock, currentBlockIndex) => {\n                    const oldBlock = slateEditor.children[currentBlockIndex]\n                    const hasChanges =\n                      oldBlock && !isEqual(currentBlock, oldBlock)\n                    if (hasChanges && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n                      if (\n                        !validation.valid &&\n                        validation.resolution?.autoResolve &&\n                        validation.resolution?.patches.length > 0\n                      ) {\n                        // Only apply auto resolution if the value has been populated before and is different from the last one.\n                        if (\n                          !readOnly &&\n                          previousValue.current &&\n                          previousValue.current !== value\n                        ) {\n                          // Give a console warning about the fact that it did an auto resolution\n                          console.warn(\n                            `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n                          )\n                          validation.resolution.patches.forEach((patch) => {\n                            editorActor.send({type: 'patch', patch})\n                          })\n                        }\n                      }\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        if (oldBlock._key === currentBlock._key) {\n                          if (debug.enabled)\n                            debug('Updating block', oldBlock, currentBlock)\n                          _updateBlock(\n                            slateEditor,\n                            currentBlock,\n                            oldBlock,\n                            currentBlockIndex,\n                          )\n                        } else {\n                          if (debug.enabled)\n                            debug('Replacing block', oldBlock, currentBlock)\n                          _replaceBlock(\n                            slateEditor,\n                            currentBlock,\n                            currentBlockIndex,\n                          )\n                        }\n                        isChanged = true\n                      } else {\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                    if (!oldBlock && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      if (debug.enabled)\n                        debug(\n                          'Validating and inserting new block in the end of the value',\n                          currentBlock,\n                        )\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      } else {\n                        debug('Invalid', validation)\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                  },\n                )\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          editorActor.send({\n            type: 'invalid value',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'value changed', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {throttle} from 'lodash'\nimport {useCallback, useEffect, useRef} from 'react'\nimport {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  getValue: () => Array<PortableTextBlock> | undefined\n  portableTextEditor: PortableTextEditor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const readOnly = useSelector(props.editorActor, (s) => s.context.readOnly)\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const {editorActor, getValue, portableTextEditor, slateEditor} = props\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    slateEditor,\n  })\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = getValue()\n      editorActor.send({\n        type: 'mutation',\n        patches: pendingPatches.current,\n        snapshot,\n      })\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [editorActor, slateEditor, getValue])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    const onFlushPendingPatchesThrottled = throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n      pendingPatches.current.push(event.patch)\n      onFlushPendingPatchesThrottled()\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, onFlushPendingPatches, slateEditor])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      editorActor.send({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [editorActor, syncValue, value])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.toggle',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'blur': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'blur',\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.add',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.remove',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.toggle',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.block object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block object',\n                placement: event.placement,\n                blockObject: event.blockObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.inline object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.inline object',\n                inlineObject: event.inlineObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'list item.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'list item.toggle',\n                listItem: event.listItem,\n              },\n              editor,\n            })\n            break\n          }\n          case 'style.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'style.toggle',\n                style: event.style,\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEqualToEmptyEditor} from '../utils/values'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan?.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan?.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      return\n    }\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode && !selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {blockOffsetToSpanSelectionPoint} from '../editor/utils/utils.block-offset'\nimport type {PickFromUnion} from '../type-utils'\nimport debug from '../utils/debug'\nimport {toSlatePath} from '../utils/paths'\nimport {toSlateRange} from '../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  debug('Behavior action', action)\n\n  switch (action.type) {\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.unset': {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  BehaviorActionIntend,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport debug from '../utils/debug'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\nimport type {EditorContext} from './editor-snapshot'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'behavior action intends'\n      editor: PortableTextSlateEditor\n      actionIntends: Array<BehaviorActionIntend>\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'toggle readOnly'\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<InternalEditorEmittedEvent, 'type', 'readOnly toggled'>\n\n/**\n * @alpha\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blurred'\n  | 'done loading'\n  | 'error'\n  | 'focused'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'readOnly toggled'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blurred'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'readOnly toggled'; readOnly: boolean}\n  | PickFromUnion<\n      SyntheticBehaviorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'annotation.toggle'\n      | 'blur'\n      | 'decorator.add'\n      | 'decorator.remove'\n      | 'decorator.toggle'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'focus'\n      | 'style.toggle'\n    >\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      readOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      debug('Behavior event', event)\n\n      const defaultAction =\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (!defaultAction) {\n          return\n        }\n\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      const editorContext = {\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value,\n      } satisfies EditorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorContext,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          enqueue.raise({\n            type: 'behavior action intends',\n            editor: event.editor,\n            actionIntends,\n          })\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (!defaultAction) {\n          return\n        }\n\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    readOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'annotation.add': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'annotation.remove': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'annotation.toggle': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'blur': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'decorator.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'focus': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'insert.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'list item.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'style.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'ready': {actions: emit(({event}) => event)},\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => event),\n      ],\n    },\n    'blurred': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'toggle readOnly': {\n      actions: [\n        assign({readOnly: ({context}) => !context.readOnly}),\n        emit(({context}) => ({\n          type: 'readOnly toggled',\n          readOnly: context.readOnly,\n        })),\n      ],\n    },\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'behavior event': {\n      actions: 'handle behavior event',\n      guard: ({context}) => !context.readOnly,\n    },\n    'behavior action intends': {\n      actions: [\n        ({context, event}) => {\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of event.actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n        },\n        enqueueActions(({context, event, enqueue}) => {\n          if (\n            event.actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }),\n      ],\n    },\n  },\n  initial: 'pristine',\n  states: {\n    pristine: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            normalizing: {\n              target: 'normalizing',\n            },\n            patch: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n            mutation: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n          },\n        },\n        normalizing: {\n          on: {\n            'done normalizing': {\n              target: 'idle',\n            },\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n          },\n        },\n      },\n    },\n    dirty: {\n      entry: ['emit pending events', 'clear pending events'],\n      on: {\n        patch: {\n          actions: 'emit patch event',\n        },\n        mutation: {\n          actions: 'emit mutation event',\n        },\n      },\n    },\n  },\n})\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditableAPI} from '../types/editor'\nimport {compileType} from '../utils/schema'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @alpha\n */\nexport type EditorConfig = {\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @alpha\n */\nexport type EditorEvent = PickFromUnion<\n  InternalEditorEvent,\n  'type',\n  | 'annotation.toggle'\n  | 'blur'\n  | 'decorator.add'\n  | 'decorator.remove'\n  | 'decorator.toggle'\n  | 'focus'\n  | 'insert.block object'\n  | 'insert.inline object'\n  | 'list item.toggle'\n  | 'style.toggle'\n  | 'patches'\n  | 'toggle readOnly'\n  | 'update behaviors'\n  | 'update value'\n>\n\n/**\n * @alpha\n */\nexport type Editor = {\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-expect-error\n        listener,\n      ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {compileType} from '../utils/schema'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'toggle readOnly',\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          getValue={this.editor._internal.editable.getValue}\n          portableTextEditor={this}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'annotation.add':\n        case 'annotation.remove':\n        case 'annotation.toggle':\n        case 'blur':\n        case 'decorator.add':\n        case 'decorator.remove':\n        case 'decorator.toggle':\n        case 'focus':\n        case 'insert.block object':\n        case 'insert.inline object':\n        case 'list item.toggle':\n        case 'style.toggle':\n        case 'patches':\n        case 'readOnly toggled':\n          break\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {isHotkey} from '../../utils/is-hotkey'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations(\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor,\n  syncRangeDecorations: (operation?: Operation) => void,\n) {\n  const originalApply = slateEditor.apply\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n    if (op.type !== 'set_selection') {\n      syncRangeDecorations(op)\n    }\n  }\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) => s.context.readOnly)\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations(slateEditor, syncRangeDecorations)\n    return () => teardown()\n  }, [slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @alpha\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @alpha\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const editable = editor._internal.editable\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        getValue={editable.getValue}\n        portableTextEditor={portableTextEditor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @alpha\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditor} from './editor-provider'\n\n/**\n * @alpha\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n","import {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {Editor} from './create-editor'\n\nexport function getValue(editor: Editor) {\n  return fromSlateValue(\n    editor._internal.slateEditor.instance.children,\n    editor._internal.editorActor.getSnapshot().context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor._internal.slateEditor.instance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from './create-editor'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @alpha\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @alpha\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (snapshot) => {\n      const context = {\n        keyGenerator: snapshot.context.keyGenerator,\n        schema: snapshot.context.schema,\n        selection: snapshot.context.selection,\n        value: getValue(editor),\n      }\n\n      return selector({context})\n    },\n    compare,\n  )\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","icon","inlineObject","portableTextSchema","defineField","marks","decorator","_a","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","__spreadProps","__spreadValues","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","undefined","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","text","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","$","t0","JSON","stringify","t1","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","level","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","node","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","listItem","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","patches","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","isChangingLocally","PATCHING","withoutPatching","isPatching","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","debugVerbose","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","on","snapshot","reset","forEach","patch","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","context","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","CURRENT_VALUE","useSyncValue","portableTextEditor","slateEditor","previousValue","updateValueFunctionRef","updateFromCurrentValue","useCallback","currentValue","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","i","currentBlock","currentBlockIndex","oldBlock","validationValue","validation","console","send","_updateBlock","_replaceBlock","error","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","useSelector","_temp","_temp2","getValue","pendingPatches","syncValue","onFlushPendingPatches","onFlushPendingPatchesThrottled","throttle","isNormalizing","isInitialValueFromProps","s_0","s","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","maxBlocks","subscription","behaviorEvent","placement","addMark","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","entry","Node","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","defaultStyle","nodeEntry","SlateText","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","hasChanges","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","id","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","guards","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","removeAnnotation","getSelection","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","spanMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","anchorBlockPath","start","end","edges","lastFocusBlockChild","atTheEndOfBlock","atTheStartOfBlock","nextBlockPath","selectionAcrossBlocks","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","always","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","insert.text","insert.text block","effect","move.block","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","reselect","performAction","performDefaultAction","editorMachine","setup","events","emitted","input","actions","assign","behaviors","assertEvent","emit","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","behavior","raise","actionIntends","editorContext","behaviorOverwritten","eventBehavior","shouldRun","guard","actionIntendSets","actionSet","actionIntend","nativeEvent","createMachine","coreBehaviors","initial","states","pristine","idle","normalizing","mutation","dirty","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","createEditorFromActor","useCreateEditor","useActorRef","schemaDefinition","hasOwnProperty","editable","listener","_internal","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","PortableTextEditor","Component","constructor","change$","Subject","setEditable","parseInt","componentDidUpdate","prevProps","editorRef","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","possibleMark","possibleCommand","command","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","slateValue","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","editorTypes","newNode","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","handlePaste","onPasteResult","Promise","resolve","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","initialConfig","useEditor","EditorEventListener","defaultCompare","a","b","useEditorSelector","selector","compare"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]}},
    {"offset": {"line": 8569, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}