{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"version.mjs","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/core/version.ts"],"sourcesContent":["import {version} from '../../package.json'\n/**\n * This version is provided by `@sanity/pkg-utils` at build time\n * @hidden\n * @beta\n */\nexport const SANITY_VERSION = process.env.PKG_VERSION || `${version}-development`\n"],"names":["SANITY_VERSION"],"mappings":";;;AAMO,MAAMA,iBAAiB","ignoreList":[0]}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"file":"generate-help-url.esm.mjs","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/conditionalWrapper/ConditionalWrapper.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/button/Button.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/dialog/Dialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/errorBoundary/ErrorBoundary.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/menuButton/MenuButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/menuGroup/MenuGroup.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/core/components/Hotkeys.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/menuItem/MenuItem.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/popover/Popover.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/tab/Tab.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/tooltip/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/tooltip/Tooltip.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/ui-components/tooltipDelayGroupProvider/TooltipDelayGroupProvider.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/.pnpm/%40sanity%2Bgenerate-help-url%403.0.0/node_modules/%40sanity/generate-help-url/dist/generate-help-url.esm.js"],"sourcesContent":["export type ConditionalWrapperRenderWrapperCallback = (children: React.ReactNode) => React.ReactNode\n\n/**\n * A helper component that conditionally wraps its children in a wrapper component.\n *\n * @internal\n */\nexport function ConditionalWrapper({\n  children,\n  condition,\n  wrapper,\n}: {\n  children: React.ReactNode\n  condition: boolean\n  wrapper: ConditionalWrapperRenderWrapperCallback\n}): React.ReactNode {\n  if (!condition) {\n    return children\n  }\n\n  return wrapper(children)\n}\n","/* eslint-disable no-restricted-imports */\n\nimport {Button as UIButton, type ButtonProps as UIButtonProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps, useCallback} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Tooltip, type TooltipProps} from '..'\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper'\n\ntype BaseButtonProps = Pick<\n  UIButtonProps,\n  | 'as'\n  | 'icon'\n  | 'iconRight'\n  | 'justify'\n  | 'loading'\n  | 'mode'\n  | 'paddingY'\n  | 'selected'\n  | 'tone'\n  | 'type'\n  | 'width'\n> & {\n  size?: 'default' | 'large'\n}\n\ntype ButtonWithText = {\n  text: string\n  tooltipProps?: TooltipProps | null\n  icon?: UIButtonProps['icon']\n}\n\ntype IconButton = {\n  text?: undefined\n  icon?: UIButtonProps['icon']\n  /**\n   * When using a button with an icon, tooltipProps are required to enforce consistency in UI.\n   */\n  tooltipProps: TooltipProps | null\n}\n\n/** @internal */\nexport type ButtonProps = BaseButtonProps & (ButtonWithText | IconButton)\n\nconst LARGE_BUTTON_PROPS = {\n  space: 3,\n  padding: 3,\n}\nconst DEFAULT_BUTTON_PROPS = {\n  space: 2,\n  padding: 2,\n}\n\nconst TooltipButtonWrapper = styled.span`\n  display: inline-flex;\n`\n/**\n * Customized Sanity UI <Button> with pre-defined layout options.\n *\n * @internal\n */\nexport const Button = forwardRef(function Button(\n  {\n    size = 'default',\n    mode = 'default',\n    paddingY,\n    tone = 'default',\n    tooltipProps,\n    ...rest\n  }: ButtonProps & Omit<HTMLProps<HTMLButtonElement>, 'as' | 'size' | 'title'>,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This span is needed to make the tooltip work in disabled buttons */}\n          <TooltipButtonWrapper>{children}</TooltipButtonWrapper>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  const sizeProps = size === 'default' ? DEFAULT_BUTTON_PROPS : LARGE_BUTTON_PROPS\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIButton {...rest} {...sizeProps} paddingY={paddingY} ref={ref} mode={mode} tone={tone} />\n    </ConditionalWrapper>\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  Box,\n  type BoxHeight,\n  Button as UIButton,\n  Dialog as UIDialog,\n  type DialogProps as UIDialogProps,\n  Flex,\n} from '@sanity/ui'\nimport {type ComponentProps, forwardRef, type HTMLProps, type ReactNode, type Ref} from 'react'\nimport {useTranslation} from 'react-i18next'\n\n/** @internal */\nexport type DialogProps = Pick<\n  UIDialogProps,\n  | '__unstable_autoFocus'\n  | '__unstable_hideCloseButton'\n  | 'contentRef'\n  | 'header'\n  | 'id'\n  | 'onActivate'\n  | 'onClickOutside'\n  | 'onClose'\n  | 'portal'\n  | 'position'\n  | 'scheme'\n  | 'width'\n> & {\n  /**\n   * Dialog body height.\n   * Set this to 'fill' (i.e. 100%) if you want overflow body content to be contained\n   * and not trigger dynamic border visibility.\n   */\n  bodyHeight?: BoxHeight\n  children?: ReactNode\n  footer?: {\n    cancelButton?: Omit<ComponentProps<typeof UIButton>, 'fontSize' | 'padding'>\n    confirmButton?: Omit<ComponentProps<typeof UIButton>, 'fontSize' | 'padding'>\n  }\n  /**\n   * If enabled, removes all default padding from dialog content.\n   */\n  padding?: boolean\n}\n\n/**\n * Customized Sanity UI <Dialog> that enforces an opinionated footer layout with a max of two buttons (confirm and cancel).\n *\n * @internal\n */\nexport const Dialog = forwardRef(function Dialog(\n  {\n    bodyHeight,\n    children,\n    footer,\n    padding = true,\n    ...props\n  }: DialogProps & Pick<HTMLProps<HTMLDivElement>, 'onDragEnter' | 'onDrop'>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const {t} = useTranslation()\n\n  return (\n    <UIDialog\n      {...props}\n      animate\n      ref={ref}\n      footer={\n        (footer?.confirmButton || footer?.cancelButton) && (\n          <Flex width=\"full\" gap={3} justify=\"flex-end\" padding={3}>\n            {props.onClose && (\n              <UIButton\n                mode=\"bleed\"\n                padding={2}\n                text={t('common.dialog.cancel-button.text')}\n                tone=\"default\"\n                onClick={props.onClose}\n                data-testid=\"cancel-button\"\n                {...footer.cancelButton}\n              />\n            )}\n            {footer.confirmButton && (\n              <UIButton\n                mode=\"default\"\n                padding={2}\n                text={t('common.dialog.confirm-button.text')}\n                tone=\"critical\"\n                data-testid=\"confirm-button\"\n                {...footer.confirmButton}\n              />\n            )}\n          </Flex>\n        )\n      }\n    >\n      <Box height={bodyHeight} padding={padding ? 4 : 0}>\n        {children}\n      </Box>\n    </UIDialog>\n  )\n})\n","import {\n  // eslint-disable-next-line no-restricted-imports\n  ErrorBoundary as UIErrorBoundary,\n  type ErrorBoundaryProps as UIErrorBoundaryProps,\n} from '@sanity/ui'\nimport {useCallback, useContext} from 'react'\n\nimport {SourceContext} from '../../_singletons'\n\nexport type ErrorBoundaryProps = UIErrorBoundaryProps\n\n/**\n * ErrorBoundary component that catches errors and uses onUncaughtError config property\n * It also calls the onCatch prop if it exists.\n */\nexport function ErrorBoundary({onCatch, ...rest}: ErrorBoundaryProps): JSX.Element {\n  // Use context, because source could be undefined and we don't want to throw in that case\n  const source = useContext(SourceContext)\n\n  const handleCatch = useCallback(\n    ({error: caughtError, info: caughtInfo}: {error: Error; info: React.ErrorInfo}) => {\n      // Send the error to the source if it has an onUncaughtError method\n      source?.onUncaughtError?.(caughtError, caughtInfo)\n\n      // Call the onCatch prop if it exists\n      onCatch?.({error: caughtError, info: caughtInfo})\n    },\n    [source, onCatch],\n  )\n\n  return <UIErrorBoundary {...rest} onCatch={handleCatch} />\n}\n","/* eslint-disable no-restricted-imports */\nimport {\n  MenuButton as UIMenuButton,\n  type MenuButtonProps as UIMenuButtonProps,\n  type PopoverProps,\n} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef} from 'react'\n\n/** @internal */\nexport type MenuButtonProps = Omit<UIMenuButtonProps, 'popover'> & {\n  popover?: Omit<PopoverProps, 'animate' | 'content' | 'open'>\n}\n\n/**\n * Customized Sanity UI <MenuButton> that enforces popover animation.\n *\n * @internal\n */\nexport const MenuButton = forwardRef(function MenuButton(\n  props: MenuButtonProps,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  return (\n    <UIMenuButton\n      {...props}\n      ref={ref}\n      popover={{\n        ...props.popover,\n        animate: true,\n      }}\n    />\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {MenuGroup as UIMenuGroup, type MenuGroupProps as UIMenuGroupProps} from '@sanity/ui'\nimport {type HTMLProps} from 'react'\n\n/** @internal */\nexport type MenuGroupProps = Pick<UIMenuGroupProps, 'icon' | 'popover' | 'text' | 'tone'>\n\n/**\n * Customized Sanity UI <MenuGroup> component with pre-defined layout options.\n *\n * @internal\n */\nexport const MenuGroup = (\n  props: MenuGroupProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'tabIndex'>,\n) => {\n  return <UIMenuGroup {...props} fontSize={1} padding={3} />\n}\n","import {Hotkeys as UIHotkeys, type HotkeysProps as UIHotkeysProps} from '@sanity/ui'\nimport {type HTMLProps, type RefAttributes} from 'react'\n\n/**\n * Properties for the `Hotkeys` component.\n *\n * @public\n */\nexport type HotkeysProps = UIHotkeysProps & {\n  /**\n   * Whether to make the keys platform-aware (eg `alt` to `option` on Apple devices).\n   *\n   * @defaultValue true\n   */\n  makePlatformAware?: boolean\n} & Omit<HTMLProps<HTMLElement>, 'ref' | 'size' | 'as'> &\n  RefAttributes<HTMLElement>\n\n/**\n * Renders given `keys` as \"keycaps\" visually.\n *\n * This is a wrapper around `@sanity/ui`'s `Hotkeys` component, which allows for altering keys\n * (eg `alt` to `option`) on Apple devices unless `makePlatformAware` is set to `false`.\n *\n * @param props - Properties to render with\n * @returns React element\n * @public\n */\nexport function Hotkeys({makePlatformAware = true, keys: hotKeys = [], ...props}: HotkeysProps) {\n  const keys = makePlatformAware ? hotKeys.map(platformifyKey) : hotKeys\n  return <UIHotkeys {...props} keys={keys} />\n}\n\n/**\n * @internal\n */\nconst IS_APPLE_DEVICE =\n  typeof navigator === 'undefined' || typeof navigator.platform !== 'string'\n    ? false\n    : /Mac|iPod|iPhone|iPad/.test(navigator.platform || '')\n\n/**\n * Given key 'Alt', or 'Option' (case-insensitive), return the platform-appropriate key name\n * (eg 'Alt' on non-Apple devices, 'Option' on Apple devices).\n *\n * @param key - Key to platformify\n * @returns Platform-appropriate key name\n * @internal\n */\nfunction platformifyKey(key: string): string {\n  const lowerKey = key.toLowerCase()\n\n  if (lowerKey === 'alt' && IS_APPLE_DEVICE) {\n    return matchCase(key, 'option')\n  }\n\n  if (lowerKey === 'option' && !IS_APPLE_DEVICE) {\n    return matchCase(key, 'alt')\n  }\n\n  return key\n}\n\n/**\n * Apply the case (lowercase/uppercase) of `original` to `target`, character by character,\n * eg matching ALL CAPS, all lowercase or Mixed Case.\n *\n * @param original - The original string to match case of\n * @param target - The target string to apply case to\n * @returns Target string with case applied from original\n * @internal\n */\nfunction matchCase(original: string, target: string): string {\n  const orgLength = original.length\n\n  return target.replace(/./g, (char, i) => {\n    // Replace character by character matching case of original\n    // If running out of original, just return the target case as-is\n    return i < orgLength && original[i] === original[i].toUpperCase() ? char.toUpperCase() : char\n  })\n}\n","/* eslint-disable no-restricted-imports */\nimport {\n  Badge,\n  Box,\n  Flex,\n  MenuItem as UIMenuItem,\n  type MenuItemProps as UIMenuItemProps,\n  Stack,\n  Text,\n} from '@sanity/ui'\nimport {\n  createElement,\n  forwardRef,\n  type HTMLProps,\n  isValidElement,\n  type JSX,\n  type ReactNode,\n  type Ref,\n  useCallback,\n  useMemo,\n} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {styled} from 'styled-components'\n\nimport {Hotkeys} from '../../core/components/Hotkeys'\nimport {Tooltip, type TooltipProps} from '..'\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper'\n\nconst FONT_SIZE = 1\nconst SUBTITLE_FONT_SIZE = 0\n\n/* Using px value here to make title/subtitles align with icon */\nconst SubtitleText = styled(Text)`\n  margin-top: 2px;\n`\n\n/** @internal */\nexport type MenuItemProps = Pick<\n  UIMenuItemProps,\n  'as' | 'icon' | 'iconRight' | 'pressed' | 'selected' | 'tone' | 'hotkeys'\n> & {\n  badgeText?: string\n  /**\n   * Usage of `children` is not supported, import `MenuItem` from `@sanity/ui` instead.\n   */\n  children?: undefined\n  /**\n   * Previews should be 25x25.\n   */\n  preview?: ReactNode\n  /**\n   * Optional render callback which receives menu item content.\n   */\n  renderMenuItem?: (menuItemContent: JSX.Element) => ReactNode\n  text?: string\n  tooltipProps?: TooltipProps | null\n  /**\n   * Optional subtitle prop for the menu item.\n   * While not recommended, it is utilized for the workspace menu button.\n   */\n  __unstable_subtitle?: string\n  /**\n   * An optional property to adjust spacing in the preview between the icon and the text.\n   * Not recommended, but is applied to the workspace menu button..\n   */\n  __unstable_space?: number\n}\n\nconst PreviewWrapper = styled(Box)`\n  height: 25px;\n  width: 25px;\n  overflow: hidden;\n`\n\n/**\n * Customized Sanity UI <MenuItem> that restricts usage of `children` to encourage simple,\n * single line menu items.\n *\n * The workspace menu button needed a subtitle - hence, the StudioUI MenuIten now takes a subtitle prop.\n * This is only an escape hatch for the workspace menu button and is not recommended for general use.\n *\n * It also accepts a prop to attach tooltips as well as custom badges too.\n *\n * @internal\n */\nexport const MenuItem = forwardRef(function MenuItem(\n  {\n    badgeText,\n    children: childrenProp,\n    disabled,\n    hotkeys,\n    icon,\n    iconRight,\n    preview = null,\n    renderMenuItem,\n    text,\n    tooltipProps,\n    __unstable_subtitle,\n    __unstable_space,\n    ...rest\n  }: MenuItemProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'selected' | 'tabIndex' | 'size'>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const menuItemContent = useMemo(() => {\n    return (\n      <Flex align=\"center\" gap={2}>\n        {preview && (\n          <PreviewWrapper\n            style={{opacity: disabled ? 0.25 : undefined}}\n            paddingRight={__unstable_space ? 1 : 0}\n          >\n            <Flex align=\"center\" height=\"fill\" justify=\"center\">\n              {preview}\n            </Flex>\n          </PreviewWrapper>\n        )}\n        {icon && (\n          <Box paddingRight={1}>\n            <Text size={FONT_SIZE}>\n              {isValidElement(icon) && icon}\n              {isValidElementType(icon) && createElement(icon)}\n            </Text>\n          </Box>\n        )}\n        {text && (\n          <Stack\n            flex={1}\n            space={__unstable_subtitle ? 1 : 2}\n            paddingLeft={__unstable_subtitle ? 1 : 0}\n          >\n            <Text size={FONT_SIZE} textOverflow=\"ellipsis\" weight=\"medium\">\n              {text}\n            </Text>\n            {__unstable_subtitle && (\n              <SubtitleText size={SUBTITLE_FONT_SIZE} textOverflow=\"ellipsis\" weight=\"medium\" muted>\n                {__unstable_subtitle}\n              </SubtitleText>\n            )}\n          </Stack>\n        )}\n        {(badgeText || hotkeys || iconRight) && (\n          <Flex align=\"center\" gap={3} marginLeft={3}>\n            {hotkeys && <Hotkeys keys={hotkeys} style={{marginTop: -4, marginBottom: -4}} />}\n\n            {badgeText && (\n              <Badge fontSize={0} style={{marginTop: -4, marginBottom: -4}}>\n                {badgeText}\n              </Badge>\n            )}\n\n            {iconRight && (\n              <Text size={FONT_SIZE}>\n                {isValidElement(iconRight) && iconRight}\n                {isValidElementType(iconRight) && createElement(iconRight)}\n              </Text>\n            )}\n          </Flex>\n        )}\n      </Flex>\n    )\n  }, [\n    preview,\n    disabled,\n    __unstable_space,\n    icon,\n    text,\n    __unstable_subtitle,\n    badgeText,\n    hotkeys,\n    iconRight,\n  ])\n\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This div is needed to make the tooltip work in disabled menu items */}\n          <div>{children}</div>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIMenuItem\n        disabled={disabled}\n        paddingLeft={preview ? 1 : 3}\n        paddingRight={3}\n        paddingY={preview ? 1 : 3}\n        ref={ref}\n        {...rest}\n      >\n        {typeof childrenProp === 'undefined' && typeof renderMenuItem === 'function'\n          ? renderMenuItem(menuItemContent)\n          : menuItemContent}\n      </UIMenuItem>\n    </ConditionalWrapper>\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {Popover as UIPopover, type PopoverProps as UIPopoverProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\n/** @internal */\nexport type PopoverProps = Omit<UIPopoverProps, 'animate'>\n\n/**\n * Customized Sanity UI <Popover> that forces `animate=true`\n *\n * All Popovers in the studio should be animated.\n *\n * @internal\n */\nexport const Popover = forwardRef(function Popover(\n  props: PopoverProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'children' | 'content' | 'width'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  return <UIPopover {...props} animate ref={ref} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {Tab as UITab, type TabProps as UITabProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\n/**\n * @internal\n *\n * Padding and font sizes are fixed in Studio UI <Tab> components.\n */\nexport type TabProps = Pick<\n  UITabProps,\n  'aria-controls' | 'focused' | 'icon' | 'id' | 'label' | 'selected' | 'tone'\n>\n\n/**\n * Customized Sanity UI <Tab> with limited layout options.\n *\n * @internal\n */\nexport const Tab = forwardRef(function Tab(\n  {tone = 'default', ...props}: TabProps & Omit<HTMLProps<HTMLButtonElement>, 'as' | 'size'>,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  return <UITab {...props} muted padding={2} ref={ref} tone={tone} />\n})\n","export const TOOLTIP_DELAY_PROPS = {\n  open: 400,\n}\n","import {\n  Box,\n  Flex,\n  type HotkeysProps,\n  Text,\n  // eslint-disable-next-line no-restricted-imports\n  Tooltip as UITooltip,\n  // eslint-disable-next-line no-restricted-imports\n  type TooltipProps as UITooltipProps,\n} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {Hotkeys} from '../../core/components/Hotkeys'\nimport {TOOLTIP_DELAY_PROPS} from './constants'\n\n/** @internal */\n\nexport type TooltipProps = Omit<UITooltipProps, 'arrow' | 'padding' | 'shadow'> & {\n  hotkeys?: HotkeysProps['keys']\n}\n\nconst TOOLTIP_SHARED_PROPS: UITooltipProps = {\n  animate: true,\n  arrow: false,\n  boundaryElement: null,\n  delay: TOOLTIP_DELAY_PROPS,\n  fallbackPlacements: ['bottom-start', 'bottom-end', 'top-start', 'top-end'],\n  placement: 'bottom',\n  portal: true,\n}\n\n/**\n * Customized Sanity UI <Tooltip> with limited layout options and support for showing hotkeys.\n *\n * In just about all cases, its strongly recommended that you pass a string to the `content` prop.\n * This helps simplify i18n and encourages short and concise.\n *\n * Passing ReactNode values to `content` is supported, but discouraged.\n *\n * @internal\n */\nexport const Tooltip = forwardRef(function Tooltip(\n  props: TooltipProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {content, hotkeys, ...rest} = props\n\n  if (typeof content === 'string') {\n    return (\n      <UITooltip\n        {...TOOLTIP_SHARED_PROPS}\n        content={\n          <Flex align=\"center\">\n            {content && (\n              <Box flex={1} padding={1}>\n                <Text size={1}>{content}</Text>\n              </Box>\n            )}\n            {hotkeys && (\n              <Box flex=\"none\">\n                <Hotkeys keys={hotkeys} />\n              </Box>\n            )}\n          </Flex>\n        }\n        padding={1}\n        ref={ref}\n        {...rest}\n      />\n    )\n  }\n\n  return <UITooltip {...TOOLTIP_SHARED_PROPS} content={content} ref={ref} {...rest} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  TooltipDelayGroupProvider as UITooltipDelayGroupProvider,\n  type TooltipDelayGroupProviderProps as UITooltipDelayGroupProviderProps,\n} from '@sanity/ui'\n\nimport {TOOLTIP_DELAY_PROPS} from '../tooltip/constants'\n\n/** @internal */\nexport type TooltipDelayGroupProviderProps = Omit<UITooltipDelayGroupProviderProps, 'delay'>\n\n/**\n * Opinionated Sanity UI <TooltipDelayGroupProvider> which forces the same delay to all tooltips.\n *\n * @internal\n */\nexport const TooltipDelayGroupProvider = (props: TooltipDelayGroupProviderProps) => {\n  return (\n    <UITooltipDelayGroupProvider delay={TOOLTIP_DELAY_PROPS}>\n      {props.children}\n    </UITooltipDelayGroupProvider>\n  )\n}\n","const BASE_URL = \"https://docs.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nexport { generateHelpUrl };\n//# sourceMappingURL=generate-help-url.esm.js.map\n"],"names":["ConditionalWrapper","children","condition","wrapper","LARGE_BUTTON_PROPS","space","padding","DEFAULT_BUTTON_PROPS","TooltipButtonWrapper","styled","span","Button","forwardRef","t0","ref","$","_c","paddingY","rest","t1","t2","t3","tooltipProps","size","mode","tone","undefined","t4","content","renderWrapper","sizeProps","t5","t6","UIButton","t7","Dialog","bodyHeight","footer","props","t","useTranslation","confirmButton","cancelButton","onClose","UIDialog","ErrorBoundary","onCatch","source","useContext","SourceContext","error","caughtError","info","caughtInfo","onUncaughtError","handleCatch","UIErrorBoundary","MenuButton","popover","animate","UIMenuButton","MenuGroup","UIMenuGroup","Hotkeys","makePlatformAware","keys","hotKeys","map","platformifyKey","UIHotkeys","IS_APPLE_DEVICE","navigator","platform","test","key","lowerKey","toLowerCase","matchCase","original","target","orgLength","length","replace","char","i","toUpperCase","FONT_SIZE","SUBTITLE_FONT_SIZE","SubtitleText","Text","PreviewWrapper","Box","MenuItem","__unstable_space","__unstable_subtitle","badgeText","childrenProp","disabled","hotkeys","icon","iconRight","renderMenuItem","text","preview","opacity","isValidElement","isValidElementType","createElement","marginTop","marginBottom","menuItemContent","t8","t9","t10","t11","t12","t13","UIMenuItem","t14","Popover","UIPopover","Tab","UITab","TOOLTIP_DELAY_PROPS","open","TOOLTIP_SHARED_PROPS","arrow","boundaryElement","delay","fallbackPlacements","placement","portal","Tooltip","UITooltip","TooltipDelayGroupProvider","UITooltipDelayGroupProvider","BASE_URL","slug"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"file":"pane.mjs","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/i18n/index.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/DocTitle.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneItem/PaneItemPreview.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneRouter/BackLink.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/usePaneLayout.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneRouter/ChildLink.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneRouter/ParameterizedLink.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneRouter/ReferenceChildLink.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneRouter/usePaneRouter.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/confirmDeleteDialog/index.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/Delay.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneDivider.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/Pane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneContent.styles.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/usePane.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneContent.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/util/toLowerCaseNoSpaces.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneMenuButtonItem.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneContextMenuButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneFooter.styles.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneFooter.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneHeader.styles.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneHeader.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneHeaderActionButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneLayout.styles.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/helpers/_calcPaneResize.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/helpers/_getDOMPath.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/helpers/_sortElements.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/paneLayoutController.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/pane/PaneLayout.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/menuNodes.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/IntentButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/MissingSchemaType.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneItem/PaneItem.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/RenderActionCollectionState.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/RenderBadgeCollectionState.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/error/ErrorPane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/loading/getWaitMessages.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/loading/LoadingPane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/useDocumentPane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/comments/CommentsWrapper.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/useStructureTool.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/useDocumentTitle.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/DocumentOperationResults.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/paneItem/helpers.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentInspector/Resizer.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentInspector/Resizable.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/useStructureToolSetting.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectDialog/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectDialog/helpers.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectDialog/Search.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectDialog/InspectDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/Banner.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/FormView.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/DocumentPanel.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/ActionStateDialog.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/ActionMenuButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/DeleteAction.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/DiscardChangesAction.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/DuplicateAction.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/HistoryRestoreAction.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/PublishAction.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentActions/UnpublishAction.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/components/spacerButton/SpacerButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/DocumentBadges.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusLine.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/RevisionStatusLine.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/useResizeObserver.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusBar.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/menuItems.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/usePreviewUrl.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayoutError.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayout.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/getInitialValueTemplateOpts.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/DocumentPaneProvider.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/DocumentPane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/DocumentListPaneContent.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/helpers.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/util/getExtendedProjection.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/listenSearchQuery.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/useDocumentList.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/DocumentListPane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/PaneHeader.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/SheetListCell.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/ColumnsControl.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/documentList/PaneContainer.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/SerializeError.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/Sort.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/MenuItem.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/MenuItemGroup.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/util/validateId.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/util/getStructureNodeId.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/Component.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/util/resolveTypeForDocument.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/views/View.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/views/ComponentView.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/views/FormView.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/views/index.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/Document.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/InitialValueTemplateItem.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/Intent.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/Layout.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/GenericList.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/DocumentList.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/List.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/ListItem.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/DocumentListItem.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/DocumentTypeList.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/documentTypeListItems.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureBuilder/createStructureBuilder.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/documentBadges/LiveEditBadge.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/getIntentState.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/constants.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/helpers.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/timeline.styled.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/timelineI18n.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/userAvatarStack.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/timelineItem.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/utils.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/timeline.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/TimelineError.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/timeline/timelineMenu.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/changes/HistorySelector.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/changes/index.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/validation/getPathTitles.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/panes/document/inspectors/validation/index.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/router.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/structureTool.ts","file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/sanity/src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, title, value._id],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <CopyToClipboard\n                                  text={documentId}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onCopy={() => {\n                                    toast.push({\n                                      title: t(\n                                        'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                      ),\n                                      status: 'success',\n                                    })\n                                  }}\n                                >\n                                  <Button\n                                    mode=\"bleed\"\n                                    icon={CopyIcon}\n                                    tooltipProps={{\n                                      content: t(\n                                        'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                      ),\n                                    }}\n                                  />\n                                </CopyToClipboard>\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {type ReactElement, useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: ReactElement | (() => ReactElement)\n  ms?: number\n}): ReactElement {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const Link = useMemo(\n    () =>\n      function LinkComponent(linkProps: {children: ReactNode}) {\n        return <ChildLink {...linkProps} childId={id} />\n      },\n    [ChildLink, id],\n  )\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={Link as FIXME}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n    </PreviewCard>\n  )\n}\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const lenRef = useRef(len)\n\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  const menuItemsRef = useRef(menuItems)\n\n  useEffect(() => {\n    if (lenRef.current !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItemsRef.current[i]\n      }\n\n      lenRef.current = len\n\n      setMenuItems(() => {\n        menuItemsRef.current = newFieldActions\n        return newFieldActions\n      })\n    }\n  }, [len])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      menuItemsRef.current = next\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {error: undefined, title: `New ${schemaType?.title || schemaType?.name}`}\n  }\n\n  if (error) {\n    return {error: `Error: ${error.message}`, title: undefined}\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n","import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>()\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {createElement, type ReactElement, useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import JSONInspector from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type JSX, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                },\n                refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                  ?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  isDraftId,\n  type ObjectSchemaType,\n  Translate,\n  useDocumentOperation,\n  useTranslation,\n} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  if (displayed && displayed._id && !isDraftId(displayed._id)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value],\n  )\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && isLiveEdit && ready && (\n                    <DraftLiveEditBanner\n                      displayed={displayed}\n                      documentId={documentId}\n                      schemaType={schemaType}\n                    />\n                  )}\n\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      {!permissions?.granted && (\n                        <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n                      )}\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {type ReactElement} from 'react'\nimport {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {\n  createElement,\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={<DocumentHeaderTitle />}\n          tabs={showTabs && <DocumentHeaderTabs />}\n          tabIndex={tabIndex}\n          backButton={\n            showBackButton && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: t('pane-header.back-button.text')}}\n              />\n            )\n          }\n          actions={\n            <Flex align=\"center\" gap={1}>\n              {unstable_languageFilter.length > 0 && (\n                <>\n                  {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                    return createElement(languageFilterComponent, {\n                      // eslint-disable-next-line react/no-array-index-key\n                      key: `language-filter-${idx}`,\n                      schemaType,\n                    })\n                  })}\n                </>\n              )}\n\n              {menuButtonNodes.map((item) => (\n                <PaneHeaderActionButton key={item.key} node={item} />\n              ))}\n              {editState && (\n                <RenderActionCollectionState\n                  actions={actions}\n                  actionProps={editState}\n                  group=\"paneActions\"\n                >\n                  {renderPaneActions}\n                </RenderActionCollectionState>\n              )}\n\n              {showSplitPaneButton && (\n                <Button\n                  aria-label={t('buttons.split-pane-button.aria-label')}\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                  tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n                />\n              )}\n\n              {showSplitPaneCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneClose}\n                  tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n                />\n              )}\n\n              {showPaneGroupCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n                  as={BackLink}\n                />\n              )}\n            </Flex>\n          }\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {createElement} from 'react'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    icon: RestoreIcon,\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>{createElement(message.icon)}</Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isSanityCreateLinked,\n  useSanityCreateConfig,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, timelineStore, onChange: onDocumentChange} = useDocumentPane()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  let actions: JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? (\n                  <RevisionStatusLine />\n                ) : (\n                  <DocumentStatusLine singleLine={!collapsed} />\n                )}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  createElement,\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ],\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const CreateLinkedBannerContent = useSanityCreateConfig().components?.documentLinkedBannerContent\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider\n            __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n          >\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  isSanityCreateLinkedDocument,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error('Nope')\n  })\n\n  patchRef.current = (event: PatchEvent) => {\n    // when creating a new draft\n    if (!editState.draft && !editState.published) {\n      telemetry.log(CreatedDraft)\n    }\n    patch.execute(toMutationPatches(event.patches), initialValue.value)\n  }\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const telemetry = useTelemetry()\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit,\n    // there is a risk of data loss, so we disable editing in this case\n    const isLiveEditAndDraft = Boolean(liveEdit && editState.draft)\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isLiveEditAndDraft ||\n      isCreateLinked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft,\n    liveEdit,\n    ready,\n    revTime,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n  ])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  formStateRef.current = formState\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      openPath,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n    // Explicitly don't include `noDocumentsContent` in the deps array, as it's\n    // causing a visual bug where the \"No documents\" message is shown for a split second\n    // when clearing a search query with no results\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    // noDocumentsContent,\n    onRetry,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({filter, limit, params, searchQuery, sort, staticTypeNames})\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {filter: searchFilter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [onRetry$, onRetry] = useMemo(() => observableCallback(), [])\n  const [onFetchFullList$, onLoadFullList] = useMemo(() => observableCallback(), [])\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {error, isLoadingFullList, isLoading, items, fromCache, onLoadFullList, onRetry} =\n    useDocumentList({\n      apiVersion,\n      filter,\n      params,\n      searchQuery: searchQuery?.trim(),\n      sortOrder,\n    })\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => (inputRef.current = ref),\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useRef} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {createElement, type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst AvatarSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    border-radius: 50%;\n    width: ${theme.avatar.sizes[1].size}px;\n    height: ${theme.avatar.sizes[1].size}px;\n  `\n})\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const iconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{iconComponent && createElement(iconComponent)}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, ScrollContainer, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineMode, setTimelineRange, timelineStore} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        <HistorySelector showList={paneRouterTab === 'history'} />\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        <ChangesInspector showChanges={paneRouterTab === 'review'} />\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {...params, since: undefined, rev: undefined, changesInspectorTab: undefined},\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {createElement, type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>{createElement(MARKER_ICON[marker.level])}</Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactElement, type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): ReactElement {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","documentPreviewStore","_id","getPreviewStateObservable","previewStateObservable","draft","isLoading","published","useObservable","status","tooltip","getPreviewValueWithFallback","t6","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t7","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","push","CopyIcon","content","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","useLayoutEffect","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","lenRef","setMenuItems","menuItemsRef","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","editState","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","div","Resizer","onResize","onResizeStart","mouseXRef","Resizable","setElement","elementWidthRef","targetWidth","setTargetWidth","handleResizeStart","w","handleResize","DocumentInspectorPanel","closeInspector","features","handleClose","component","createElement","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","DeletedDocumentBanner","revisionId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","version","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","then","log","catch","err","response","errMessage","finally","onSubmit","fullscreen","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","ResolvedLiveEdit","DraftLiveEditBanner","displayed","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","isDraftId","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","createPatchChannel","isLocked","transactionSyncLock","conditionalToastParams","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","isDeleting","isDeleted","timelineStore","parentPortal","usePortal","portalRef","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","activeView","view","portalElement","splitPanes","formViewHidden","activeViewNode","historical","lastNonDeletedRevId","useTimelineSelector","isLiveEdit","scrollTo","inspectDialog","showInspector","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Button","Grid","ModalDialog","footer","showCloseButton","header","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","isRestoreAction","historyActions","toLowerCase","revTime","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","languageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","singleLine","setStatus","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","date","format","RestoreIcon","useResizeObserver","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","onOlderRevision","KeyboardShortcutResponder","actionsBoxElement","activeIndex","onActionStart","onKeyDown","rootRef","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","useSource","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","onHistoryOpen","paneParams","zOffsets","getSanityCreateLinkMetadata","CreateLinkedBannerContent","documentLinkedBannerContent","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","stopPropagation","onConnectorSetFocus","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","languageFilter","setFocusPath","focusPathRef","timelineMode","setTimelineMode","timelineError","setTimelineError","useTimelineStore","onError","since","sinceAttributes","timelineDisplayed","timelineReady","isPristine","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","setTimelineRange","newSince","newRev","handleBlur","blurredPath","disableBlurRef","patchRef","toMutationPatches","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","open","navigator","clipboard","writeText","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","isLiveEditAndDraft","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","forEach","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","onHistoryClose","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentPane","parentSourceName","source","DocumentPaneInner","resolveNewDocumentOptions","usePaneOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","renderItem","isSelected","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","removePublishedWithDrafts","documents","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","events","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","getElementById","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","focus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","overflowY","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","ChevronLeftIcon","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","valueRef","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","FlipIcon","ExpandableTimelineItemButton","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","AvatarSkeleton","Skeleton","NameSkeleton","font","UserLine","user","useUser","TooltipContent","collaborators","TimelineItem","chunk","onSelect","optionsMenu","endTimestamp","timestamp","iconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateStyle","timeStyle","dateFormat","useDateTimeFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","T3","T4","t29","t30","t31","t32","t33","t34","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","TimelineError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setOpen","button","setButton","popoverRef","setPopoverRef","realRevChunk","sinceTime","_temp5","handleOpen","revChunk","sinceId","revId","findRangeForRev","selectRev","sinceChunk","sinceId_0","revId_0","findRangeForSince","selectSince","loadMore","handleLoadMore","revLabel","formatParams","buttonLabel","ChevronDownIcon","state_3","state_2","state_1","state_0","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","HistorySelector","showList","listHeight","setListHeight","getScrollerRef","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","isReady","paneRouterTab","setPaneRouterTab","changesInspector","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOaA,MAAAA,2BAA2B,aAO3BC,6LAAiCC,6BAAAA,EAA2B;IACvEC,QAAQ;IACRC,WAAWJ;IACXK,WAAWA,MAAM,OAAO,kBAAa;AACvC,CAAC;ACTM,SAAAC,SAAAC,KAAAA,EAAA;IAAAC,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GACL,EAAAC,UAAAC,aAAAA,EAAAA,GAAkCJ,OAClCK,qKAAeC,YAAAA,CAAU;IAACC,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAAG,cAAAI,KAAAA,IAAAP,CAAAA,CAAAA,EAAAA,KAAAI,SAAAA,CACPE,KAAAF,OAAMI,GAAAA,CAAKL,cAAaI,KAAM,GAACP,CAAAA,CAAA,CAAA,CAAA,GAAAG,cAAAI,KAAAA,EAAAP,CAAAA,CAAAA,EAAAA,GAAAI,QAAAJ,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAlD,MAAAS,aAAmBH,IACnB,EAAAI,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAAG,CAAAA,CAAAA,KAAAA,iBAAAH,CAAAA,CAAAA,EAAAA,KAAAS,aAAAA,CAEbG,KAAA;QAAAH;QAAAI,OAE9BV;IACRH,GAAAA,CAAAA,CAAAA,EAAAA,GAAAG,eAAAH,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAA,EAAAc,KAAAA,EAAAD,KAAAA,EAAAA,GAAuBE,uLAAAA,EAAgBH,EAGtC;IAAC,IAAA,CAEGH,YAAU;QAAAO,IAAAA;QAAAhB,CAAAA,CAAAA,EAAAA,KAAAG,cAAAI,KAAAA,IAAAP,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CACCM,MAAAN,EAAE,sCAAoC;YAAAD,YAAeN,cAAaI,KAAAA;QAAAA,CAAO,GAACP,CAAAA,CAAA,CAAA,CAAA,GAAAG,cAAAI,KAAAA,EAAAP,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA;QAAAiB,IAAAA;QAAAjB,OAAAA,CAAAA,CAAAA,EAAAA,KAAAgB,MAAAA,CAAjFC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAAA,QAAAA;YAAOD,UAAAA;QAAAA,CAA2E,GAAOhB,CAAAA,CAAAA,EAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAzFiB;IAAAA;IAAyF,IAG9FH,OAAK;QAAAE,IAAAA;QAAAhB,CAAAA,CAAAA,GAAAA,KAAAc,MAAAI,OAAAA,IAAAlB,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACGM,MAAAN,EAAE,wBAAsB;YAAAS,cAAiBL,MAAKI,OAAAA;QAAAA,CAAS,GAAClB,CAAAA,CAAA,EAAA,CAAA,GAAAc,MAAAI,OAAAA,EAAAlB,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,EAAA,CAAA;QAAAiB,IAAAA;QAAAjB,OAAAA,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAA,CAA3DC,MAAGD,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0NAAAA,WAAAA,EAAAA;YAAAA,UAAAA;QAAAA,CAAwD,GAAIhB,CAAAA,CAAAA,GAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA,EAA/DiB;IAAAA;IAA+DD,IAAAA;IAAAhB,CAAAA,CAAAA,GAAAA,KAAAU,KAAAV,CAAAA,CAAAa,EAAAA,CAAAA,KAAAA,OAAAO,QAAAA,CAKnEJ,KAAAH,OAAKO,SACJ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAyF,QAAA;QAA5E,OAAA;YAAAC,OAAQ;QAAA;QAAgCX,UAAAA,EAAE,yBAAyB;IAAA,CAAE,GACnFV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAA,EAAA,CAAA,GAAAa,OAAAO,OAAApB,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAA,OAAAjB,CAAAA,CAAAA,GAAAA,KAAAgB,KAAAA,CAHHC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA;QACGD,UAAAA;IAAAA,CAEA,GACAhB,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAJHiB;AAIG;ACzBMK,MAAAA,iMAAiBC,SAAAA,EAAOC,uJAAG,CAAA,CAAA;;AAAA,CAAA,EAI3BC,4MAAgCF,SAAAA,CAAOG,OAAAA,CAAAA;;;UAAAA,EAGxCJ,cAAc,CAAA;;;AAAA,CAAA,EAKbK,2MAAgCJ,UAAAA,CAAOK,OAAAA,CAAAA;;;;;;AAAAA,CAAAA,EAQvCC,UAAQN,qLAAAA,CAAOO,KAAAA,CAAAA;;;aAAAA,EAGb,CAAC,EAACC,KAAAA,EAAK,GAAMC,2JAAAA,EAAID,MAAME,MAAAA,CAAOC,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;;;;aAAA,EAIvC,CAAC,EAACH,KAAAA,EAAK,wJAAMC,MAAAA,EAAID,MAAME,MAAAA,CAAOC,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;;;;eAAA,EAIrC,CAAC,EAACH,KAAAA,EAAK,wJAAMC,MAAAA,EAAID,MAAME,MAAAA,CAAOC,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;;;;;;AAAA,CAAA,EAQ3CC,iMAAiBZ,SAAAA,mJAAOa,OAAI,CAAA,CAAA;;AAAA,CAAA,EAI5BC,sBAAsBtC,CAAA,UAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACjC,EAAAS,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC,GACnD8C,aAAmBvC,MAAKwC,UAAAA,GAAcxC,MAAKyC,UAAAA,CAAAC,MAAAA;IAAkB,IAAA,CAExDH,YAAU,OAAA;IAAAhC,IAAAA;IAAAN,CAAAA,CAAAsC,CAAAA,CAAAA,KAAAA,cAAAtC,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAMNJ,KAAAI,EAAE,qDAAmD;QAAAgC,OAAUJ;IAAAA,CAAW,GAACtC,CAAAA,CAAAA,EAAAA,GAAAsC,YAAAtC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAD9EM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAA,QAAA,EAAA;QAAW,MAAA;QAAG,OAAA,CAAA;QACZN,UAAAA;IAAAA,CACH,GAAON,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAKIM,KAAAN,EAAE,qDAAqD,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEjE3B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAG,OAAA,CAAA;QACb,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,qKAAA,EACH,CAAA,CAAA;IAAA,CAAA,GAAOjB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CAPT6B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,4LAAA,EACC;QAAA,QAAK,CAAA;QACK,WAAA;QACD,SAAA7B;QAETC,UAGF;IAAA,CAAA,GAAUjB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAddC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAA;QAAa,SAAA;QACZ,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,0JAAA,EAAA;YAAc,OAAA;YACblC,UAAAA;gBAAAA;gBAIAiC;aAAAA;QASF,CAAA;IACF,CAAA,GAAM7C,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAhBN8C;AAgBM;ACtCH,SAAAC,gBAAAhD,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAA+C,IAAAA,EAAAC,MAAAA,EAAAC,QAAAA,EAAAzC,UAAAA,EAAAI,KAAAA,EAAAA,GAAoDd,OACpDqB,oKACG+B,WAAAA,EAAStC,MAAKO,KAAM,KAAKgC,2NAAAA,EAAevC,MAAKO,KAAM,4IACpDiC,UAAAA,EAASxC,MAAKO,KAAM,4IACpBkC,UAAAA,EAASzC,MAAKO,KAAM,IAChBP,MAAKO,KAAAA,GACD;IAAA,IAAAd,IAAAM;IAAAZ,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,MAAAwD,oBAAAA,IAAAvD,CAAAA,CAAAS,CAAAA,CAAAA,KAAAA,cAAAT,CAAAA,CAAAA,EAAAA,KAAAoB,SAAApB,CAAAA,CAAAa,CAAAA,CAAAA,KAAAA,MAAA2C,GAAAA,GAAAA,CAGF5C,MAAA6C,uLAAAA,EAA0B1D,MAAKwD,oBAAAA,EAAuB9C,YAAYI,MAAK2C,GAAAA,EAAMpC,KAAK,GAACpB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwD,oBAAAA,EAAAvD,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAA,CAAA,CAAA,GAAAa,MAAA2C,GAAAA,EAAAxD,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAnFM;IADR,MAAA8C,yBAA+BpD;IAG9BU,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAC2E5B,KAAA;QAAA2C,OAAA;QAAAC,WAAA,CAAA;QAAAC,WAAA;IAAA,GAI3E7D,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,EAAA2D,KAAAA,EAAAE,SAAAA,EAAAD,SAAAA,EAAAA,oJAAsCE,gBAAAA,EAAcJ,wBAAwB1C,EAI3E;IAACC,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2D,SAAA3D,CAAAA,CAAA4D,CAAAA,CAAAA,KAAAA,aAAA5D,CAAAA,CAAAkD,CAAAA,CAAAA,KAAAA,YAAAlD,CAAAA,CAAAA,EAAAA,KAAA6D,YAAAA,CAEa5C,KAAA2C,YAAS,OACtB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mLAAC,6BAAA,EACC;QAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,kJAAC,QAAA,EAAW;YAAA,OAAA;YAAc,KAAC;YACxBV,UAAAA;gBAAAA,YAAYA,SAAQT,MAAAA,GAAA,KAAe,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,0BAAA,EAAA;oBAAkCS;gBAAAA,CAAQ;gBAC/E,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,yJAAC,2BAAA,EAA+BS;oBAAAA;oBAAkBE;gBAAS,CAAA;aAC7D;QAAA,CAAA;IACF,CAAA,GACD7D,CAAAA,CAAAA,EAAAA,GAAA2D,OAAA3D,CAAAA,CAAAA,EAAAA,GAAA4D,WAAA5D,CAAAA,CAAAA,EAAAA,GAAAkD,UAAAlD,CAAAA,CAAAA,EAAAA,GAAA6D,WAAA7D,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAPD,MAAA+D,SAAe9C;IAOd4B,IAAAA;IAAA7C,CAAAA,CAAA2D,EAAAA,CAAAA,KAAAA,SAAA3D,CAAAA,CAAAA,GAAAA,KAAA6D,YAAAA,CAEehB,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,iBAAA,EAAsBc;QAAAA;QAAkBE;IAAa,CAAA,GAAA7D,CAAAA,CAAAA,GAAAA,GAAA2D,OAAA3D,CAAAA,CAAAA,GAAAA,GAAA6D,WAAA7D,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAtE,MAAAgE,UAAgBnB;IAAsDC,IAAAA;IAAA9C,CAAAA,CAAA2D,EAAAA,CAAAA,KAAAA,SAAA3D,CAAAA,CAAAA,GAAAA,KAAA6D,aAAA7D,CAAAA,CAAA,EAAA,CAAA,KAAAa,QAAAA,CAI9DiC,iKAAAmB,8BAAAA,EAAA;QAAApD;QAAA8C;QAAAE;IAAAA,CAAqD,GAAC7D,CAAAA,CAAAA,GAAAA,GAAA2D,OAAA3D,CAAAA,CAAAA,GAAAA,GAAA6D,WAAA7D,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAA,OAAAlE,CAAAA,CAAAA,GAAAA,KAAAgD,QAAAhD,CAAAA,CAAA4D,EAAAA,CAAAA,KAAAA,aAAA5D,CAAAA,CAAAiD,EAAAA,CAAAA,KAAAA,UAAAjD,CAAAA,CAAA,EAAA,CAAA,KAAA+D,UAAA/D,CAAAA,CAAAA,GAAAA,KAAA8C,MAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAAgE,UAAAA,CAD5DE,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,uBAAA,EACKpB;QAAAA,GAAAA,EAAAA;QACWc,eAAAA;QACTZ;QACEC;QACAc;QACCC;IAAAA,CACT,GAAAhE,CAAAA,CAAAA,GAAAA,GAAAgD,MAAAhD,CAAAA,CAAAA,GAAAA,GAAA4D,WAAA5D,CAAAA,CAAAA,GAAAA,GAAAiD,QAAAjD,CAAAA,CAAAA,GAAAA,GAAA+D,QAAA/D,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAgE,SAAAhE,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EAPFkE;AAOE;ACjEC,MAAMC,eAAWC,mNAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,oMAAAC,EAAA,CAAA,GAIjC,EAAAqE,gBAAAA,EAAAC,UAAAA,EAAAA,OAAuCC,mNAAAA,gJAAAC,oBAA4B;IAAC,IAAAnE,IAAAM;IAAAZ,CAAAA,CAAAuE,CAAAA,CAAAA,KAAAA,cAAAvE,CAAAA,CAAAA,EAAAA,KAAAsE,mBAAAA,CACxC1D,KAAA0D,iBAAgBI,KAAAA,CAAA,GAAUH,UAAU,GAACvE,CAAAA,CAAAA,EAAAA,GAAAuE,YAAAvE,CAAAA,CAAAA,EAAAA,GAAAsE,kBAAAtE,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAArCM;IAA5B,MAAA+D,QAAcrE;IAAoF,IAAAU,IAAAC;IAAAjB,CAAAA,CAAAA,EAAAA,KAAA2E,QAAAA,CACrE1D,KAAA;QAAA0D;IAAO3E,GAAAA,CAAAA,CAAAA,EAAAA,GAAA2E,OAAA3E,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAPC;IAA7B,MAAA2D,SAAc5D;IAAiC6B,IAAAA;IAAA,OAAA7C,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,SAAAC,CAAAA,CAAAA,EAAAA,KAAAqE,OAAArE,CAAAA,CAAA,CAAA,CAAA,KAAA4E,SAAAA,CAExC/B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,qKAAA,EAAc9C;QAAAA,GAAAA,KAAAA;QAAYsE;QAAYO,OAAAA;IAAAA,CAAS,GAAA5E,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,EAAAA,GAAA4E,QAAA5E,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAhD6C;AAAgD,CACxD;ACRM,SAAAgC,gBAAA;IACLC,MAAAA,QAAaN,uNAAAA,gJAAAO,oBAA4B;IAAC,IAAA,CAErCD,OAAIE,MAAAA,IAAAA,MACS,mCAAmC;IAG9CF,OAAAA;AAAI;ACRN,MAAMG,sNAAYb,aAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,oMAAAC,EAAA,EAAA;IAAAiF,IAAAA,SAAAC,iBAAAC,cAAAC;IAAArF,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAIlC,EAAAmF,OAAAA,EAAAE,YAAAA,EAAAD,eAAAA,EAAA,GAAAE,MAAAA,GAA0DtF,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAkF,SAAAlF,CAAAA,CAAAA,EAAAA,GAAAmF,iBAAAnF,CAAAA,CAAAA,EAAAA,GAAAoF,cAAApF,CAAAA,CAAAA,EAAAA,GAAAqF,IAAAA,IAAAA,CAAAH,UAAAlF,CAAAA,CAAA,CAAA,CAAA,EAAAmF,kBAAAnF,CAAAA,CAAA,CAAA,CAAA,EAAAoF,eAAApF,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA;IAC/D,MAAA,EAAAsE,gBAAAA,EAAAC,UAAAA,EAAAA,6MAAuCC,aAAAA,gJAAAC,oBAA4B;IAACnE,IAAAA;IAAAN,CAAAA,CAAAuE,CAAAA,CAAAA,KAAAA,cAAAvE,CAAAA,CAAAA,EAAAA,KAAAsE,mBAAAA,CAQzDhE,KAAAgE,iBAAgBI,KAAAA,CAAUH,GAAAA,aAAAA,CAAc,GAACvE,CAAAA,CAAAA,EAAAA,GAAAuE,YAAAvE,CAAAA,CAAAA,EAAAA,GAAAsE,kBAAAtE,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAkF,CAAAA,CAAAA,KAAAA,WAAAlF,CAAAA,CAAAA,EAAAA,KAAAmF,mBAAAnF,CAAAA,CAAA,EAAA,CAAA,KAAAoF,eAAAA,CAC5CxE,KAAA;QAAA;YAAA0E,IAAMJ;YAAOK,QAAUJ;YAAeK,SAAWJ;QAAAA,CAAY;KAAA,EAAEpF,CAAAA,CAAAA,EAAAA,GAAAkF,SAAAlF,CAAAA,CAAAA,EAAAA,GAAAmF,iBAAAnF,CAAAA,CAAAA,GAAAA,GAAAoF,cAAApF,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAM,EAAAA,CAAAA,KAAAA,MAAAN,CAAAA,CAAAA,GAAAA,KAAAY,KAAAA,CAH5DI,KAAA;QAAA2D,OAAA,CAAA;eAEArE;YACHM,EAA+D;SAAA;IAElEZ,GAAAA,CAAAA,CAAAA,GAAAA,GAAAM,IAAAN,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAA,OAAAjB,CAAAA,CAAAqE,EAAAA,CAAAA,KAAAA,OAAArE,CAAAA,CAAAA,GAAAA,KAAAqF,QAAArF,CAAAA,CAAA,EAAA,CAAA,KAAAgB,KAAAA,CARHC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,aAAA,EAAA;QACKoE,GAAAA,IAAAA;QACChB;QACE,OAAArD;IAMP,CAAA,GAAAhB,CAAAA,CAAAA,GAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EATFiB;AASE,CAEL,GCdYwE,6NAAoBrB,cAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,oMAAAC,EAAA,EAAA,GAI1C,EAAAqE,kBAAAoB,YAAAA,EAAAnB,UAAAA,EAAAoB,YAAAA,EAAAA,6MAAmEnB,aAAAA,gJAAAC,oBAA4B;IAAC,IAAAc,QAAAC,SAAAH;IAAArF,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAChG,EAAAwF,MAAAA,EAAAC,OAAAA,EAAA,GAAAH,MAAmCtF,GAAAA,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,EAAAA,GAAAwF,SAAAxF,CAAAA,CAAAA,EAAAA,GAAAqF,IAAAA,IAAAA,CAAAE,SAAAvF,CAAAA,CAAA,CAAA,CAAA,EAAAwF,UAAAxF,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA;IACxC,MAAA4F,aAAmBC,wKAAAA,EAAUN,MAAM,GACnCO,0KAAoBD,YAAAA,EAAUL,OAAO;IAAClF,IAAAA;IAGpC,MAAAyF,eAAqBL,YAAAA,CAAanB,UAAU,CAAA,EAC5CyB,iBAAuBD,YAAAA,CAAaJ,YAAY,CAAA,EAItC/E,KAAAgF,cAAcI,eAAcT,MAAAA,EAC3BvE,KAAA8E,eAAeE,eAAcR,OAAAA;IAAQvE,IAAAA;IAAAjB,CAAAA,CAAAgG,CAAAA,CAAAA,KAAAA,kBAAAhG,CAAAA,CAAAA,EAAAA,KAAAY,MAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAgB,KAAAA,CAH5BC,KAAA;QAAA,GACf+E,cAAAA;QAAcT,QACT3E;QAAmC4E,SAClCxE;IAAAA,GACVhB,CAAAA,CAAAA,EAAAA,GAAAgG,gBAAAhG,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAAiG,cAAoBhF;IAInB4B,IAAAA;IAAA7C,CAAAA,CAAA+F,CAAAA,CAAAA,KAAAA,gBAAA/F,CAAAA,CAAAA,EAAAA,KAAA2F,eAAAA,CAGI9C,KAAAkD,aAAYrB,KAAAA,CAAA,GAAUiB,YAAY,GAAC3F,CAAAA,CAAAA,EAAAA,GAAA+F,cAAA/F,CAAAA,CAAAA,EAAAA,GAAA2F,cAAA3F,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAA+F,EAAAA,CAAAA,KAAAA,gBAAA/F,CAAAA,CAAAA,GAAAA,KAAA2F,eAAAA,CAEnC7C,KAAAiD,aAAYrB,KAAAA,CAAOiB,eAAAA,CAAgB,GAAC3F,CAAAA,CAAAA,GAAAA,GAAA+F,cAAA/F,CAAAA,CAAAA,GAAAA,GAAA2F,cAAA3F,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAiG,EAAAA,CAAAA,KAAAA,eAAAjG,CAAAA,CAAAA,GAAAA,KAAA6C,MAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAA8C,KAAAA,CAHvBoB,KACbrB,CAAAA;WAAAA;QACHoD;WACGnD,EAAoC;KAAA,EACxC9C,CAAAA,CAAAA,GAAAA,GAAAiG,aAAAjG,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAJD,MAAAkG,YAAkBhC;IAIjBiC,IAAAA;IAAAnG,CAAAA,CAAA0F,EAAAA,CAAAA,KAAAA,gBAAA1F,CAAAA,CAAAA,GAAAA,KAAAuE,aAAAA,CAGI4B,KAAAT,aAAYhB,KAAAA,CAAA,GAAUH,UAAU,GAACvE,CAAAA,CAAAA,GAAAA,GAAA0F,cAAA1F,CAAAA,CAAAA,GAAAA,GAAAuE,YAAAvE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAA0F,EAAAA,CAAAA,KAAAA,gBAAA1F,CAAAA,CAAAA,GAAAA,KAAAuE,aAAAA,CAEjC6B,KAAAV,aAAYhB,KAAAA,CAAOH,aAAAA,CAAc,GAACvE,CAAAA,CAAAA,GAAAA,GAAA0F,cAAA1F,CAAAA,CAAAA,GAAAA,GAAAuE,YAAAvE,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAAkG,EAAAA,CAAAA,KAAAA,aAAAlG,CAAAA,CAAAA,GAAAA,KAAAmG,MAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,KAAAA,CAHrBC,KACbF,CAAAA;WAAAA;QACHD;WACGE,EAAkC;KAAA,EACtCpG,CAAAA,CAAAA,GAAAA,GAAAkG,WAAAlG,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAJD,MAAAsG,YAAkBD;IAIjBE,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAAsG,YAAAA,CAEMC,MAAA;QAAA5B,OAAQ2B;IAAUtG,GAAAA,CAAAA,CAAAA,GAAAA,GAAAsG,WAAAtG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAAzBM,KAAOiG;IAtBT,MAAAC,YAAkBlG;IAuBmDmG,IAAAA;IAAA,OAAAzG,CAAAA,CAAAwG,EAAAA,CAAAA,KAAAA,aAAAxG,CAAAA,CAAAA,GAAAA,KAAAqE,OAAArE,CAAAA,CAAA,EAAA,CAAA,KAAAqF,OAAAA,CAE9DoB,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,2JAAA,YAAA,EAAA;QAAepC;QAASgB,GAAAA,IAAAA;QAAamB,OAAAA;IAAa,CAAA,GAAAxG,CAAAA,CAAAA,GAAAA,GAAAwG,WAAAxG,CAAAA,CAAAA,GAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA,EAAnDyG;AAAmD,CAC3D,GC3CYC,yBAAqBtC,mNAAAA,EAAW,SAAA9D,EAAAA,EAAA+D,GAAAA,EAAA;IAAArE,MAAAA,gMAAAC,IAAAA,EAAA,EAAA;IAAA,IAAA0G,UAAAC,YAAAC,cAAAC,eAAAzB,MAAA0B;IAAA/G,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAC3C,EAAAsG,UAAAA,EAAAC,YAAAA,EAAAC,aAAAA,EAAAH,QAAAA,EAAAI,QAAAA,EAAA,GAAA1B,MAAA,GAAA/E,IAA+FN,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAA8G,eAAA9G,CAAAA,CAAAA,EAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,EAAAA,GAAA+G,QAAAA,IAAAA,CAAAJ,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAA4G,aAAA5G,CAAAA,CAAA,CAAA,CAAA,EAAA6G,eAAA7G,CAAAA,CAAA,CAAA,CAAA,EAAA8G,gBAAA9G,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA,EAAA+G,WAAA/G,CAAAA,CAAA,CAAA,CAAA;IAQ7E,MAAAY,KAAAmG,UAAQxB;IAAQvE,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA8G,gBAAAA,CAGb9F,0JAAAgG,YAAAA,EAAaF,aAAa,GAAC9G,CAAAA,CAAAA,EAAAA,GAAA8G,eAAA9G,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAA+G,WAAAA,CACtC9F,KAAA8F,YAAQ;QAAAA,UAAeA,UAAQzB;IAAA,GAAKtF,CAAAA,CAAAA,EAAAA,GAAA+G,UAAA/G,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAA6G,EAAAA,CAAAA,KAAAA,gBAAA7G,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAAiB,KAAAA,CAHzB4B,KAAA;QAAAoE,MACTJ;QAAYC,eACH9F;QAA2B,GACtCC,EAAAA;IAAAA,GACLjB,CAAAA,CAAAA,GAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAA,GAAAA,KAAA2G,YAAA3G,CAAAA,CAAA4G,EAAAA,CAAAA,KAAAA,cAAA5G,CAAAA,CAAAqE,EAAAA,CAAAA,KAAAA,OAAArE,CAAAA,CAAA,EAAA,CAAA,KAAAqF,QAAArF,CAAAA,CAAAA,GAAAA,KAAAY,MAAAZ,CAAAA,CAAA,EAAA,CAAA,KAAA6C,KAAAA,CATHC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,WAAA;QACKuC,GAAAA,IAAAA;QACChB;QACIuC,SAAAA;QACK,cAAAhG;QACG,iBAAAiC;QAMhB8D;IACH,CAAA,GAAY3G,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,GAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAZZ8C;AAYY,CAEf;ACfM,SAAAoE,gBAAA;IAAA,QACE1C,sNAAAA,gJAAAC,oBAA4B;AAAC;ACEtC,MAAM0C,gBAAkB,CAAE,CAAA;AAQnB,SAAAC,qBAAArH,KAAAA,EAAA;IAAAC,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GACL,EAAAoH,OAAAA,EAAAJ,IAAAA,EAAApG,KAAAA,EAAAA,GAA+Bd,OACIO,KAAAO,OAAK2C;IAAK5C,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAAzBM,gKAAA0G,kBAAAA,EAAehH,EAAU,GAACN,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAC9C,MAAAuH,+KAAyBC,sBAAAA,EADL5G,EACoC,GACxD2C,mLAA6BkE,0BAAAA,KAC7B,EAAAf,oBAAAA,mBAAAA,EAAAA,GAA6BQ,cAAc;IAAClG,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA0G,uBAAA1G,CAAAA,CAAAiH,CAAAA,CAAAA,KAAAA,MAAAS,QAAA1H,CAAAA,CAAAa,CAAAA,CAAAA,KAAAA,OAAA2C,MAAAA,CAG1CxC,KAAA,SAAA2G,SAAAA,EAAA;QAEI,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAACjB,qBACa;YAAA,YAAA7F,OAAK2C;YACH,cAAAyD,MAAIS;YACHP,eAAUA;YACrBQ,GAAAA,SAAAA;QACJ,CAAA;IAAA,GAEL3H,CAAAA,CAAAA,EAAAA,GAAA0G,qBAAA1G,CAAAA,CAAA,CAAA,CAAA,GAAAiH,MAAAS,MAAA1H,CAAAA,CAAA,CAAA,CAAA,GAAAa,OAAA2C,KAAAxD,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAKqCiB,MAAAA,KAf3BD,IAkBD6B,KAAAoE,MAAIjE,MAEAF,KAAAyE,kBAAgB9E,SAAY,IAAG8E,mBAAgBJ;IAAcjD,IAAAA;IAAAlE,CAAAA,CAAAuD,CAAAA,CAAAA,KAAAA,wBAAAvD,CAAAA,CAAA,CAAA,CAAA,KAAA6C,MAAA7C,CAAAA,CAAA8C,CAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAA,CAAA,CAAA,KAAAiH,QAAAjH,CAAAA,CAAAA,GAAAA,KAAAa,QAAAA,CAJzEqD,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iBACuBX;QAAAA;QAChB,MAAAV;QACC,QAAA;QACG,UAAAC;QACEmE,YAAAA;QACLpG;IACP,CAAA,GAAAb,CAAAA,CAAAA,EAAAA,GAAAuD,sBAAAvD,CAAAA,CAAAA,EAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,EAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,OAAAA,CAAAA,CAAAqH,EAAAA,CAAAA,KAAAA,WAAArH,CAAAA,CAAAA,GAAAA,KAAAiB,MAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAAkE,KAAAA,CARJiC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,cAAA,EAAY;QAAA,sBAAmB,CAAA;QAAM,IAAAlF;QAAuB,WAAA;QAAaoG;QAAiB,QAAC;QAC1FnD,UAAAA;IAAAA,CAQF,GAAclE,CAAAA,CAAAA,GAAAA,GAAAqH,SAAArH,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EATdmG;AASc;ACjBX,SAAAyB,wBAAAtH,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAiC,EAAA4H,sBAAAA,EAAAC,kBAAAA,EAAAC,aAAAA,EAAAxF,UAAAA,EAAAyF,MAAAA,EAAAC,YAAAA,EAAAC,sBAAAA,EAAAC,oBAAAA,EAAAA,GAAA7H,IAUtCF,aAAeC,oKAAAA,CACf+H,IAAAA,6JAAcC,WAAAA,KACd,EAAA3H,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAAmI,CAAAA,CAAAA,KAAAA,wBAAAnI,CAAAA,CAAAA,EAAAA,KAAAI,UAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAU,IAAAA,CAGlDE,KAAA0H,CAAA,SAAA;QACE,MAAArB,OAAa7G,OAAMI,GAAAA,CAAK8H,KAAI/H,KAAM;QAC9B0G,OAAAA,OAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACM,sBAA2BA;YAAAA;YAAaqB,OAAAA;YAAeH,SAAAA;QAAwB,CAAA,IAKtF,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;YAAa,SAAA;YACZ,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,+KAAA,EACOI;gBAAAA,yJAAUA,cAAAA;gBACT,OAAA7H,EAAE,8DAA8D;gBAC7D,UAAAA,EAAE,mEAAiE;oBAAAkG,YAC/D0B,KAAI9E,GAAAA;gBACjB,CAAA;gBACM,QAAA;YAEX,CAAA;QAAA,CAAA;IAAA,GAEHxD,CAAAA,CAAAA,EAAAA,GAAAmI,sBAAAnI,CAAAA,CAAAA,EAAAA,GAAAI,QAAAJ,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IApBH,MAAAwI,oBAA0B5H;IAsBzB,IAEGkH,oBAAkBvF,eAAA,KAAsBsF,wBAAsBtF,eAAkB,GAAA;QAAAvB,IAAAA;QAAAhB,CAAAA,CAAAA,EAAAA,KAAA+H,gBAAAA,CAOhE/G,MAAA;YAAAyH,eAAAA,IAAsB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;oBAAqB,UAAE;gBAAA,CAAA;QAAS,GAACzI,CAAAA,CAAAA,EAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA;QAAAiB,IAAAA;QAAAjB,OAAAA,CAAAA,CAAAgI,CAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAAA,EAAAA,KAAAU,KAAAV,CAAAA,CAAA,CAAA,CAAA,KAAAgB,MAAAA,CALvEC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,OAAA,EAAA;YAAQ,IAAA;YAAU,MAAA;YACjB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,oKAAA,EACIP;gBAAAA;gBACK,SAAA;gBACCsH,SAAAA;gBACG,YAAAhH;YAAAA,CAEhB;QAAA,CAAA,GAAOhB,CAAAA,CAAAA,EAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA,EAPPiB;IAAAA;IAOO,IAAAyH,IAAAC,IAAAC,IAAArC,KAAAE,KAAAoC,KAAA7H,IAAAC,IAAA4B,IAAAC,IAAAoB,IAAAiC,IAAAC,IAAAC;IAAA,IAAArG,CAAAA,CAAAgI,EAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAAA,GAAAA,KAAA6H,0BAAA7H,CAAAA,CAAA,EAAA,CAAA,KAAAiI,gBAAAjI,CAAAA,CAAAA,GAAAA,KAAA+H,iBAAA/H,CAAAA,CAAAkI,EAAAA,CAAAA,KAAAA,0BAAAlI,CAAAA,CAAAA,GAAAA,KAAA8H,sBAAA9H,CAAAA,CAAA,EAAA,CAAA,KAAAwI,qBAAAxI,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAoI,SAAApI,CAAAA,CAAAA,GAAAA,KAAAuC,YAAA;QAQX,MAAAuG,yBACKb,CAAAA;eAAAA;eACCC,yBAAsB;gBAAI,aAAa;aAAA,GAAM,EAAA;SAAA,EAGnDa,kBAAwBrI,EAAE,8CAA4C;YAAAgC,OAC7DoG,uBAAsBrG,MAAAA;YAAAuG,UACnBF,uBAAsBG,IAAAA,CAAM,IAAI;YAACC,SAClChB,0BAA0BY,uBAAsBrG,MAAAA,GAAU,gBAAgB;QAAA,CACpF;QAGEL,KAAAA,wJAAAA,EAAeiE,KAAQ,UAAME,MAAA;QAAC4C,IAAAA;QAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGzBuG,OAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;YAAiB,eAAA;YAAa,MAAA;YAC7B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oJAAC,sBAAA,EACH,CAAA,CAAA;QAAA,CAAA,GAAOnJ,CAAAA,CAAAA,GAAAA,GAAAmJ,IAAAA,IAAAA,OAAAnJ,CAAAA,CAAA,EAAA,CAAA;QAAAoJ,IAAAA;QAAApJ,CAAAA,CAAAA,GAAAA,KAAA+H,gBAAAA,CAKWqB,OAAA;YAAAX,eAAAA,IAAsBV;QAAa,GAAC/H,CAAAA,CAAAA,GAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,GAAAA,GAAAoJ,IAAAA,IAAAA,OAAApJ,CAAAA,CAAA,EAAA,CAAA;QAAAqJ,IAAAA;QAAArJ,CAAAA,CAAAA,GAAAA,KAAAuC,aAAAA,CAExC8G,OAAA;YAAA3G,OAAQH;QAAAA,GAAWvC,CAAAA,CAAAA,GAAAA,GAAAuC,YAAAvC,CAAAA,CAAAA,GAAAA,GAAAqJ,IAAAA,IAAAA,OAAArJ,CAAAA,CAAA,EAAA,CAAA,EAAAA,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAAoJ,QAAApJ,CAAAA,CAAA,EAAA,CAAA,KAAAqJ,OAAAA,CAXrC5C,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;YAAc,SAAA;YAAW,QAAA;YAAQ,MAAA;YAAe,MAAA;YAC/C,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,kJAAC,QAAA,EACC0C;gBAAAA,UAAAA;oBAAAA;oBAGA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAA;wBAAU,MAAA;wBAAe,YAAC;wBACzB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;4BAAW,MAAA;4BACV,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EACS;gCAAA,SAAA;gCACI,YAAAC;gCACT1I;gCACK,QAAA2I;4BAAAA;wBAEZ,CAAA;oBACF,CAAA;iBAAA;YAAA,CACF;QAAA,CACF,GAAOrJ,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoJ,MAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,MAAArJ,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;QAAAsJ,IAAAA;QAAAtJ,CAAAA,CAAAA,GAAAA,KAAA+H,gBAAAA,CAOWuB,OAAA;YAAAb,eAAAA,IAAsBV;QAAa,GAAC/H,CAAAA,CAAAA,GAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,GAAAA,GAAAsJ,IAAAA,IAAAA,OAAAtJ,CAAAA,CAAA,EAAA,CAAA,EAAAA,CAAAA,CAAAgI,EAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAAA,GAAAA,KAAAU,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAsJ,OAAAA,CANtDT,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,MAAA,EAAA;YAAS,MAAA;YACR,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAW;gBAAA,MAAA;gBACV,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EACS;oBAAA,SAAA;oBACLnI;oBACMsH,SAAAA;oBACG,YAAAsB;gBAAAA,CAEhB;YAAA,CAAA;QAAA,CACF,GAAMtJ,CAAAA,CAAAA,GAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAsJ,MAAAtJ,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA,EACL2I,sJAAAY,OAAAA,EAAazG,KAAA,GAAWoB,KAAA,GAAQiC,KAAM,QAAUC,KAAA,GAC9CsC,sJAAAtG,OAAAA,EAAepB,KAAQ,UAAAhB,CAAAA,CAAA8H,EAAAA,CAAAA,KAAAA,sBAAA9H,CAAAA,CAAAA,GAAAA,KAAAwI,oBAAAA,CACrBvH,KAAA6G,mBAAkBvF,UAAAA,GAAAA,KAChB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,QAAA,EAAA;YAAS,IAAA;YAAmB,cAAA;YAAU,OAAA;YAAe,eAAA;YACnDuF,UAAAA;gBAAAA,oBAAkBtF,WAAAgH,IAAAC,CACjB,SAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAO;wBAAA,IAAA;wBACLjB,UAAAA,kBAAkBF,MAAI;oBAAA,GADPA,OAAI9E,GAEtB,CAAM;gBAGPsE,mBAAkBvF,UAAAA,GAAcuF,mBAAkBtF,UAAAA,CAAAC,MAAAA,IAChD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;oBAAO,IAAA;oBAAc,SAAA;oBACpB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,qBAAwBqF;wBAAAA,GAAAA,kBAAAA;oBAAAA;gBAC3B,CAAA;aAEJ;QAAA,CAAA,GACD9H,CAAAA,CAAAA,GAAAA,GAAA8H,oBAAA9H,CAAAA,CAAAA,GAAAA,GAAAwI,mBAAAxI,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAEA6C,KAAAgF,uBAAsBtF,UAAAA,GAAAA,KACpB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,+BAAA;YACa,eAAA;YACL,OAAA;gBAAAmH,WAGH5B,mBAAkBvF,UAAAA,GAAe,IAC7B,+CAA4CoH,KAAAA;YAIpD;YAAA,UAAA;gBAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,+BAAA;oBACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;wBACI,IAAA;wBACQ,WAAA7B,mBAAkBvF,UAAAA,GAAe,IAAA,IAAA;wBACpC,QAAA;wBACA,QAAA;wBACE,UAAC;wBAEX,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAW;4BAAA,OAAA;4BAAc,KAAC;4BAAY,UAAA;4BAAa,UAAA;4BAClD,UAAA;gCAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,wJAAA,EAAW;oCAAA,MAAC;oCACX,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oJAAC,iBAAA,EAAA,CAAa,CAAA;gCAAA,CAChB;gCACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,QAAA,EAAa;oCAAA,OAAA;oCACZ,UAAA;wCAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;4CAAkB,cAAA;4CAAiB,MAAA;4CACjC7B,UAAAA,EAAE,2CAAyC;gDAAAgC,OACnCoG,uBAAsBrG,MAAAA;gDAAAmH,eACdlJ,EAAE,oDAAkD;oDAAAgC,OAC1DmF,uBAAsBtF,UAAAA;gDAC9B,CAAA;4CACF,CAAA;wCAAA,CACH;wCACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAYwG;4CAAAA,OAAAA;4CAA8B,cAAA;4CAAiB,MAAA;4CAAG,OAAA,CAAA;4CAC5DA,UACH;wCAAA,CAAA;qCAAA;gCAAA,CACF;gCACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,gBACC;oCAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,wJAAA,EAAK;wCAAA,OAAA,CAAA;wCAAY,MAAA;wCAChB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,qJAAC,kBAAA,EACH,CAAA,CAAA;oCAAA,CAAA;gCACF,CAAA;6BAAA;wBACF,CAAA;oBACF,CAAA;gBAAA,CACF;gBAEC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,MAAA,EAAA;oBAAa,UAAA;oBAAmB,YAAA;oBAC/B,UAAA;wBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAClH,SACC;4BAAA,UAAA;gCAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,SAAA;oCACE,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAgBK,MAfH;wCAAA,UAAA;4CAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAIK,MAAA;gDAHH,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;oDAAK,OAAA,CAAA;oDAAY,MAAA;oDAAU,OAAA;wDAAAgI,UAAW;oDAAA;oDAAgB,QAAA;oDACpDnJ,UAAE,EAAA,kDAAkD;gDACvD,CAAA;4CAAA,CACF;4CAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;gDAEE,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;oDAAK,OAAA,CAAA;oDAAY,MAAA;oDAAU,QAAA;oDACzBA,UAAE,EAAA,+CAA+C;gDACpD,CAAA;4CAAA,CACF;4CACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;gDACE,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;oDAAK,OAAI,CAAA;oDAAQ,MAAA;oDAAU,QAAA;oDACzBA,UAAE,EAAA,mDAAmD;gDAAA,CACxD;4CACF,CAAA;yCAAA;oCAAA,CACF;gCACF,CAAA;gCACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EA+CQ,SA9CLmH;oCAAAA,UAAAA,uBAAsBrF,UAAAA,CAAAsH,MAAAA,CAAAC,OAGpB,EAACP,GAAAA,CAAA,CAAAQ,MAAAC,UAAA;wCACI,MAAA,EAAAC,SAAAA,EAAAC,WAAAA,EAAAvD,UAAAA,EAAAA,GAAAoD;wCAAoC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAExC,MACE;4CAAA,UAAA;gDAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAEK,MAAA;oDADH,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;wDAAW,MAAA;wDAAIE,UAAAA;oDAAAA,CAAU;gDAC5B,CAAA;gDACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;oDACE,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;wDAAW,MAAA;wDAAIC,UAAAA,eAAe;oDAAA,CAAc;gDAC/C,CAAA;gDACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;oDACE,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,gBAAA;wDAAqB,OAAA;wDAAc,KAAA;wDAAW,SAAA;wDAC7C,UAAA;4DAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;gEAAkB,cAAA;gEAAiB,MAAC;gEAClCvD,UAAAA,cAAc;4DAAA,CACjB;4DACCA,cACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mKAAA,UAAA,EAAA;gEACOA,MAAS;gEAEP,QAAA,MAAA;oEACNwB,MAAKgC,IAAAA,CAAA;wEAAAhJ,OACIV,EACL,uDACF;wEAACqD,QACO;oEAAA,CACT;gEAAA;gEAGH,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,2LAAA,EAAA;oEACM,MAAA;oEACCsG,yJAAAA,WAAAA;oEACQ,cAAA;wEAAAC,SACH5J,EACP,wDACF;oEAAA;gEAAA,CACD;4DAEL,CAAA;yDAAA;oDAAA,CAEJ;gDACF,CAAA;6CAAA;wCAAA,GAAA,GArCUkG,UAAU,CAAA,CAAA,EAAIqD,KAAK,EAsC/B;oCAAA,CACD;gCACL,CAAA;6BAAA;wBAAA,CACF;wBAEA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,qBAAmB;4BAAA,GAAKpC,sBAAAA;wBAC3B,CAAA;qBAAA;gBAAA,CAAA;aAAA;QAAA,CACF,GACD7H,CAAAA,CAAAA,GAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,GAAAA,GAAA6H,wBAAA7H,CAAAA,CAAAA,GAAAA,GAAAiI,cAAAjI,CAAAA,CAAAA,GAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,GAAAA,GAAAkI,wBAAAlI,CAAAA,CAAAA,GAAAA,GAAA8H,oBAAA9H,CAAAA,CAAAA,GAAAA,GAAAwI,mBAAAxI,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoI,OAAApI,CAAAA,CAAAA,GAAAA,GAAAuC,YAAAvC,CAAAA,CAAAA,GAAAA,GAAA0I,IAAA1I,CAAAA,CAAAA,GAAAA,GAAA2I,IAAA3I,CAAAA,CAAAA,GAAAA,GAAA4I,IAAA5I,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG;IAAA,OAAArG,KAAAA,CAAAA,CAAA,EAAA,CAAA,EAAA2I,KAAA3I,CAAAA,CAAA,EAAA,CAAA,EAAA4I,KAAA5I,CAAAA,CAAA,EAAA,CAAA,EAAAuG,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAAAyG,MAAAzG,CAAAA,CAAA,EAAA,CAAA,EAAA6I,MAAA7I,CAAAA,CAAA,EAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAAAiB,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAA6C,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAAA8C,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAAkE,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EAAAmG,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAAAoG,KAAApG,CAAAA,CAAA,EAAA,CAAA,EAAAqG,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAA0I,MAAA1I,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAxIHsG,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,IAAA;QAAe,WAAAnI;QACbC,UAAAA;YAAAA;YAgBA4B;SAAAA;IAAAA,CAwHH,GAAO7C,CAAAA,CAAAA,GAAAA,GAAA0I,IAAA1I,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAAAoJ,IAAAA;IAAApJ,CAAAA,CAAAA,GAAAA,KAAA2I,MAAA3I,CAAAA,CAAAmJ,EAAAA,CAAAA,KAAAA,OAAAnJ,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAAkE,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAmG,MAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,KAAAA,CA1ITgD,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,IAAa;QAAA,QAAAtG;QAAW,QAAAoB;QAAQ,MAAAiC;QAAgB,SAAAC;QAC/C+C,UA0IF;IAAA,CAAA,GAAOnJ,CAAAA,CAAAA,GAAAA,GAAA2I,IAAA3I,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAoJ,GAAAA,IAAAA,MAAApJ,CAAAA,CAAA,EAAA,CAAA;IAAAqJ,IAAAA;IAAArJ,CAAAA,CAAAA,GAAAA,KAAA+H,gBAAAA,CAOWsB,MAAA;QAAAZ,eAAAA,IAAsBV;IAAa,GAAC/H,CAAAA,CAAAA,GAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAAAsJ,IAAAA;IAAAtJ,CAAAA,CAAAgI,EAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAAA,GAAAA,KAAAU,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAqJ,MAAAA,CANtDC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,uJAAA,EAAS;QAAA,MAAA;QACR,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;YAAW,MAAA;YACV,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,YAAA,EAAA;gBACS,SAAA;gBACL5I;gBACMsH,SAAAA;gBACG,YAAAqB;YAAAA,CAEhB;QAAA,CAAA;IACF,CAAA,GAAMrJ,CAAAA,CAAAA,GAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAAAgK,IAAAA;IAAA,OAAAhK,CAAAA,CAAA4I,EAAAA,CAAAA,KAAAA,MAAA5I,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAyG,EAAAA,CAAAA,KAAAA,OAAAzG,CAAAA,CAAAA,GAAAA,KAAA6I,OAAA7I,CAAAA,CAAA,EAAA,CAAA,KAAAoJ,OAAApJ,CAAAA,CAAA,EAAA,CAAA,KAAAsJ,OAAAtJ,CAAAA,CAAA,EAAA,CAAA,KAAAqG,KAAAA,CAjLR2D,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,IAAA;QAAe,WAAA3D;QAAc,KAAAE;QAC5BE,UAAAA;YAAAA;YAiBAoC;YAUAO;YA4IAE;SAAAA;IAUF,CAAA,GAAOtJ,CAAAA,CAAAA,GAAAA,GAAA4I,IAAA5I,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA,EAlLPgK;AAkLO;AArPJ,SAAAD,QAAAQ,SAAAA,EAAA;IAAA,OAsLwB,eAAeA;AAAS;AChMvD,SAASC,cAAcC,CAAAA,EAA8B;IAC/C,OAAA,OAAOA,KAAM,YACb,CAACA,IAAU,CAAA,IACR,gBAAgBA,KAAK,cAAcA;AAC5C;AAEA,MAAMC,gBAAgB;AAGtB,IAAIC;AACJ,MAAMC,kBAAkBA,IAAAA,CACjBD,gBAAAA,CACHA,gKAAeE,YAAAA,EAAU3K,UAAU,kBAAkB,EAAE4K,IAAAA,CAAAA,mDAAAA;KAErDC,yKAAAA,EAAU,IAAI,iKACdvB,MAAAA,EAAI,IAAMtJ,SAAS8K,eAAAA,KAAoB,SAAS,gKAChDC,wBAAAA,CAAqB,kKACrBC,YAAAA,EAAWC,CACTA,UAAAA,UAAAA,oEAAAA;yJAEIC,QAAAA,EAAM,GAAGV,aAAa,iJACtBW,QACN,gKACAC,eAAAA,EAAY;QAACC,UAAU,CAAA;QAAMC,YAAY;IAAE,CAAA,EAC7C,GAEKb,YAAAA;AAuCT,SAASc,qBACP7E,UAAAA,EACA,EAAC8E,eAAAA,EAAgD,EACjB;IAC1BC,MAAAA,sKAAUC,aAAAA,EAAWhF,UAAU,GAC/BiF,0KAAcvE,iBAAAA,EAAeV,UAAU,GACvCkF,iBAAiB;QACrBC,KAAKL,gBAAgBM,UAAAA,CAAW,OAAO,GAAGL,OAAO,CAAA,CAAA,EAAIE,WAAW,EAAE;QAClEI,MAAM,CAAA;QACNC,OAAO;YAACC,gBAAgB;QAAM;QAC9BC,KAAK;IACP;IACA,OAAOV,gBAAgBW,UAAAA,CAAWC,OAAAA,CAA8BR,cAAc,EAAEhB,IAAAA,+JAC9EtB,MAAAA,EAAI,CAAC,EAAC+C,OAAAA,EAAAA,KAAa;QACjB,MAAMC,cAAcD,QAAQzC,MAAAA,CAAQ2C,CAAQA,MAAAA,IAAIC,MAAAA,KAAW,WAAW;QACtE,IAAIF,YAAY/J,MAAAA,KAAW,GAKvB+J,OAAAA,YAAY/J,MAAAA,KAAW,KAMpB+J,YAAYG,IAAAA,CAAMF,CAAAA,MAAQA,IAAInH,EAAAA,KAAOqG,OAAO,IAJ1CE,cAI4DF;IAAAA,CACtE,CACH;AACF;AAMA,SAASiB,4BACPhG,UAAAA,EACAsC,OAAAA,EAC0D;IACpD,MAAA,EAACwC,eAAAA,EAAAA,GAAmBxC;IAEnB0B,OAAAA,gBAAkBE,EAAAA,IAAAA,+JACvBI,YAAAA,EAAU,IAAMO,qBAAqB7E,YAAYsC,OAAO,CAAC,iKACzDgC,YAAAA,EAAW2B,CAAoB,oBAAA;QAC7B,IAAI,CAACA,iBACH,WAAOC,kJAAAA,EAAG;YAACvK,YAAY;YAAGC,YAAY,CAAA,CAAA;QAAA,CAAG;QAGrCuK,MAAAA,iBAAiBrB,gBAAgBsB,MAAAA,CAAAA,EAASC,OAAAA;QAEzCvB,OAAAA,gBAAgBW,UAAAA,CACpBC,OAAAA,CAAQ;YACPY,KAAK,CAAA,iBAAA,EAAoBH,cAAc,CAAA,WAAA,EAAcF,eAAe,CAAA,oDAAA,CAAA;YACpET,KAAK;QACN,CAAA,EACAtB,IAAAA,+JACCqC,aAAAA,EAAY1C,CAAM,MAAA;YAIhB,IAAID,cAAcC,CAAC,KAAKA,EAAE2C,UAAAA,KAAe,KACvC,wJAAON,KAAAA,EAAG;gBAACvK,YAAY;gBAAGC,YAAY,CAAA,CAAA;YAAA,CAAG;YAGrCiI,MAAAA;QAAAA,CACP,CACH;IAAA,CACH,CACH;AACF;AAEA,MAAM4C,oLAAwBC,kCAAAA,EAC5B,CAAC,CAAC1G,YAAY2G,aAAa,CAAA,GAMlBA,cAAcC,WAAAA,CACnB;QAACC,OAJgB;QAIGC,QAHF;IAGqB,GACvC;QAAC9G;IAAU,GACX;QAACwF,KAAK;QAA2BuB,aAAa;YAAC;YAAU,WAAW;SAAA;QAAGC,cAAc;IAAI,CAC3F,CAEJ,GAEMC,wLAA4BP,kCAAAA,EAChC,CAAC,CAAC1G,YAAY8E,eAAe,CAAA,GAEpBd,gBAAkBE,EAAAA,IAAAA,+JACvBI,YAAAA,EAAU,IACR0B,4BAA4BhG,YAAY;YACtC8E;QACF,CAAC,CACH,CACF,CAEJ;AAEO,SAAAoC,sBAAAlH,UAAAA,EAAA;IAAA5G,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GACLyL,mBAAwBqC,uKAAAA,0JAAAC,gCAAuC,GAE/DT,4KAAsBU,mBAAAA,CAAiB;IAAC3N,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA4G,aAAAA,CACpBtG,iKAAAgH,iBAAAA,EAAeV,UAAU,GAAC5G,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAA9C,MAAA6L,cAAoBvL;IAA0B,IAAAM,IAAAI;IAAAhB,CAAAA,CAAAuN,CAAAA,CAAAA,KAAAA,iBAAAvN,CAAAA,CAAAA,EAAAA,KAAA6L,cAAAA,CAG9B7K,KAAA;QAAC6K;QAAa0B,aAAa;KAAA,EAACvN,CAAAA,CAAAA,EAAAA,GAAAuN,eAAAvN,CAAAA,CAAAA,EAAAA,GAAA6L,aAAA7L,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAY,KAA5BI;IADhB,MAAA,CAAA8G,oBAAAoG,2BAAA,CAAA,GAA0Db,sBACxDzM,EACF;IAAC,IAAAK,IAAA4B;IAAA7C,CAAAA,CAAA6L,CAAAA,CAAAA,KAAAA,eAAA7L,CAAAA,CAAAA,EAAAA,KAAA0L,kBAAAA,CAGe7I,KAAA;QAACgJ;QAAaH,eAAe;KAAA,EAAC1L,CAAAA,CAAAA,EAAAA,GAAA6L,aAAA7L,CAAAA,CAAAA,EAAAA,GAAA0L,iBAAA1L,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAA9B4B;IADhB,MAAA,CAAAgF,wBAAAsG,+BAAA,CAAA,GAAkEN,0BAChE5M,EACF;IAAC6B,IAAAA;IAAA9C,CAAAA,CAAA,CAAA,CAAA,KAAA6H,wBAAArF,aAAAA,CAE0BM,KAAAA,IAClBsL,MAAAC,IAAAA,CAAAC,IAAAA,IAEHzG,wBAAsBrF,WAAAgH,IAAAO,OAAA,EAAAD,OAAAyE,OAAA,CAAA,CAI1B,EAACC,IAAAA,CAAM,GACRxO,CAAAA,CAAA,CAAA,CAAA,GAAA6H,wBAAArF,YAAAxC,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAyBkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CARPoB,KAAQpB,GAQa9C,GAAAA,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IARxC,MAAAyO,aAAmBvK;IAmBO,IAAAiC,IAAAC;IAAApG,CAAAA,CAAA,EAAA,CAAA,KAAA6H,wBAAArF,aAAAA,CARjB4D,KAAAgI,MAAAC,IAAAA,CAAAA,IAAAC,IAEHzG,wBAAsBrF,WAAAgH,IAAAkF,QAAA,EAAA5E,OAAA6E,QAAA,EAK1B,EAACH,IAAAA,CAAM,GAACxO,CAAAA,CAAA,EAAA,CAAA,GAAA6H,wBAAArF,YAAAxC,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA,EAPRmG,KAAOC;IADT,MAAA6B,eAAqB9B;IASmBE,IAAAA;IAAArG,CAAAA,CAAA,EAAA,CAAA,KAAA6H,wBAAArF,aAAAA,CAED6D,KAAAA,IAC9BkI,CACL1G,CAAAA,wBAAsBrF,WAAAmK,KAAAiC,QAAA,GAIzB5O,CAAAA,CAAA,EAAA,CAAA,GAAA6H,wBAAArF,YAAAxC,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IANDkI,MAAAA,yBAAuC7B,GAMA,GAGzBE,MAAAA,CAACuB,oBAAkBvF,cAAiB,CAAA,IAAA,CAAKsF,wBAAsBtF,cAAA,CAAA,GAMhEkE,MAAAyH,+BAA+BC;IAA+BtF,IAAAA;IAAA,OAAA7I,CAAAA,CAAA6H,EAAAA,CAAAA,KAAAA,0BAAA7H,CAAAA,CAAAiI,EAAAA,CAAAA,KAAAA,gBAAAjI,CAAAA,CAAAkI,EAAAA,CAAAA,KAAAA,0BAAAlI,CAAAA,CAAAA,GAAAA,KAAA8H,sBAAA9H,CAAAA,CAAA,EAAA,CAAA,KAAAyO,cAAAzO,CAAAA,CAAA,EAAA,CAAA,KAAAuG,OAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAAyG,MAAAA,CAPpEoC,MAAA;QAAAtG,YACOgE;QAAiFkI;QAAAxG;QAAAC;QAAAJ;QAAAD;QAAAjE,WAMlF6C;IAAAA,GACZzG,CAAAA,CAAAA,GAAAA,GAAA6H,wBAAA7H,CAAAA,CAAAA,GAAAA,GAAAiI,cAAAjI,CAAAA,CAAAA,GAAAA,GAAAkI,wBAAAlI,CAAAA,CAAAA,GAAAA,GAAA8H,oBAAA9H,CAAAA,CAAAA,GAAAA,GAAAyO,YAAAzO,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA,EARM6I;AAQN;AAnDI,SAAA+F,SAAAC,uBAAAA,EAAA;IAsC4B,OAAA,OAAOC,wBAAqB3E,WAAAA,IAAiB;AAAQ;AAtCjF,SAAAwE,SAAAxE,WAAAA,EAAA;IA8B4BoE,OAAAA,CAAAA,CAAQpE,eAAgBA,gBAAgB;AAAE;AA9BtE,SAAAuE,SAAAK,uBAAAA,EAAA;IAAA,OA6BmCD,yBAAqB3E,eAAiB;AAAE;AA7B3E,SAAAJ,QAAA+E,qBAAAA,EAAA;IAAA,OAkBmCA,sBAAqB5E,SAAAA;AAAA;ACnMlD8E,MAAAA,+LAAazN,SAAAA,EAAOC,uJAAG,CAAA,CAAA;;AAAA,CAAA,EAKvByN,mMAAmB1N,SAAAA,mJAAOa,OAAI,EAAE8M,KAAAA,CAAM;IACjDC,OAAO;IACPC,WAAW;IACXC,SAAS;AACX,CAAC,CAAA,CAAA;;AAAA,CAAA;AAgCM,SAAAC,oBAAAhP,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAA6B,EAAAqF,EAAAA,EAAA2B,IAAAA,EAAAe,QAAApH,EAAAA,EAAA2O,QAAAA,EAAAC,SAAAA,EAAAA,GAAAlP,IAGlC0H,SAAApH,OAAiB+I,KAAAA,IAAR,WAAT/I,IAIA,EAAAF,CAAAA,EAAAA,IAAYC,4KAAAA,EAAAnB,wBAAuC,GACnDiQ,WAAiB,CAAA,sBAAA,4MAAyBC,QAAAA,CAAO,CAAA,GAAA,EACjD,EAAA5H,kBAAAA,EAAAD,sBAAAA,EAAAjE,SAAAA,EAAArB,UAAAA,EAAAkM,UAAAA,EAAAxG,YAAAA,EAAAC,sBAAAA,EAAAA,GAQI4F,sBAAsBxI,EAAE;IAAC,IAAAtE,IAAAC;IAAAjB,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,EAAAA,KAAAiH,OAAAA,CAC4BhG,KAAA;QAAAuC,KAAM8B;QAAE/E,OAAS0G;IAAAA,GAAKjH,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAtBC;IAAsB4B,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CAAzD6B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;QAAmB,UAAA7B;IAAuD,CAAA,GAAAhB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAjG+H,MAAAA,gBAAsBlF,IACtB8M,oBAAAA,CAA2B/L;IAASd,IAAAA;IAAA9C,CAAAA,CAAAgI,CAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAMxBoC,KAAApC,EAAE,qCAAmC;QAAAwI,SAAYlB;IAAAA,CAAO,GAAChI,CAAAA,CAAAA,EAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAIvDwD,KAAAxD,EAAE,0CAA0C,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,CAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAAuP,EAAAA,CAAAA,KAAAA,YAAAvP,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CAFvCiC,KAAA;QAAAkB,SACHkI;QAAQK,MACX1L;IACPlE,GAAAA,CAAAA,CAAAA,GAAAA,GAAAuP,UAAAvP,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAAgI,EAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAA,EAAA,CAAA,KAAAwP,aAAAxP,CAAAA,CAAA2P,EAAAA,CAAAA,KAAAA,qBAAA3P,CAAAA,CAAA,EAAA,CAAA,KAAAU,KAAAV,CAAAA,CAAAA,GAAAA,KAAAuC,aAAAA,CACc6D,KAAAuJ,oBAAiB;QAAAC,MAGxBrN,aAAU,IACN7B,EAAE,oDAAkD;YAAAwI,SAAYlB;QAAAA,CAAO,IACvEtH,EAAE,6CAA2C;YAAAwI,SAAYlB;QAAAA,CAAO;QAACX,SAC9DmI;IAAS7F,IAAAA,KAAAA,GAEX3J,CAAAA,CAAAA,GAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,GAAAA,GAAAwP,WAAAxP,CAAAA,CAAAA,GAAAA,GAAA2P,mBAAA3P,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAuC,YAAAvC,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAbPC,KAAA;QAAAwJ,cACQ1J;QAGb2J,eACc1J;IAShBpG,GAAAA,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAAgI,EAAAA,CAAAA,KAAAA,UAAAhI,CAAAA,CAAA,EAAA,CAAA,KAAA6H,0BAAA7H,CAAAA,CAAAA,GAAAA,KAAAiI,gBAAAjI,CAAAA,CAAA+H,EAAAA,CAAAA,KAAAA,iBAAA/H,CAAAA,CAAA,EAAA,CAAA,KAAAkI,0BAAAlI,CAAAA,CAAA8H,EAAAA,CAAAA,KAAAA,sBAAA9H,CAAAA,CAAA,EAAA,CAAA,KAAA4D,aAAA5D,CAAAA,CAAAA,GAAAA,KAAAuP,YAAAvP,CAAAA,CAAAyO,EAAAA,CAAAA,KAAAA,cAAAzO,CAAAA,CAAA,EAAA,CAAA,KAAAU,KAAAV,CAAAA,CAAAA,GAAAA,KAAAuC,aAAAA,CAIDgE,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAACyI,cACEnH;QAAAA,UAAAA,0BAA0BC,sBAAAA,CAAuBlE,YAChD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,yBACyBiE;YAAAA;YACJC;YACLC;YACJnE;YACCrB;YACJyF;YACIyG;YACExG;YACUC;YACFqH,sBAAAA;QACtB,CAAA,IAED,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,kBAAA;YAA6B,eAAA;YAC5B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA;gBAAa,UAAA,CAAA;gBAAgB,OAAA7O,EAAE,oCAAoC;YACtE,CAAA;QAAA,CAAA;IAAA,CAEJ,GAAaV,CAAAA,CAAAA,GAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,GAAAA,GAAA6H,wBAAA7H,CAAAA,CAAAA,GAAAA,GAAAiI,cAAAjI,CAAAA,CAAAA,GAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,GAAAA,GAAAkI,wBAAAlI,CAAAA,CAAAA,GAAAA,GAAA8H,oBAAA9H,CAAAA,CAAAA,GAAAA,GAAA4D,WAAA5D,CAAAA,CAAAA,GAAAA,GAAAuP,UAAAvP,CAAAA,CAAAA,GAAAA,GAAAyO,YAAAzO,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAuC,YAAAvC,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAA,OAAAzG,CAAAA,CAAAyP,EAAAA,CAAAA,KAAAA,YAAAzP,CAAAA,CAAA,EAAA,CAAA,KAAAuP,YAAAvP,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAA8C,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAzCfI,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EAAA;QACQ,OAAA;QACHgJ,IAAAA;QACI,QAAA3M;QACA,QAAAuD;QAeCkJ,SAAAA;QACOA,gBAAAA;QAEhBhJ,UAAAA;IAoBF,CAAA,GAASvG,CAAAA,CAAAA,GAAAA,GAAAyP,UAAAzP,CAAAA,CAAAA,GAAAA,GAAAuP,UAAAvP,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA,EA1CTyG;AA0CS;ACvGb,SAAAsJ,6BAAAhQ,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GACE,EAAAS,CAAAA,EAAYC,+JAAAA,iBAAAA,EAAAnB,wBAAuC,GACnD8F,+MAAWoK,QAAAA,CAAAA,IACX,CAAA5O,OAAAkP,QAAA,CAAA,6MAA0BC,WAAAA,EAAAA,IAA+B;IAAC3P,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAC1BtC,KAAAA,IAAM0P,SAAAA,IAAa,GAAChQ,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAApD,MAAAkQ,cAAoB5P;IAAqCM,IAAAA;IAAA,OAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAc,SAAAd,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,SAAAC,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAElDE,KAAAE,QACL,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACK;QAAA,IAAA,CAAA,aAAA,EAAgBwE,EAAE,EAAA;QACV,eAAA;QACJ,QAAA5E,EAAE,wCAAwC;QAC1C,QAAA;YAAAoP,eAAA;gBAAAF,MAEElP,EAAE,+CAA+C;gBAAC2G,SAC/C6I;gBAAWC,MACd;YAAA;QAAS;QAGV,SAAApQ,MAAKwP,QAAAA;QAEd,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAa;YAAA,SAAC;YACb,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAC,QAAA,EAAW;gBAAA,MAAA;gBAAI7O,UAAE,EAAA,0CAA0C;YAAE,CAAA;QAChE,CAAA;IAAA,CACF,IAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAEC,kMAAA,EAAuBsP;QAAAA,SAAO;QAC7B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,qBAAmB;YAAA,GAAKjQ,KAAAA;QAAAA,CAAK;IAChC,CAAA,GACDC,CAAAA,CAAAA,EAAAA,GAAAc,OAAAd,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAtBMY;AAsBN;ACxCI,SAAAwP,MAAA9P,EAAAA,EAAA;IAAAN,MAAAA,KAAAC,+LAAAA,EAAA,CAAA,GAAe,EAAA0G,QAAAA,EAAA0J,IAAAzP,EAAAA,EAAAN,GAAAA,IAEpB+P,KAAAzP,OAAM+I,KAAAA,IAAAA,IAAN/I,IAKA0P,CAAAA,OAAAC,QAAA,CAAA,6MAA0BN,WAAAA,EAASI,MAAAA,CAAO;IAAC,IAAArP,IAAAC;IAYnC,IAZmCjB,CAAAA,CAAAA,EAAAA,KAAAqQ,KAAAA,CAEjCrP,KAAAA,MAAA;QAAA,IACJqP,MAAO,GAAA;QAIX,MAAAG,YAAkBC,WAAA,IAAiBF,SAAa,CAAA,CAAA,GAAGF,EAAE;QAAC,OAAA,MAAA;YAGpDK,aAAaF,SAAS;QAAC;IAExBvP,GAAAA,KAAAA;QAACoP,EAAE;KAAA,EAACrQ,CAAAA,CAAAA,EAAAA,GAAAqQ,IAAArQ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,CAAAD,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAAAjB,CAAAA,CAAA,CAAA,CAAA,6MAVP2Q,YAAAA,EAAU3P,IAUPC,EAAI,GAEH,CAACqP,SAAK,CAAK3J,UAAQ;QAAA9D,IAAAA;QAAA,OAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACdC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA,CAAA,CAAA,GAAK7C,CAAAA,CAAAA,EAAAA,GAAA6C,GAAAA,IAAAA,MAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAL6C;IAAAA;IAAKA,IAAAA;IAAA7C,OAAAA,CAAAA,CAAAA,EAAAA,KAAA2G,WAAAA,CAGP9D,KAAA,OAAO8D,YAAa,aAAaA,SAAAA,IAAaA,UAAQ3G,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAtD6C;AAAsD;ACxBxD,MAAM+N,aAAa,CAAA,GAKbC,uBAAuB,IAKvBC,yBAAyBD,KCPhCE,yLAAOxP,SAAAA,mJAAOyP,QAAK,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AAmDlB,SAAAC,YAAA3Q,EAAAA,EAAA;IAAAN,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GAAqB,EAAAiR,QAAAA,EAAAC,OAAAA,EAAAA,GAAA7Q,IAO1B,EAAA8Q,MAAAA,EAAAA,GAAiBvM,cACjB,GAAA,CAAAwM,UAAAC,WAAA,CAAA,6MAAgCrB,WAAAA,EAAAA,CAAAA,CAAc;IAACrP,IAAAA;IAAAZ,CAAAA,CAAAmR,CAAAA,CAAAA,KAAAA,WAAAnR,CAAAA,CAAAA,EAAAA,KAAAoR,SAAAA,CAG7CxQ,KAAA2Q,CAAA,UAAA;QAAA,IAAA,CACOJ,SAAO;sBAEI,GAEhBI,MAAKC,cAAAA,CAAgB;QAErB,MAAAC,SAAeF,MAAKG,KAAAA;QAEb,OAAA,SAASP,SAAAA,CAAU;QAE1B,MAAAQ,kBAAAlH,CAAA,MAAA;YACEA,EAAC+G,cAAAA,CAAgB;YAEjBI,MAAAA,SAAenH,EAACiH,KAAAA,GAASD;YAElB,OAAA,QAAQN,SAASS,MAAM;QAAA,GAGhCC,gBAAAC,CAAA,QAAA;YACErH,IAAC+G,cAAAA,CAEDF,GAAAA,YAAAA,CAAAA,CAAiB,GAEjBS,OAAAC,mBAAAA,CAA2B,aAAaL,eAAe,GACvDI,OAAAC,mBAAAA,CAA2B,WAAWH,aAAa,GAEnDT,OAAO,OAAOD,SAAAA,CAAU;QAAC;QAG3BY,OAAAE,gBAAAA,CAAwB,aAAaN,eAAe,GACpDI,OAAAE,gBAAAA,CAAwB,WAAWJ,aAAa;IACjD7R,GAAAA,CAAAA,CAAAA,EAAAA,GAAAmR,SAAAnR,CAAAA,CAAAA,EAAAA,GAAAoR,QAAApR,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAjCHkS,MAAAA,kBAAwBtR,IAuCLI,KAAAkQ,WAAW,KAAEvH,KAAAA,GACb1I,KAAAoQ,WAAW,KAAE1H,KAAAA;IAAY9G,IAAAA;IAAA,OAAA7C,CAAAA,CAAAkS,CAAAA,CAAAA,KAAAA,mBAAAlS,CAAAA,CAAAA,EAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAiB,KAAAA,CAF1C4B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAACkO,QAAAA;QACgB,iBAAA/P;QACA,iBAAAC;QACFiR,aAAAA;IACb,CAAA,GAAAlS,CAAAA,CAAAA,EAAAA,GAAAkS,iBAAAlS,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAJF6C;AAIE;AC7EN,MAAMkO,yLAAOxP,SAAAA,mJAAOgI,OAAI,CAAA,CAAA;;;;;;AAAA,CAAA,EAaX4I,iNAAO/N,aAAAA,EAAW,SAAArE,KAAAA,EAAAqS,YAAAA,EAAA;IAAApS,MAAAA,oMAAAC,EAAA,EAAA;IAAA,IAAA0G,UAAA0L,qBAAAC,qBAAAhN,IAAAiN,cAAAC,cAAAC,WAAAnS,IAAAM;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAM7B,EAAA4G,QAAAA,EAAA+L,iBAAAJ,mBAAAA,EAAAK,iBAAAN,mBAAAA,EAAAO,MAAAtS,EAAAA,EAAAgF,EAAAA,EAAAuE,UAAA2I,YAAAA,EAAAK,UAAAN,YAAAA,EAAAO,UAAAlS,EAAAA,EAAA,GAAA6R,WAAAA,GAUI1S,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAqS,qBAAArS,CAAAA,CAAAA,EAAAA,GAAAsS,qBAAAtS,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAuS,cAAAvS,CAAAA,CAAAA,EAAAA,GAAAwS,cAAAxS,CAAAA,CAAAA,EAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,CAAA+F,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAAqS,sBAAArS,CAAAA,CAAA,CAAA,CAAA,EAAAsS,sBAAAtS,CAAAA,CAAA,CAAA,CAAA,EAAAsF,KAAAtF,CAAAA,CAAA,CAAA,CAAA,EAAAuS,eAAAvS,CAAAA,CAAA,CAAA,CAAA,EAAAwS,eAAAxS,CAAAA,CAAA,CAAA,CAAA,EAAAyS,YAAAzS,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAAY,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAND,MAAA+S,WAAAzS,OAAYqJ,KAAAA,IAAAA,IAAZrJ,IAINwS,WAAAlS,OAAgB+I,KAAAA,IAAAA,CAAAA,IAAhB/I,IAGF,CAAAoS,aAAAC,cAAA,CAAA,4MAAsChD,YAAAA,EAAAA,IAAoC,GAC1E,EAAAiD,QAAAA,EAAAC,WAAAC,eAAAA,EAAAC,MAAAA,EAAAC,eAAAA,EAAAC,KAAAA,EAAA5O,KAAAA,EAAAA,GAOIE,cAAc;IAAC,IAAAC,OAAA9D;IAAA,IAAAhB,CAAAA,CAAA2E,EAAAA,CAAAA,KAAAA,SAAA3E,CAAAA,CAAAA,GAAAA,KAAAgT,aAAA;QAAA/R,IAAAA;QAAAjB,CAAAA,CAAAA,GAAAA,KAAAgT,cAAAA,CACK/R,MAAAuS,CAAOA,IAAAA,EAACrC,OAAAA,KAAa6B,aAAWhT,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAxD8E,QAAaH,MAAK8O,IAAAA,CAAMxS,GAAgC,GACtCD,KAAA8D,SAAQH,MAAK+O,OAAAA,CAAS5O,KAAI,GAAC9E,CAAAA,CAAAA,GAAAA,GAAA2E,OAAA3E,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAA8E,OAAA9E,CAAAA,CAAAA,GAAAA,GAAAgB;IAAA,OAAA8D,QAAA9E,CAAAA,CAAA,EAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAA7C,MAAA2T,YAAkB3S,IAClB4S,WAAiB,OAAOD,aAAc,WAAWhP,KAAAA,CAAMgP,YAAa,CAAA,CAAA,GAAAhK,KAAAA,GACpEkK,SAAeF,cAAchP,MAAKlC,MAAAA,GAAW,GAC7CqR,WAAiBR,oBAAoBN,aACrCG,YAAkBC,kBAAAA,CAAAA,IAA0BtO,OAAIqO,aAAoB,CAAA,GACpEY,gBAAsBH,UAAQT,aAAoB,CAAA,GAClD9O,gNAAY2P,SAAAA,EAAA,IAAkC,GAC9CpB,OAAa9N,OAAI8N,QAAUG,UAC3BL,kBAAwB5N,OAAI4N,mBAAqBJ,qBACjDK,kBAAwB7N,OAAI6N,mBAAqBN;IAAmBpR,IAAAA;IAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGY3B,KAAAA,IAAMoD,IAAG4P,OAAAA,EAAQjU,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,MAAjGkU,4NAAAA,EAAkE9B,cAAcnR,EAAiB;IAAC4B,IAAAA;IAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEvEC,KAAAsR,CAAA,aAAA;QACVA,eAAAA,QAAQ,GACvB9P,IAAG4P,OAAAA,GAAWE;IAAAA,GACfnU,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAHD,MAAAoU,SAAevR;IAGT,IAAAC,IAAAoB;IAAAlE,CAAAA,CAAA,EAAA,CAAA,KAAAqS,uBAAArS,CAAAA,CAAA,EAAA,CAAA,KAAAsS,uBAAAtS,CAAAA,CAAA,EAAA,CAAA,KAAA+S,YAAA/S,CAAAA,CAAAsF,EAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAuS,EAAAA,CAAAA,KAAAA,gBAAAvS,CAAAA,CAAAwS,EAAAA,CAAAA,KAAAA,gBAAAxS,CAAAA,CAAAuT,EAAAA,CAAAA,KAAAA,SAAAvT,CAAAA,CAAAA,GAAAA,KAAAgT,cAAAA,CAEIlQ,KAAAA,MAAA;QACHkQ,IAAAA,aAAW,OACTO,MAAMP,aAAW;YAAAN,iBACLJ;YAAmBK,iBACnBN;YAAmBO,MAC9BG;YAAQzN;YAAAuE,UAEJ2I;YAAYK,UACZN;QAAAA,CACX;IACArO,GAAAA,KACDoO;QAAAA;QACAD;QACAU;QACAzN;QACAkN;QACAD;QACAgB;QACAP,WAAW;KAAA,EACZhT,CAAAA,CAAAA,GAAAA,GAAAqS,qBAAArS,CAAAA,CAAAA,GAAAA,GAAAsS,qBAAAtS,CAAAA,CAAAA,GAAAA,GAAA+S,UAAA/S,CAAAA,CAAAA,GAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAAuS,cAAAvS,CAAAA,CAAAA,GAAAA,GAAAwS,cAAAxS,CAAAA,CAAAA,GAAAA,GAAAuT,OAAAvT,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,CAAApB,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAAkE,KAAAlE,CAAAA,CAAA,EAAA,CAAA,4MAnBD2Q,aAAAA,EAAU7N,IAUPoB,EASF;IAACiC,IAAAA;IAAAnG,CAAAA,CAAAkT,EAAAA,CAAAA,KAAAA,YAAAlT,CAAAA,CAAAA,GAAAA,KAAAgT,cAAAA,CAEiC7M,KAAAA,MAAA;QAC5B6M,eACLE,SAASF,WAAW;IACrBhT,GAAAA,CAAAA,CAAAA,GAAAA,GAAAkT,UAAAlT,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAHD,MAAAqU,iBAAuBlO;IAGIC,IAAAA;IAAApG,CAAAA,CAAAqT,EAAAA,CAAAA,KAAAA,UAAArT,CAAAA,CAAAA,GAAAA,KAAAgT,cAAAA,CAEM5M,KAAAA,MAAA;QAC1B4M,eACLK,OAAOL,WAAW;IACnBhT,GAAAA,CAAAA,CAAAA,GAAAA,GAAAqT,QAAArT,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAHD,MAAAsU,eAAqBlO;IAGIC,IAAAA;IAKVE,MAAAA,MAAA6M,kBAAe,CAAA,IAAWD;IAAS1M,IAAAA;IAAAzG,CAAAA,CAAAA,GAAAA,KAAAqU,kBAAArU,CAAAA,CAAAsU,EAAAA,CAAAA,KAAAA,gBAAAtU,CAAAA,CAAA6T,EAAAA,CAAAA,KAAAA,UAAA7T,CAAAA,CAAA,EAAA,CAAA,KAAA2T,aAAA3T,CAAAA,CAAAA,GAAAA,KAAAgT,eAAAhT,CAAAA,CAAA,EAAA,CAAA,KAAAuG,MAAAA,CAFzCE,MAAA;QAAAyM,UACKmB;QAAclB,WACb5M;QAAmC8M,QACtCiB;QAAYrK,OACb0J;QAASE;QAAAb;IAGjBhT,GAAAA,CAAAA,CAAAA,GAAAA,GAAAqU,gBAAArU,CAAAA,CAAAA,GAAAA,GAAAsU,cAAAtU,CAAAA,CAAAA,GAAAA,GAAA6T,QAAA7T,CAAAA,CAAAA,GAAAA,GAAA2T,WAAA3T,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA,EAAAqG,KAPMI;IADT,MAAA8N,eAAqBlO;IAUpBwC,IAAAA;IAAA,KAAA;QAAA,IAGKuK,iBAAe;YACjBzJ,MAAAA,KAAAA;YAAgB6K,MAAAA;QAAAA;QAAA,IAGdrB,WAAS;YAAEtC,MAAAA;YAA2B2D,MAAAA;QAAAA;QAAA,IAEtC9B,oBAAqB,GAAA;YACvB7J,MAAO2J,gBAAY1B;YAA0B0D,MAAAA;QAAAA;QAAA,IAG3CX,QAAM;YACRhL,MAAO2J,gBAAY1B;YAA0B0D,MAAAA;QAAAA;QAG/C3L,MAAO6J,mBAAmBF,gBAAY1B;IAAAA;IAfxC,MAAAjH,WAAiBhB;IAgBsDM,IAAAA;IAAA,KAAA;QAAA,IAGjEgK,WAAS;YAAEtC,MAAAA;YAA2B4D,MAAAA;QAAAA;QAAA,IAEtCrB,mBAAmBS,QAAM;YAC3BlK,MAAAA,KAAAA;YAAgB8K,MAAAA;QAAAA;QAAA,IAGdZ,QAAM;YAAA,IACJtB,cAAY;gBACdpJ,MAAOwJ,mBAAmBJ;gBAAYkC,MAAAA;YAAAA;YAGxC9K,MAAAA,KAAAA;YAAgB8K,MAAAA;QAAAA;QAGlBtL,MAAOwJ,mBAAmBJ;IAAAA;IAf5B,MAAAM,WAAiB1J,KAkBjBuL,SAAetB,mBAAe,CAAKS;IAAM,IAAAzK,KAAAC;IAAArJ,CAAAA,CAAAmT,EAAAA,CAAAA,KAAAA,aAAAnT,CAAAA,CAAA,EAAA,CAAA,KAAA6T,UAAA7T,CAAAA,CAAAoT,EAAAA,CAAAA,KAAAA,mBAAApT,CAAAA,CAAA,EAAA,CAAA,KAAA+T,iBAAA/T,CAAAA,CAAAA,GAAAA,KAAAgT,cAAAA,CAIrC3J,MAACwK,CAAAA,UACAT,CAAAA,mBACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,sBAAA,EAA4B;QAAA,SAAA;QAC3B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,aAAA;YAAsB,UAAAD,aAAaY;YAAwBf,SAAU;QACxE,CAAA;IAAA,CAAA,GACDhT,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,GAAAA,GAAA6T,QAAA7T,CAAAA,CAAAA,GAAAA,GAAAoT,iBAAApT,CAAAA,CAAAA,GAAAA,GAAA+T,eAAA/T,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA,EAAAoJ,MALDC;IAFJ,MAAAsL,UAAgBvL;IASfE,IAAAA;IAMaU,MAAAA,MAAA6I,aAAQ+B,IAAAA,IAAajL,KAAAA,IAAekJ;IAAQgC,IAAAA;IAAA7U,CAAAA,CAAA4S,EAAAA,CAAAA,KAAAA,QAAA5S,CAAAA,CAAAA,GAAAA,KAAA6J,YAAA7J,CAAAA,CAAA,EAAA,CAAA,KAAAgK,MAAAA,CAHjD6K,MAAA;QAAAjC;QAAA/I;QAAAgJ,UAGK7I;IAAAA,GACXhK,CAAAA,CAAAA,GAAAA,GAAA4S,MAAA5S,CAAAA,CAAAA,GAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,GAAAA,GAAAgK,KAAAhK,CAAAA,CAAAA,GAAAA,GAAA6U,GAAAA,IAAAA,MAAA7U,CAAAA,CAAA,EAAA,CAAA,EAAAsJ,MAJMuL;IADT,MAAAC,QAAcxL,KAoBQyL,MAAA3B,kBAAezJ,KAAAA,IAAe,UAEnBqL,MAAA7B,YAAY,KAAExJ,KAAAA,GAEfsL,MAAAnC,WAAW,KAAEnJ,KAAAA;IAAYuL,IAAAA;IAAAlV,CAAAA,CAAA,EAAA,CAAA,KAAAmT,aAAAnT,CAAAA,CAAA,EAAA,CAAA,KAAA2S,mBAAA3S,CAAAA,CAAA,EAAA,CAAA,KAAA0S,mBAAA1S,CAAAA,CAAA8T,EAAAA,CAAAA,KAAAA,YAAA9T,CAAAA,CAAA4S,EAAAA,CAAAA,KAAAA,QAAA5S,CAAAA,CAAA6S,EAAAA,CAAAA,KAAAA,YAAA7S,CAAAA,CAAA6J,EAAAA,CAAAA,KAAAA,YAAA7J,CAAAA,CAAAA,GAAAA,KAAA2T,YAAAA,CAI5CuB,MAAAtE,YAcA5Q,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,GAAAA,GAAA2S,iBAAA3S,CAAAA,CAAAA,GAAAA,GAAA0S,iBAAA1S,CAAAA,CAAAA,GAAAA,GAAA8T,UAAA9T,CAAAA,CAAAA,GAAAA,GAAA4S,MAAA5S,CAAAA,CAAAA,GAAAA,GAAA6S,UAAA7S,CAAAA,CAAAA,GAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,GAAAA,GAAA2T,WAAA3T,CAAAA,CAAAA,GAAAA,GAAAkV,GAAAA,IAAAA,MAAAlV,CAAAA,CAAA,EAAA,CAAA;IAAAmV,IAAAA;IAAAnV,CAAAA,CAAA2G,EAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAA,GAAAA,KAAA0U,SAAAA,CAGES,MAAAA,CAACT,UACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAe,WAAA;QAAgB,QAAA;QAAA;IAEhC,CAAA,GACD1U,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAA0U,QAAA1U,CAAAA,CAAAA,GAAAA,GAAAmV,GAAAA,IAAAA,MAAAnV,CAAAA,CAAA,EAAA,CAAA;IAAAoV,IAAAA;IAAApV,CAAAA,CAAAgT,EAAAA,CAAAA,KAAAA,eAAAhT,CAAAA,CAAAA,GAAAA,KAAAmV,MAAAA,CALHC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,0BAAA,EAAiCpC;QAAAA,SAAAA;QAC/BmC,UAAAA;IAAAA,CAKH,GAA0BnV,CAAAA,CAAAA,GAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,GAAAA,GAAAmV,KAAAnV,CAAAA,CAAAA,GAAAA,GAAAoV,GAAAA,IAAAA,MAAApV,CAAAA,CAAA,EAAA,CAAA;IAAAqV,IAAAA;IAAArV,CAAAA,CAAA0U,EAAAA,CAAAA,KAAAA,UAAA1U,CAAAA,CAAAA,GAAAA,KAAAsF,MAAAtF,CAAAA,CAAA,EAAA,CAAA,KAAA2T,aAAA3T,CAAAA,CAAAA,GAAAA,KAAAyS,aAAAzS,CAAAA,CAAA8U,EAAAA,CAAAA,KAAAA,SAAA9U,CAAAA,CAAAA,GAAAA,KAAA+U,OAAA/U,CAAAA,CAAA,EAAA,CAAA,KAAAgV,OAAAhV,CAAAA,CAAAiV,EAAAA,CAAAA,KAAAA,OAAAjV,CAAAA,CAAA,EAAA,CAAA,KAAAkV,OAAAlV,CAAAA,CAAAA,GAAAA,KAAAoV,MAAAA,CApC5BC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAAtE,QAAA;QACa,eAAA;QACJ,WAAA;QACH,MAAA;QACG2D;QACJpP;QACM,UAAAyP;QAAsC,GAC5CtC,SAAAA;QACiB,uBAAAuC;QACJrB,mBAAQ;QACL,sBAAAsB;QACfb,KAAK;QACHU;QAENI,UAAAA;YAAAA;YAgBDE;SAAAA;IAAAA,CAOF,GAAOpV,CAAAA,CAAAA,GAAAA,GAAA0U,QAAA1U,CAAAA,CAAAA,GAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAA2T,WAAA3T,CAAAA,CAAAA,GAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,GAAAA,GAAA8U,OAAA9U,CAAAA,CAAAA,GAAAA,GAAA+U,KAAA/U,CAAAA,CAAAA,GAAAA,GAAAgV,KAAAhV,CAAAA,CAAAA,GAAAA,GAAAiV,KAAAjV,CAAAA,CAAAA,GAAAA,GAAAkV,KAAAlV,CAAAA,CAAAA,GAAAA,GAAAoV,KAAApV,CAAAA,CAAAA,GAAAA,GAAAqV,GAAAA,IAAAA,MAAArV,CAAAA,CAAA,EAAA,CAAA;IAAAsV,IAAAA;IAAAtV,CAAAA,CAAA6T,EAAAA,CAAAA,KAAAA,UAAA7T,CAAAA,CAAAA,GAAAA,KAAAqV,MAAAA,CAtCTC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,qBAAA,EAA+BzB;QAAAA,YAAAA;QAC9BwB,UAAAA;IAAAA,CAsCF,GAAqBrV,CAAAA,CAAAA,GAAAA,GAAA6T,QAAA7T,CAAAA,CAAAA,GAAAA,GAAAqV,KAAArV,CAAAA,CAAAA,GAAAA,GAAAsV,GAAAA,IAAAA,MAAAtV,CAAAA,CAAA,EAAA,CAAA;IAAAuV,IAAAA;IAAAvV,CAAAA,CAAAuU,EAAAA,CAAAA,KAAAA,gBAAAvU,CAAAA,CAAAA,GAAAA,KAAAsV,MAAAA,CAzCzBC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,sBAAA,EAAA;QAA4B,SAAA;QAC3B,UAA6BhB,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,gJAAAA,cAAAA,CAAAA,QAAAA,EAAAA;YAAAA,OAAW;YACtCe,UAAAA;QAAAA,CAwCF;IACF,CAAA,GAAsBtV,CAAAA,CAAAA,GAAAA,GAAAuU,cAAAvU,CAAAA,CAAAA,GAAAA,GAAAsV,KAAAtV,CAAAA,CAAAA,GAAAA,GAAAuV,GAAAA,IAAAA,MAAAvV,CAAAA,CAAA,EAAA,CAAA;IAAAwV,IAAAA;IAAAxV,OAAAA,CAAAA,CAAA2U,EAAAA,CAAAA,KAAAA,WAAA3U,CAAAA,CAAAA,GAAAA,KAAAuV,MAAAA,CA5CxBC,MACED,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,0NAAAA,WAAAA,EAAAA;QAAAA,UAAAA;YAAAA;YAAAA;;IA6CQ,CAAA,GACPvV,CAAAA,CAAAA,GAAAA,GAAA2U,SAAA3U,CAAAA,CAAAA,GAAAA,GAAAuV,KAAAvV,CAAAA,CAAAA,GAAAA,GAAAwV,GAAAA,IAAAA,MAAAxV,CAAAA,CAAA,EAAA,CAAA,EA/CHwV;AA+CG,CAEN,GC/OYzE,yLAAOxP,SAAAA,mJAAOgI,OAAI,CAAA,CAAA;;;AAAA,CAAA;AAK/BwH,OAAK0E,WAAAA,GAAc;ACEZ,SAAAC,UAAA;IACL5Q,MAAAA,kNAAaN,aAAAA,gJAAAmR,cAAsB;IAAC,IAAA,CAE/B7Q,OAAIE,MAAAA,IAAAA,MACS,6BAA6B;IAGxCF,OAAAA;AAAI;ACAN,MAAM8Q,wNAAcxR,aAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,oMAAAC,EAAA,EAAA;IAAA4V,IAAAA,IAAAlP,UAAAmP,UAAAC,SAAAtD;IAAAzS,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAIpC,EAAA8V,EAAAA,EAAAlP,QAAAA,EAAAmP,QAAAA,EAAAC,OAAAA,EAAA,GAAAtD,WAAAA,GAAwD1S,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAA6V,IAAA7V,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA8V,UAAA9V,CAAAA,CAAAA,EAAAA,GAAA+V,SAAA/V,CAAAA,CAAAA,EAAAA,GAAAyS,SAAAA,IAAAA,CAAAoD,KAAA7V,CAAAA,CAAA,CAAA,CAAA,EAAA2G,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAA8V,WAAA9V,CAAAA,CAAA,CAAA,CAAA,EAAA+V,UAAA/V,CAAAA,CAAA,CAAA,CAAA,EAAAyS,YAAAzS,CAAAA,CAAA,CAAA,CAAA;IAC7D,MAAA,EAAAmT,SAAAA,EAAA,GAAoBuC,WACpB,EAAAvC,WAAAC,eAAAA,EAAqCvO,GAAAA,cAAAA,GASvBvE,KAAA8S,kBAAezJ,KAAAA,IAAemM;IAAQlV,IAAAA;IAAA,OAAAZ,CAAAA,CAAA6V,CAAAA,CAAAA,KAAAA,MAAA7V,CAAAA,CAAA2G,CAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAmT,CAAAA,CAAAA,KAAAA,aAAAnT,CAAAA,CAAAA,EAAAA,KAAA+V,WAAA/V,CAAAA,CAAA,EAAA,CAAA,KAAAqE,OAAArE,CAAAA,CAAA,EAAA,CAAA,KAAAyS,aAAAzS,CAAAA,CAAA,EAAA,CAAA,KAAAM,KAAAA,CANlDM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAAmQ,QAAA;QACa,eAAA;QACC8E,aAAAA;QACTpD,GAAAA,SAAAA;QACE,MAAA;QACEU,QAAAA;QACE,UAAA7S;QACDyV;QACJ1R;QACA,MAAA;QAEG;IAAA,CACV,GAAOrE,CAAAA,CAAAA,EAAAA,GAAA6V,IAAA7V,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,EAAAA,GAAA+V,SAAA/V,CAAAA,CAAAA,GAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,GAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,GAAAA,GAAAM,IAAAN,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA,EAZPY;AAYO,CAEV;AClCM,SAASoV,oBAAoBC,GAAAA,EAAiC;IACnE,OAAKA,MACEA,IAAIC,iBAAAA,CAAAA,EAAoBC,UAAAA,CAAW,KAAK,EAAE,IADhC;AAEnB;ACEA,MAAMC,2BAAyC;IAC7CC,eAAe,CAAA;IACfC,WAAW;IACXC,QAAQ,CAAA;AACV;AAEO,SAAAC,mBAAAzW,KAAAA,EAAA;IAAAC,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAKL,EAAAiR,QAAAA,EAAAuF,YAAAA,EAAAC,IAAAA,EAAAA,GAAuC3W,OACvC4W,0KAAoBC,iBAAAA,EAAe,UAAUF,OAAOA,OAAI/M,KAAAA,CAAY;IAEhE+M,IAAAA,KAAIzP,IAAAA,KAAU,WAAS;QAAA3G,IAAAA;QAAA,OAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAClBtC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,cAAA,EAAc,CAAA,CAAA,GAAAN,CAAAA,CAAAA,EAAAA,GAAAM,GAAAA,IAAAA,MAAAN,CAAAA,CAAA,CAAA,CAAA,EAAfM;IAAAA;IAAeA,IAAAA;IAAAN,CAAAA,CAAA2W,CAAAA,CAAAA,KAAAA,eAAA3W,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAGRpW,KAAAqW,YAAYD,IAAI,GAAC1W,CAAAA,CAAAA,EAAAA,GAAA2W,aAAA3W,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAjC,MAAA,EAAAoB,KAAAA,EAAAA,GAAgBd;IAEZoW,IAAAA,KAAIzP,IAAAA,KAAU,SAAO;QACnByP,IAAAA,KAAI/P,QAAAA,CAAAlE,MAAAA,KAAsB,GAAA,OAAA;QAAA,IAI1BiU,KAAI5C,QAAAA,EAAA;YAAAlT,IAAAA;YAAAZ,CAAAA,CAAAA,EAAAA,KAAAyW,eAAAA,CAGD7V,MAAA6V,gBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAiB,cAAA,EAAc,CAAA,CAAA,GAAAzW,CAAAA,CAAAA,EAAAA,GAAAyW,cAAAzW,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA;YAAAgB,IAAAA;YAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAkR,YAAAlR,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAA/P,QAAAA,IAAA3G,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAAxF,QAAAA,GAAAA,CAC/BlQ,MAAA0V,KAAI/P,QAAAA,CAAA6C,GAAAA,CAAAqN,CAAAA,OAAAC,aACH,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,oBACW;oBAAA,UAAA5F,YAAY3C,CAAAA,CAAQmI,KAAIxF,QAAAA;oBACpB,cAAAwF,KAAI/P,QAAAA,CAAUmQ,aAAAA,CAAc,CAAA,EAAA7P,SAAY;oBAEhD4P,MAAAA;gBADDA,GAAAA,MAAKE,GACC,CAEd,GAAC/W,CAAAA,CAAAA,EAAAA,GAAAkR,UAAAlR,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAA/P,QAAAA,EAAA3G,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAxF,QAAAA,EAAAlR,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA;YAAAiB,IAAAA;YAAAjB,OAAAA,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,OAAAZ,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAA,CATJC,MACGL,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,yNAAAA,YAAAA,EAAAA;gBAAAA,UAAAA;oBAAAA;oBACAI;iBAAAA;YAOC,CAAA,GACDhB,CAAAA,CAAAA,GAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA,EAVHiB;QAAAA;QAUGL,IAAAA;QAAAZ,CAAAA,CAAAA,GAAAA,KAAAyW,eAAAA,CAMF7V,MAAA6V,gBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAiB,+JAAA,EAAc,CAAA,CAAA,GAAAzW,CAAAA,CAAAA,GAAAA,GAAAyW,cAAAzW,CAAAA,CAAAA,GAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,EAAA,CAAA;QAGxB,MAAAgB,MAAA0V,KAAI1T,IAAAA;QAAK/B,IAAAA;QAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAAkR,YAAAlR,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAA/P,QAAAA,IAAA3G,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAAxF,QAAAA,GAAAA,CAIdjQ,MAAAyV,KAAI/P,QAAAA,CAAA6C,GAAAA,CAAAwN,CAAAA,SAAAC,eACH,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,oBACW;gBAAA,UAAA/F,YAAY3C,CAAAA,CAAQmI,KAAIxF,QAAAA;gBACpB,cAAAwF,KAAI/P,QAAAA,CAAUmQ,eAAAA,CAAc,CAAA,EAAA7P,SAAY;gBAEhD4P,MAAAA;YADDA,GAAAA,QAAKE,GACC,CAEd,GAAC/W,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA/P,QAAAA,EAAA3G,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAxF,QAAAA,EAAAlR,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA;QAAA6C,IAAAA;QAAA7C,CAAAA,CAAAkR,EAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAAA,GAAAA,KAAA0W,KAAA1T,IAAAA,IAAAhD,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,OAAAjB,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CAbJyB,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,YAAA,EAAA;YACWqO;YACJ,MAAAlQ;YACGoV,SAAuBA;YAC1BhV,MAAAA;YAELH,UAAAA;QAAAA,CAQH,GAAYjB,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA1T,IAAAA,EAAAhD,CAAAA,CAAAA,GAAAA,GAAAiB,KAAAjB,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;QAAA8C,IAAAA;QAAA9C,OAAAA,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,OAAAZ,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAhBdC,KACGlC,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,0NAAAA,WAAAA,EAAAA;YAAAA,UAAAA;gBAAAA;gBACDiC;aAAAA;QAcY,CAAA,GACX7C,CAAAA,CAAAA,GAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAjBH8C;IAAAA;IAiBGlC,IAAAA;IAAAZ,CAAAA,CAAAA,GAAAA,KAAAyW,eAAAA,CAMF7V,KAAA6V,gBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAiB,cAAA,EAAc,CAAA,CAAA,GAAAzW,CAAAA,CAAAA,GAAAA,GAAAyW,cAAAzW,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAkR,EAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAAA,GAAAA,KAAA0W,OAAAA,CAChC1V,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,6BAAsCkQ;QAAAA;QAAgBwF;IAAQ,CAAA,GAAA1W,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAAjB,OAAAA,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAAgB,KAAAA,CAFjEC,KACGL,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAAA,mOAAAA,EAAAA;QAAAA,UAAAA;YAAAA;YACDI;SAAAA;IAA+D,CAAA,GAC9DhB,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAHHiB;AAGG;AAIP,SAAAiW,4BAAAnX,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GACE,EAAAyW,IAAAA,EAAAA,GAAe3W;IAAK,IAEhB2W,KAAIS,MAAAA,EAAA;QAAA7W,IAAAA;QAAA,OAAAN,CAAAA,CAAAA,EAAAA,KAAA0W,KAAAS,MAAAA,IAAAnX,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CACCO,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,2BAAA;YAA8BP,GAAAA,KAAAA;YAAe,QAAA2W,KAAIS,MAAAA;QAAW,CAAA,GAAAnX,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAS,MAAAA,EAAAnX,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAM,GAAAA,IAAAA,MAAAN,CAAAA,CAAA,CAAA,CAAA,EAA7DM;IAAAA;IAA6DA,IAAAA;IAAAN,OAAAA,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAG/DO,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,qBAAA;QAAwBP,GAAAA,KAAAA;IAAAA,CAAS,GAAAC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAlCM;AAAkC;AAG3C,SAAA8W,oBAAArX,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACE,EAAAiR,QAAAA,EAAAwF,IAAAA,EAAAA,GAAyB3W;IAAKO,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAxF,QAAAA,GAAAA,CACP5Q,KAAA,OAAOoW,KAAIxF,QAAAA,IAAc,YAC7C,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;QAAW,MAAC;QAAGwF,UAAIxF,KAAAA,QAAAA,CAAAxE,MAAAA;IAAiB,CAAA,GACtC1M,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAxF,QAAAA,EAAAlR,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAqX,iBAAuB/W,IAGvB,EAAAc,KAAAA,EAAAA,GAAgBkW,0KAAAA,EAAYZ,IAAI,GAKhB9V,KAAAsQ,YAAY3C,CAAAA,CAAQmI,KAAIxF,QAAAA;IAAUlQ,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAa,MAAAA,GAAAA,CACnCvW,KAAA0V,KAAIa,MAAAA,EAAAC,MAAe,GAAG,GAACxX,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAa,MAAAA,EAAAvX,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAErBiB,MAAAA,KAAAyV,KAAIe,SAAAA,IAAef,KAAI5D,QAAAA,IAAA4E,mKAAAA,EAMrB7U,KAAAA,CAAAA,OAAAA,EAAUmT,oBAAoBU,KAAItV,KAAM,CAAC,EAAA;IAAE0B,IAAAA;IAAA9C,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAA1T,IAAAA,IAAAhD,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAAiB,QAAAA,IAAA3X,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAA5D,QAAAA,IAAA9S,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAAvG,IAAAA,IAAAnQ,CAAAA,CAAA,CAAA,CAAA,KAAAY,MAAAZ,CAAAA,CAAAA,EAAAA,KAAAgB,MAAAhB,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAA6C,MAAA7C,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CAV1D0B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,WAAA,EACW;QAAA,UAAAlC;QACD,SAAAI;QACH,MAAA0V,KAAI1T,IAAAA;QACC,WAAA/B;QAEF,SAAAyV,KAAIiB,QAAAA;QACJ,SAAAjB,KAAI5D,QAAAA;QACP1R,MAAAA;QACA,MAAAsV,KAAIvG,IAAAA;QACG,eAAAtN;IACb,CAAA,GAAA7C,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAA1T,IAAAA,EAAAhD,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAiB,QAAAA,EAAA3X,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAA5D,QAAAA,EAAA9S,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAvG,IAAAA,EAAAnQ,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAA,OAAAlE,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAqX,iBAAAA,CAZJnT,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,4KAAA,EAAA;QAA2BmT,SAAAA;QAA0B,WAAA;QACpDvU,UAAAA;IAAAA,CAYF,GAAoB9C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAqX,gBAAArX,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EAbpBkE;AAaoB;AAIxB,SAAA0T,0BAAA7X,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GAKE,EAAAiR,QAAAA,EAAAiG,MAAAA,EAAAT,IAAAA,EAAAA,GAAiC3W;IAAKO,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAxF,QAAAA,GAAAA,CACf5Q,KAAA,OAAOoW,KAAIxF,QAAAA,IAAc,YAC7C,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAC;QAAGwF,UAAIxF,KAAAA,QAAAA,CAAAxE,MAAAA;IAAiB,CAAA,GACtC1M,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAxF,QAAAA,EAAAlR,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAqX,iBAAuB/W;IAEtBM,IAAAA;IAAAZ,CAAAA,CAAAmX,CAAAA,CAAAA,KAAAA,OAAA5R,MAAAA,IAAAvF,CAAAA,CAAA,CAAA,CAAA,KAAAmX,OAAAlQ,IAAAA,GAAAA,CACgCrG,KAAA;QAAAuW,QAASA,OAAMlQ,IAAAA;QAAA1B,QAAe4R,OAAM5R,MAAAA;IAAAA,GAAQvF,CAAAA,CAAA,CAAA,CAAA,GAAAmX,OAAA5R,MAAAA,EAAAvF,CAAAA,CAAA,CAAA,CAAA,GAAAmX,OAAAlQ,IAAAA,EAAAjH,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAA7E6X,MAAAA,0KAAmBC,gBAAAA,EAAclX,EAA4C;IAACI,IAAAA;IAAAhB,CAAAA,CAAA6X,CAAAA,CAAAA,KAAAA,cAAA7X,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAG5E1V,KAAAuQ,CAAA,UAAA;QACEsG,WAAUxQ,OAAAA,CAASkK,KAAK,GACxBmF,KAAIiB,QAAAA,CAAU;IACf3X,GAAAA,CAAAA,CAAAA,EAAAA,GAAA6X,YAAA7X,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAJH,MAAA+X,cAAoB/W,IAQpB,EAAAI,KAAAA,EAAAA,OAAgBkW,sKAAAA,EAAYZ,IAAI,GAMhBzV,KAAAiQ,YAAY3C,CAAAA,CAAQmI,KAAIxF,QAAAA;IAAUrO,IAAAA;IAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAa,MAAAA,GAAAA,CACnC1U,KAAA6T,KAAIa,MAAAA,EAAAC,MAAe,GAAG,GAACxX,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAa,MAAAA,EAAAvX,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAGrB8C,MAAAA,KAAA4T,KAAI5D,QAAAA,sJAAA4E,gBAAAA,GAAA/N,KAAAA;IAAqCzF,IAAAA;IAAAlE,CAAAA,CAAA+X,EAAAA,CAAAA,KAAAA,eAAA/X,CAAAA,CAAA,EAAA,CAAA,KAAA6X,WAAAG,IAAAA,IAAAhY,CAAAA,CAAA,EAAA,CAAA,KAAA0W,KAAA1T,IAAAA,IAAAhD,CAAAA,CAAA,EAAA,CAAA,KAAA0W,KAAA5D,QAAAA,IAAA9S,CAAAA,CAAAA,GAAAA,KAAA0W,KAAAvG,IAAAA,IAAAnQ,CAAAA,CAAAA,GAAAA,KAAAiB,MAAAjB,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,MAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAA8C,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CANtD8C,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,WAAA,EAAA;QACI,IAAA;QACO,UAAAjD;QACD,SAAA4B;QACH,MAAAgV,WAAUG,IAAAA;QACV,MAAAtB,KAAI1T,IAAAA;QACC,WAAAF;QACFiV,SAAU;QACV,SAAArB,KAAI5D,QAAAA;QACP1R,MAAAA;QACA,MAAAsV,KAAIvG,IAAAA;IAAAA,CACV,GAAAnQ,CAAAA,CAAAA,GAAAA,GAAA+X,aAAA/X,CAAAA,CAAA,EAAA,CAAA,GAAA6X,WAAAG,IAAAA,EAAAhY,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA1T,IAAAA,EAAAhD,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA5D,QAAAA,EAAA9S,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAvG,IAAAA,EAAAnQ,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAA,OAAAnG,CAAAA,CAAAkE,EAAAA,CAAAA,KAAAA,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAqX,iBAAAA,CAZJlR,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,oBAAA,EAAA;QAA2BkR,SAAAA;QAA0B,WAAA;QACpDnT,UAAAA;IAAAA,CAYF,GAAoBlE,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAqX,gBAAArX,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAbpBmG;AAaoB;AC3IxB,MAAM8R,6BAA2C;IAC/C5B,eAAe,CAAA;IACfC,WAAW;IACXC,QAAQ,CAAA;AACV;AAEA,SAAS2B,aAAaC,KAAAA,EAAwBhI,IAAAA,EAAmD;IAC/F,OAAOgI,MAAMxL,IAAAA,CAAM+J,CAAAA,OAEdA,KAAKzP,IAAAA,KAAS,UAAUyP,KAAKvG,IAAAA,KAASA,QACtCuG,KAAKzP,IAAAA,KAAS,WAAWiR,aAAaxB,KAAK/P,QAAAA,EAAUwJ,IAAI,CAE7D;AACH;AAOO,SAAAiI,sBAAArY,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAkY,KAAAA,EAAAE,YAAAA,EAAAA,GAA8BtY,OAC9BuF,+MAAWoK,QAAAA,CAEX4I,IAAAA,cAAoBJ,aAAaC,OAAO,UAAU,GAClDI,aAAmBL,aAAaC,OAAO,SAAS,GAOlC7X,KAAAgY,cAAc,aAAaC,aAAa,YAAS5O,KAAAA;IAAY/I,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAFrEM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,oBAAA,EAAA;QAEO,MAAAN;QACM,eAAA;IAAA,CACZ,GAAAN,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAqY,eAAAA,CAKCrX,KAAAqX,gBAEIA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAAA,mOAAAA,EAAAA;QAAAA,UAAAA;YAAAA;YAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJACA,cAAA,EAAA,CAAA;SAAc;IAAA,CAAA,GAElBrY,CAAAA,CAAAA,EAAAA,GAAAqY,cAAArY,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAmY,QAAAA,CACAlX,KAAAkX,MAAK3O,GAAAA,CAAAkN,CAAAA,MAAA8B,cAAA;QACJ,MAAA/B,eAAqB0B,KAAAA,CAAMK,YAAa,CAAA,CAAA,EAAAvR,SAAY;QAAO,OACnD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,oBAAA;YAAiCwP;YAAmCC;QAAAA,GAAhBA,KAAIK,GAAoB;IACrF,CAAA,GAAC/W,CAAAA,CAAAA,EAAAA,GAAAmY,OAAAnY,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CAVJ4B,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EACE7B;QAAAA,UAAAA;YAAAA;YAMAC;SAAAA;IAIH,CAAA,GAAOjB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,GAAAA,KAAAY,MAAAZ,CAAAA,CAAA,EAAA,CAAA,KAAA6C,KAAAA,CArBXC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,+LAAA,EAAA;QAEG,QAAAlC;QAME0E;QAEF,MAAAzC;QAaOoV,SAAyBA;IAAAA,CAClC,GAAAjY,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAxBF8C;AAwBE;AC9DOiO,MAAAA,SAAOxP,yLAAAA,mJAAOyP,QAAK,CAAA,CAAA;;;;;;;;;;;;;AAAA,CAAA,EAenByH,2LAAWlX,SAAAA,mJAAOgI,OAAI,CAAA,CAAA;;AAAA,CAAA,ECDtBmP,uNAAatU,aAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,+LAAAC,KAAAA,EAAA,CAAA,GAInC,EAAA0G,QAAAA,EAAAoP,OAAAA,EAAAA,GAA4BhW,OAC5B,EAAAoT,SAAAA,EAAAA,GAAoBuC,QAAQ;IAACpV,IAAAA;IAAAN,CAAAA,CAAA2G,CAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAA,EAAAA,KAAA+V,UAAAA,CAKvBzV,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;QAAc,MAAA;QACb,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAC,OAAA,EAAayV;YAAAA;YAAiB;QAAE,CAAA;IACnC,CAAA,GAAW/V,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA+V,SAAA/V,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,OAAAA,CAAAA,CAAAmT,CAAAA,CAAAA,KAAAA,aAAAnT,CAAAA,CAAAA,EAAAA,KAAAqE,OAAArE,CAAAA,CAAA,CAAA,CAAA,KAAAM,KAAAA,CAJfM,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,sBAAA,EAA4B;QAAA,SAAA;QAC3B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAAmQ,QAAA;YAAiB,eAAA;YAAsBoC,QAAQ;YAAQ9O;YACtD/D,UAGF;QAAA,CAAA;IAAA,CACF,GAAsBN,CAAAA,CAAAA,EAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,EAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EANtBY;AAMsB,CAEzB,GC1BYmQ,yLAAOxP,SAAAA,mJAAOyP,QAAK,EAAa,CAAC,EAAC2H,OAAAA,EAAO,+KAC7CC,MAAAA,CAAAA;;;;;;;;;;;;+BAAAA,EAYwBD,UAAU,6BAA6B,aAAa,CAAA;;;EAAA,CAIpF,GAEYE,yLAAStX,SAAAA,mJAAOa,OAAI,CAAA,CAAA;;;;;;AAAA,CAAA,EAQpB0W,4LAAYvX,SAAAA,mJAAOgI,OAAI,EAAE,CAAC,EAACxH,KAAAA,EAAqB,KAAM;IAC3D,MAAA,EAACgX,EAAAA,EAAIC,EAAAA,EAAMjX,GAAAA,MAAME,MAAAA,CAAOZ,KAAAA,CAAM4X,IAAAA,CAAKC,OAAAA;IAGlCN,mLAAAA,MAAAA,CAAAA;sBAAAA,EACeI,EAAE,CAAA;;;aAAA,EAGXD,EAAE,CAAA;;EAAA,CAAA;AAGjB,CAAC,GAEYI,oBAAoB5X,yLAAAA,mJAAO6X,eAAY,CAAA,CAAA;;;AAAA,CAAA,EAKvCC,4LAAY9X,SAAAA,mJAAO+X,OAAI,CAAA,CAAA;;;AAAA,CAAA,EAKvBC,0LAAUhY,SAAAA,EAAOC,uJAAG,EAAE,CAAC,EAACO,KAAAA,EAAqB,KAAM;IACxD,MAAA,EAACV,KAAAA,EAAOa,KAAAA,EAAAA,GAASH,MAAME,MAAAA;IAEtB2W,mLAAAA,MAAAA,CAAAA;;;;;;;;;;;;;;;;;;;;;;;aAAAA,EAuBM1W,KAAAA,CAAM,CAAC,CAAC,CAAA;;;;;;;;;;;;4CAAA,uJAYuBsX,OAAAA,EAAKnY,MAAMoY,IAAAA,CAAKT,EAAAA,EAAI,CAAC,CAAC,CAAA;aAAA,EACrD9W,KAAAA,CAAM,CAAC,CAAC,CAAA;;;EAAA,CAAA;AAIvB,CAAC,GCzEYwX,yNAAatV,aAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAInC,EAAA0Z,OAAAA,EAAAC,UAAAA,EAAAC,MAAAA,EAAAC,YAAAA,EAAAC,OAAAA,EAAAC,UAAAA,EAAAC,IAAAA,EAAAC,QAAAA,EAAA9Y,KAAAA,EAAAA,GACErB,OACF,EAAAmT,QAAAA,EAAAC,SAAAA,EAAAE,MAAAA,EAAAL,aAAAmH,WAAAA,EAAAA,GAAgEzE,QAAQ,GACxE0E,gKAAiBC,iBAAAA,EAAeF,eAAAA,IAAmB;IAAC7Z,IAAAA;IAIzC,MAAAM,KAAAuS,YAAYiH,UAAQE,UAAAvI,OAAAwI,WAAAA,GAA8B5Q,KAAAA;IAAY3I,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CADhEI,KAAA;QAAAwZ,OACE5Z;IACRZ,GAAAA,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAFMU;IADT,MAAAyZ,cAAoBna;IAKnBW,IAAAA;IAAAjB,CAAAA,CAAAkT,CAAAA,CAAAA,KAAAA,YAAAlT,CAAAA,CAAAA,EAAAA,KAAAmT,YAAAA,CAEoClS,KAAAA,MAAA;QAC/BkS,aACJD,SAAS;IACVlT,GAAAA,CAAAA,CAAAA,EAAAA,GAAAkT,UAAAlT,CAAAA,CAAAA,EAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAA0a,mBAAyBzZ;IAGA4B,IAAAA;IAAA7C,CAAAA,CAAAmT,CAAAA,CAAAA,KAAAA,aAAAnT,CAAAA,CAAAA,EAAAA,KAAAqT,SAAAA,CAEaxQ,KAAAA,MAAA;QAC/BsQ,aACLE,OAAO;IACRrT,GAAAA,CAAAA,CAAAA,EAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,EAAAA,GAAAqT,QAAArT,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAHD2a,MAAAA,oBAA0B9X,IAK1B+X,uBAA6BrM,CAAAA,CAAAA,CAAQ,CAAC4E,aAAAA,CAAc8G,QAAQD,UAAAA,CAAAA,GAMtClX,KAAAqQ,YAAY,KAAExJ,KAAAA,GAKNzF,KAAAiP,YAAY,KAAExJ,KAAAA,GAKjBxD,KAAAgN,aAAS,CAAKyH,uBAA4B,IAAA;IAAAxU,IAAAA;IAAApG,CAAAA,CAAAA,EAAAA,KAAA4Z,aAAAA,CAIxDxT,KAAAwT,cAAc,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAS;QAAA,MAAA;QAAQA,UAAAA;IAAW,CAAA,GAAM5Z,CAAAA,CAAAA,EAAAA,GAAA4Z,YAAA5Z,CAAAA,CAAAA,EAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,CAAA,CAAA;IAOnCqG,MAAAA,KAAAuT,aAAkB,IAAA;IAAArT,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAA+Z,UAAAA,CAI9BxT,MAAAwT,WAAY,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;QAAkB,UAAA,CAAA;QAAiB,QAAA;QAAS,MAAA;IAAA,CAAK,GAAA/Z,CAAAA,CAAAA,GAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAA+Z,EAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CAC7DqF,MAAA,CAACsT,WACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,WAAgB;QAAA,MAAA;QAAgB,cAAA;QAAkB,QAAA;QAC5C,UAAA;IAAA,CACP,GACD/Z,CAAAA,CAAAA,GAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA7I,CAAAA,CAAA0a,EAAAA,CAAAA,KAAAA,oBAAA1a,CAAAA,CAAA,EAAA,CAAA,KAAAuG,OAAAvG,CAAAA,CAAAyG,EAAAA,CAAAA,KAAAA,OAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAAqG,MAAArG,CAAAA,CAAAA,GAAAA,KAAAka,WAAAA,CAdHrR,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,WACC;QAAA,sBAAmB,CAAA;QACb,MAAA;QACM,aAAA;QACH6R,SAAAA;QACI,aAAArU;QACJ,SAAC;QACA6T;QAET3T,UAAAA;YAAAA;YACAE;SAKH;IAAA,CAAA,GAAYzG,CAAAA,CAAAA,GAAAA,GAAA0a,kBAAA1a,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAka,UAAAla,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAAnJ,CAAAA,CAAA2Z,EAAAA,CAAAA,KAAAA,WAAA3Z,CAAAA,CAAAA,GAAAA,KAAAmT,YAAAA,CAEXhK,MAAAwQ,WAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJACE,OAAA,EAAW;QAAA,OAAA;QAAiBxG,QAAQ;QACnC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,yJAAA,uBAAA,EAAA;YAA4B,SAAA;YAAoB,UAAA;QAAA,CAAE;IACrD,CAAA,GACDnT,CAAAA,CAAAA,GAAAA,GAAA2Z,SAAA3Z,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAAAoJ,IAAAA;IAAApJ,CAAAA,CAAAA,GAAAA,KAAA2a,qBAAA3a,CAAAA,CAAAya,EAAAA,CAAAA,KAAAA,eAAAza,CAAAA,CAAA6I,EAAAA,CAAAA,KAAAA,OAAA7I,CAAAA,CAAA,EAAA,CAAA,KAAAmJ,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAAmG,MAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,KAAAA,CA/BHgD,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAC,QAAA;QACM,KAAA;QACIuR,SAAAA;QACA,SAAA;QACM,eAAAxU;QACR,QAAA;QACAsU,OAAAA;QAENrU,UAAAA;YAAAA;YAEDyC;YAiBCM;SAAAA;IAAAA,CAKH,GAASnJ,CAAAA,CAAAA,GAAAA,GAAA2a,mBAAA3a,CAAAA,CAAAA,GAAAA,GAAAya,aAAAza,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAoJ,GAAAA,IAAAA,MAAApJ,CAAAA,CAAA,EAAA,CAAA;IAAAqJ,IAAAA;IAAArJ,CAAAA,CAAA,EAAA,CAAA,KAAAmT,aAAAnT,CAAAA,CAAA4a,EAAAA,CAAAA,KAAAA,wBAAA5a,CAAAA,CAAAga,EAAAA,CAAAA,KAAAA,cAAAha,CAAAA,CAAAA,GAAAA,KAAAia,OAAAA,CAER5Q,MAAAuR,wBACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;QACO,OAAA;QACEzH,QAAAA;QACC,UAAA;QACM,eAAA;QACL,UAAA;QAEV,UAAA;YAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,SAAA;gBAAc,MAAA;gBAAgB,aAAA6G,aAAiB,IAAA;gBAC1C,UACN;YAAA,CAAA;YAECA,cAAcA;SAAAA;IAAAA,CACjB,GACDha,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,GAAAA,GAAA4a,sBAAA5a,CAAAA,CAAAA,GAAAA,GAAAga,YAAAha,CAAAA,CAAAA,GAAAA,GAAAia,MAAAja,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAEAsJ,MAAAA,MAAC6J,CAAAA,aAAa2G,gBAAgBA;IAAY9P,IAAAA;IAAAhK,CAAAA,CAAA,EAAA,CAAA,KAAAoJ,OAAApJ,CAAAA,CAAAqJ,EAAAA,CAAAA,KAAAA,OAAArJ,CAAAA,CAAAsJ,EAAAA,CAAAA,KAAAA,OAAAtJ,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CApD/C8F,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,sBAAA,EAA4B;QAAA,SAAA;QAC3B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAqB;YAAA,kBAAA9F;YAAiC,MAAA;YACrDkF,UAAAA;gBAAAA;gBAkCCC;gBAgBAC;aACH;QAAA,CAAA;IACF,CAAA,GAAsBtJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA;IAAA6U,IAAAA;IAAA7U,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAA6Z,UAAA7Z,CAAAA,CAAAqE,EAAAA,CAAAA,KAAAA,OAAArE,CAAAA,CAAAgK,EAAAA,CAAAA,KAAAA,OAAAhK,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CA7D1B+R,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,iKAAA,EAAuB;QAAA,SAAA;QACtB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC9D,QACU8I;YAAAA,SAAAA;YACO,kBAAA/W;YACJ,eAAA;YACPuB;YAEL2F,UAAAA;QAAAA,CAuDF;IACF,CAAA,GAAgBhK,CAAAA,CAAAA,GAAAA,GAAA6Z,QAAA7Z,CAAAA,CAAAA,GAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,GAAAA,GAAAgK,KAAAhK,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAA6U,GAAAA,IAAAA,MAAA7U,CAAAA,CAAA,EAAA,CAAA,EA/DhB6U;AA+DgB,CAEnB;AC9GD,SAASgG,oBAAkBnE,IAAAA,EAAqB;IAC9C,IAAI,CAACA,KAAKxF,QAAAA,EACD,OAAA;QAAC4J,gBAAgBnR,KAAAA;QAAWoR,WAAWpR,KAAAA;QAAWqR,YAAY,CAAA;IAAK;IAQtEF,MAAAA,iBACJ,OAAOpE,KAAKxF,QAAAA,IAAa,WAAYwF,KAAKxF,QAAAA,CAASxE,MAAAA,GAAoB/C,KAAAA,GACnEoR,YACJ,OAAOrE,KAAKxF,QAAAA,IAAa,YAAY,OAAOwF,KAAKxF,QAAAA,EAAUxE,UAAW,WAClEgK,KAAKxF,QAAAA,CAASxE,MAAAA,GACd;IAEC,OAAA;QAACoO;QAAgBC;QAAWC,YAAYzM,CAAAA,CAAQmI,KAAKxF,QAAAA;IAAS;AACvE;AAKO,SAAA+J,uBAAAlb,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GACL,EAAAyW,IAAAA,EAAAA,GAAe3W;IAEX2W,IAAAA,KAAIzP,IAAAA,KAAU,QAAM;QAAA3G,IAAAA;QAAAN,OAAAA,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CACfpW,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,gCAAA;YAAqCoW;QAAAA,CAAQ,GAAA1W,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAA9CM;IAAAA;IAGLoW,IAAAA,KAAIzP,IAAAA,KAAU,SAAO;QAAA3G,IAAAA;QAAAN,OAAAA,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAChBpW,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iCAAA;YAAsCoW;QAAAA,CAAQ,GAAA1W,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAA/CM;IAAAA;IAGT4a,OAAAA,QAAAA,IAAAA,CAAa,0DAA0DxE,IAAI,GAAC;AAAA;AASvE,SAAAyE,+BAAApb,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAyW,IAAAA,EAAAA,GAAe3W,OACf,EAAAqB,KAAAA,EAAAA,+JAAgBkW,cAAAA,EAAYZ,IAAI,GAChC,EAAAhW,CAAAA,EAAAA,+JAAYC,iBAAAA,CAAe;IAAC,IAExB+V,KAAIS,MAAAA,EAAA;QAAA7W,IAAAA;QAAA,OAAAN,CAAAA,CAAAA,EAAAA,KAAA0W,KAAAS,MAAAA,IAAAnX,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CACCO,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8BAAA;YAAiCP,GAAAA,KAAAA;YAAe,QAAA2W,KAAIS,MAAAA;QAAW,CAAA,GAAAnX,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAS,MAAAA,EAAAnX,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAM,GAAAA,IAAAA,MAAAN,CAAAA,CAAA,CAAA,CAAA,EAAhEM;IAAAA;IAAgEA,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAGzBpW,KAAAua,oBAAkBnE,IAAI,GAAC1W,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAvE,MAAA,EAAA8a,cAAAA,EAAAC,SAAAA,EAAAC,UAAAA,EAAAA,GAAgD1a;IAAuBM,IAAAA;IAAAZ,CAAAA,CAAA+a,CAAAA,CAAAA,KAAAA,aAAA/a,CAAAA,CAAAA,EAAAA,KAAAU,KAAAV,CAAAA,CAAA,CAAA,CAAA,KAAAoB,QAAAA,CAUvDR,KAAAma,aAAa3Z,SAASV,EAAE,0BAA0B,GAACV,CAAAA,CAAAA,EAAAA,GAAA+a,WAAA/a,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAgb,cAAAhb,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAAa,MAAAA,GAAAA,CAEpDvW,KAAAA,CAACga,cAActE,KAAIa,MAAAA,GAAUb,KAAIa,MAAAA,CAAAC,KAAAA,CAAc,GAAG,IAAC7N,KAAAA,GAAY3J,CAAAA,CAAAA,EAAAA,GAAAgb,YAAAhb,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAa,MAAAA,EAAAvX,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAC/DiB,MAAAA,KAAA+Z,aAAaF,iBAAiB1Z;IAAKyB,IAAAA;IAAA7C,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CAFhC4B,KAAA;QAAAuY,SACHpa;QAA+DsJ,SAC/DrJ;IACVjB,GAAAA,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAAgb,cAAAhb,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAA1T,IAAAA,IAAAhD,CAAAA,CAAA,EAAA,CAAA,KAAA0W,KAAAiB,QAAAA,IAAA3X,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAA5D,QAAAA,IAAA9S,CAAAA,CAAAA,GAAAA,KAAA0W,KAAAvG,IAAAA,IAAAnQ,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAXHC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,eAAA,EAAA;QACWkY,UAAS;QACb,MAAAtE,KAAI1T,IAAAA;QAED,SAAA0T,KAAIiB,QAAAA;QACH,UAAAjB,KAAI5D,QAAAA;QACR,MAAA4D,KAAIvG,IAAAA;QACE,cAAAvP;QACE,cAAAiC;IAAAA,CAId,GAAA7C,CAAAA,CAAAA,GAAAA,GAAAgb,YAAAhb,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA1T,IAAAA,EAAAhD,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAiB,QAAAA,EAAA3X,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA5D,QAAAA,EAAA9S,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAvG,IAAAA,EAAAnQ,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAZF8C;AAYE;AAIN,SAAAuY,6BAAAtb,KAAAA,EAAA;IAAAC,MAAAA,+LAAAC,KAAAA,EAAA,EAAA,GACE,EAAAkX,MAAAA,EAAAT,IAAAA,EAAAA,GAAuB3W;IAAKO,IAAAA;IAAAN,CAAAA,CAAAmX,CAAAA,CAAAA,KAAAA,OAAA5R,MAAAA,IAAAvF,CAAAA,CAAA,CAAA,CAAA,KAAAmX,OAAAlQ,IAAAA,GAAAA,CACK3G,KAAA;QAAA6W,QAASA,OAAMlQ,IAAAA;QAAA1B,QAAe4R,OAAM5R,MAAAA;IAAAA,GAAQvF,CAAAA,CAAA,CAAA,CAAA,GAAAmX,OAAA5R,MAAAA,EAAAvF,CAAAA,CAAA,CAAA,CAAA,GAAAmX,OAAAlQ,IAAAA,EAAAjH,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAA7E6X,MAAAA,0KAAmBC,gBAAAA,EAAcxX,EAA4C,GAC7E,EAAAI,CAAAA,EAAAA,IAAYC,4KAAAA,CAAe;IAACC,IAAAA;IAAAZ,CAAAA,CAAA6X,CAAAA,CAAAA,KAAAA,cAAA7X,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAG1B9V,KAAA2Q,CAAA,UAAA;QACEsG,WAAUxQ,OAAAA,CAASkK,KAAK,GACxBmF,KAAIiB,QAAAA,CAAU;IACf3X,GAAAA,CAAAA,CAAAA,EAAAA,GAAA6X,YAAA7X,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAJH,MAAA+X,cAAoBnX;IAMnBI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAE+C1V,KAAA6Z,oBAAkBnE,IAAI,GAAC1W,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAvE,MAAA,EAAA8a,cAAAA,EAAAC,SAAAA,EAAAC,UAAAA,EAAAA,GAAgDha;IAAuBC,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA+a,aAAA/a,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAtV,KAAAA,IAAApB,CAAAA,CAAA,EAAA,CAAA,KAAAU,IAAAA,CAWvDO,KAAA8Z,aAAarE,KAAItV,KAAAA,IAAUV,EAAE,0BAA0B,GAACV,CAAAA,CAAAA,EAAAA,GAAA+a,WAAA/a,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAtV,KAAAA,EAAApB,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,GAAAA,KAAAgb,cAAAhb,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAAa,MAAAA,GAAAA,CAEzD1U,KAAAA,CAACmY,cAActE,KAAIa,MAAAA,GAAUb,KAAIa,MAAAA,CAAAC,KAAAA,CAAc,GAAG,IAAC7N,KAAAA,GAAY3J,CAAAA,CAAAA,GAAAA,GAAAgb,YAAAhb,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAa,MAAAA,EAAAvX,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAC/D8C,MAAAA,KAAAkY,aAAaF,iBAAiBpE,KAAItV,KAAAA;IAAM8C,IAAAA;IAAAlE,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,MAAA7C,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CAFrCoB,KAAA;QAAAkX,SACHvY;QAA+DyH,SAC/DxH;QAAwCwT,WACtC;QAAQC,QAAA,CAAA;IAEpBvW,GAAAA,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,OAAAA,CAAAA,CAAA+X,EAAAA,CAAAA,KAAAA,eAAA/X,CAAAA,CAAAA,GAAAA,KAAA6X,WAAAG,IAAAA,IAAAhY,CAAAA,CAAAgb,EAAAA,CAAAA,KAAAA,cAAAhb,CAAAA,CAAA,EAAA,CAAA,KAAA0W,KAAA1T,IAAAA,IAAAhD,CAAAA,CAAAA,GAAAA,KAAA0W,KAAA5D,QAAAA,IAAA9S,CAAAA,CAAA0W,EAAAA,CAAAA,KAAAA,KAAAvG,IAAAA,IAAAnQ,CAAAA,CAAA,EAAA,CAAA,KAAAiB,MAAAjB,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CAdHiC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA;QACa,aAAA;QACF6U,UAAAA;QACJ,MAAAnD,WAAUG,IAAAA;QACV,MAAAtB,KAAI1T,IAAAA;QACD+U,SAAU;QACT,UAAArB,KAAI5D,QAAAA;QACR,MAAA4D,KAAIvG,IAAAA;QACE,cAAAlP;QACE,cAAAiD;IAAAA,CAMd,GAAAlE,CAAAA,CAAAA,GAAAA,GAAA+X,aAAA/X,CAAAA,CAAA,EAAA,CAAA,GAAA6X,WAAAG,IAAAA,EAAAhY,CAAAA,CAAAA,GAAAA,GAAAgb,YAAAhb,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA1T,IAAAA,EAAAhD,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAA5D,QAAAA,EAAA9S,CAAAA,CAAA,EAAA,CAAA,GAAA0W,KAAAvG,IAAAA,EAAAnQ,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAfFmG;AAeE;AAQN,SAAAmV,gCAAAvb,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACE,EAAAyW,IAAAA,EAAAA,GAAe3W,OACf,EAAAqB,KAAAA,EAAA,+JAAgBkW,cAAAA,EAAYZ,IAAI,GAMdpW,KAAA,CAAA,CAAEoW,KAAIxF,QAAAA,EACVtQ,KAAA8V,KAAI1T,IAAAA,sJAAAuF,eAAAA;IAAoBvH,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAtV,KAAAA,GAAAA,CAGhBJ,KAAA;QAAAsJ,SAAUoM,KAAItV,KAAAA;QAAAmV,QAAA,CAAA;IAAqBvW,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAtV,KAAAA,EAAApB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAAM,MAAAN,CAAAA,CAAAY,CAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CALnDH,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EAAA;QACW,UAAAX;QACJ,MAAAM;QACCQ,OAAAA;QACF,MAAA;QACS,cAAAJ;IAAAA,CACd,GAAAhB,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAEA,MAAA6C,MAAA6M,iNAAAA,CAAM;IAAC5M,IAAAA;IAAA9C,CAAAA,CAAA0W,CAAAA,CAAAA,KAAAA,KAAA/P,QAAAA,IAAA3G,CAAAA,CAAA,CAAA,CAAA,KAAA0W,KAAAxF,QAAAA,GAAAA,CAGNpO,KAAA4T,KAAI/P,QAAAA,CAAA6C,GAAAA,CAAAqN,CAAAA,OAAA0E,MAEA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,oBAAA;YACW,UAAAhN,CAAQmI,CAAAA,KAAIxF,QAAAA;YACR,cAAAwF,KAAI/P,QAAAA,CAAU4U,MAAG,CAAI,CAAA,EAAAtU,SAAY;YAEzC4P,MAAAA;QAAAA,GADDA,MAAKE,GACC,CAGhB,GAAC/W,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAA/P,QAAAA,EAAA3G,CAAAA,CAAA,CAAA,CAAA,GAAA0W,KAAAxF,QAAAA,EAAAlR,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CAVJoB,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;QACEpB,UAUH;IAAA,CAAA,GAAO9C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAA,OAAAnG,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAAA,GAAAA,KAAA6C,MAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAAkE,KAAAA,CAvBXiC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,aAAA,EAAA;QAEG,QAAAlF;QAQE,IAAA4B;QAEF,MAAAqB;IAaF,CAAA,GAAAlE,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAzBFmG;AAyBE;ACpJO4K,MAAAA,SAAOxP,yLAAAA,mJAAOgI,OAAI,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;ACAxB,SAASiS,gBACdC,KAAAA,EACAC,IAAAA,EACAC,KAAAA,EACA/J,MAAAA,EACsE;IACtE,MAAMgK,MAAM;QACVhJ,MAAM6I,MAAMC,IAAAA,CAAK9I,IAAAA,GAAO6I,MAAME,KAAAA,CAAM/I,IAAAA;QACpC4H,OAAOiB,MAAMC,IAAAA,CAAKlB,KAAAA,GAAQiB,MAAME,KAAAA,CAAMnB,KAAAA;IACxC,GAEMqB,eAAeH,KAAK7R,QAAAA,IAAYiH,wBAChCgL,gBAAgBH,MAAM9R,QAAAA,IAAYiH,wBAElCiL,eAAeC,KAAKC,GAAAA,CAAIP,KAAK7I,QAAAA,IAAY+B,IAAAA,GAAUgH,IAAIpB,KAAAA,GAAQsB,aAAa,GAC5EI,gBAAgBF,KAAKC,GAAAA,CAAIN,MAAM9I,QAAAA,IAAY+B,IAAAA,GAAUgH,IAAIpB,KAAAA,GAAQqB,YAAY;IAG/EM,IAAAA,YAAYN,eAAeJ,MAAMC,IAAAA,CAAKlB,KAAAA;IACpC4B,MAAAA,iBAAiBX,MAAME,KAAAA,CAAMnB,KAAAA,GAAQ0B;IACvCC,YAAYC,kBAAAA,CACdD,YAAYC,cAAAA;IAIVC,IAAAA,YAAYZ,MAAME,KAAAA,CAAMnB,KAAAA,GAAQsB;IAC9BQ,MAAAA,gBAAgBP,eAAeN,MAAMC,IAAAA,CAAKlB,KAAAA;IAC5C6B,YAAYC,iBAAAA,CACdD,YAAYC,aAAAA;IAGd,MAAMC,UAAUP,KAAKC,GAAAA,CAAID,KAAKQ,GAAAA,CAAI5K,QAAQuK,SAAS,GAAGE,SAAS,GAEzDI,QAAQhB,MAAMC,IAAAA,CAAKlB,KAAAA,GAAQ+B,SAC3BG,SAASjB,MAAME,KAAAA,CAAMnB,KAAAA,GAAQ+B,SAE7BI,WAAYF,QAAQb,IAAIpB,KAAAA,GAASoB,IAAIhJ,IAAAA,EACrCgK,YAAaF,SAASd,IAAIpB,KAAAA,GAASoB,IAAIhJ,IAAAA;IAEtC,OAAA;QAAC+J;QAAUF;QAAOG;QAAWF;IAAM;AAC5C;ACxCgBG,SAAAA,YAAY7J,WAAAA,EAA0B8J,EAAAA,EAA2B;IAC/E,MAAMC,OAAiB,CAAE,CAAA;IAEzB,IAAItS,IAAIqS;IAER,MAAOrS,MAAMuI,aAAa;QACxB,MAAMgK,gBAAgBvS,EAAEuS,aAAAA;QAEpB,IAAA,CAACA,cAAsBD,CAAAA,OAAAA;QAG3B,MAAM9S,QADWmE,MAAMC,IAAAA,CAAK2O,cAAcC,UAAU,EAC7BvJ,OAAAA,CAAQjJ,CAAC;QAIhC,IAFAsS,KAAKG,OAAAA,CAAQjT,KAAK,GAEd+S,kBAAkBhK,aACb+J,OAAAA;QAGLC,IAAAA;IAAAA;IAGCD,OAAAA;AACT;ACxBA,MAAMI,aAAuB,CAAE,CAAA;AAKfC,SAAAA,cAAcpK,WAAAA,EAA0BqK,QAAAA,EAA+B;IAG/E7T,MAAAA,OAAAA,aAAAA,GAAAA,IAAU8T,QAA+B;IAE/C,KAAA,MAAWnM,WAAWkM,SACpB7T,KAAI+T,GAAAA,CAAIpM,SAAS0L,YAAY7J,aAAa7B,OAAO,CAAC;IAG9CqM,MAAAA,qBAAqBA,CAACC,GAAgBC,MAAmB;QAC7D,MAAMC,KAAKnU,KAAIhJ,GAAAA,CAAIid,CAAC,KAAKN,YACnBS,KAAKpU,KAAIhJ,GAAAA,CAAIkd,CAAC,KAAKP,YAEnBU,MAAM7B,KAAKQ,GAAAA,CAAImB,GAAGlb,MAAAA,EAAQmb,GAAGnb,MAAM;QAGzC,IAAA,IAASqb,IAAI,GAAGA,IAAID,KAAKC,KAAK,EAAG;YACzBC,MAAAA,SAASJ,EAAAA,CAAGG,CAAC,CAAA,IAAK,CAAA,GAClBE,SAASJ,EAAAA,CAAGE,CAAC,CAAA,IAAK,CAAA;YAExB,IAAIC,WAAWC,QACb,OAAOD,SAASC;QAAAA;QAIb,OAAA;IACT;IAEAX,SAAS7O,IAAAA,CAAKgP,kBAAkB;AAClC;ACTO,SAASS,6BAAmD;IACjE,MAAMC,YAAuC,CAAA,CAAA,EACvCb,WAA0B,CAC1Bc,CAAAA,EAAAA,aAAiBb,aAAAA,GAAAA,IAAAA,QAAAA,GACjBc,0BAA0B,aAAA,GAAA,IAAI9P,IAAiB,GAC/CmN,QAAkC,CAAC;IAGrCzI,IAAAA,cAAkC,MAClCqL,YAAY,GACZ/K,kBAAsC,MACtCgL,gBAAgB,aAAA,GAAA,IAAIC,OACpBC,WAAW,CAAA;IAEf,SAAStL,SAAS/B,OAAAA,EAAsB;QACtCiN,wBAAwBK,GAAAA,CAAItN,OAAO,GAE/BmC,oBAAoBnC,WAAAA,CACtBmC,kBAAkB,IAAA,GAGpBoL,iBAAiB;IAAA;IAGnB,SAASrL,OAAOlC,OAAAA,EAAsB;QACpCiN,wBAAwBO,MAAAA,CAAOxN,OAAO,GAEtCmC,kBAAkBnC,SAElBuN,iBAAiB;IAAA;IAGVnL,SAAAA,MAAMpC,OAAAA,EAAsByN,OAAAA,EAAyB;QAC5DT,OAAAA,WAAWZ,GAAAA,CAAIpM,SAAS;YAAC,GAAGyN,OAAAA;YAASC,UAAUD;QAAQ,CAAA,GAEvDvB,SAASjT,IAAAA,CAAK+G,OAAO,GAEjB6B,eACFoK,cAAcpK,aAAaqK,QAAQ,GAGrChK,OAAOlC,OAAO,GAEP,MAAM;YACLoK,MAAAA,MAAM8B,SAAS3J,OAAAA,CAAQvC,OAAO;YAEhCoK,MAAM,CAAA,KACR8B,SAASyB,MAAAA,CAAOvD,KAAK,CAAC,GAGxB4C,WAAWQ,MAAAA,CAAOxN,OAAO,GAEzBuN,iBAAiB;QACnB;IAAA;IAIOtN,SAAAA,OAAOnK,IAAAA,EAAgC8X,WAAAA,EAA0BnN,MAAAA,EAAgB;QAClFoN,MAAAA,YAAY3B,SAAS3J,OAAAA,CAAQqL,WAAW,GACxCE,cAAcd,WAAW3d,GAAAA,CAAIue,WAAW;QAE9C,IAAI,CAACE,YAAa,CAAA;QAEZC,MAAAA,eAAe7B,QAAAA,CAAS2B,YAAY,CAAC,CAAA,EACrCG,eAAehB,WAAW3d,GAAAA,CAAI0e,YAAY;QAEhD,IAAKC,cAoBL;YAAA,IAlBIlY,SAAS,WAAA,CACXuX,WAAW,CAAA,GAEX/C,MAAMC,IAAAA,GAAO;gBACXvK,SAAS4N;gBACTnM,MAAMqM,YAAYrM,IAAAA,IAAQ;gBAC1B4H,OAAOuE,YAAYK,WAAAA;YAAAA,GAGrB3D,MAAME,KAAAA,GAAQ;gBACZxK,SAAS+N;gBACTtM,MAAMuM,aAAavM,IAAAA,IAAQ;gBAC3B4H,OAAO0E,aAAaE,WAAAA;YAAAA,GAGtBV,kBAAAA,GAGEzX,SAAS,UAAUwU,MAAMC,IAAAA,IAAQD,MAAME,KAAAA,EAAO;gBAChD2C,gBAAAA,aAAAA,GAAAA,IAAoBC,IAAiC;gBAE/C,MAAA,EAAC9B,KAAAA,EAAOC,MAAAA,EAAQC,QAAAA,EAAUC,SAAAA,EAAapB,GAAAA,gBAC3CC,OACAwD,aACAE,cACAvN,MACF;gBAGA0M,cAAcf,GAAAA,CAAIwB,aAAa;oBAACnM,MAAM+J;oBAAUnC,OAAOiC;gBAAAA,CAAM,GAC7D6B,cAAcf,GAAAA,CAAI2B,cAAc;oBAACtM,MAAMgK;oBAAWpC,OAAOkC;gBAAO,CAAA,GAEhEgC,iBAAiB;YAAA;YAGnB,IAAIzX,SAAS,OAAO;gBACP,WAAA,CAAA;gBAELoY,MAAAA,iBAAiBf,cAAc9d,GAAAA,CAAIue,WAAW,GAC9CO,kBAAkBhB,cAAc9d,GAAAA,CAAI0e,YAAY;gBAGtDf,WAAWZ,GAAAA,CAAIwB,aAAa;oBAC1B,GAAGE,WAAAA;oBACHvM,iBAAiB;oBACjBC,iBAAiBsM,YAAYpM,QAAAA,IAAY+B,IAAAA;oBACzChC,MAAMyM,gBAAgBzM,QAAQqM,YAAYrM,IAAAA;gBAAAA,CAC3C,GAGDuL,WAAWZ,GAAAA,CAAI2B,cAAc;oBAC3B,GAAGC,YAAAA;oBACHzM,iBAAiB;oBACjBC,iBAAiBsM,YAAYpM,QAAAA,IAAY+B,IAAAA;oBACzChC,MAAM0M,iBAAiB1M,QAAQuM,aAAavM,IAAAA;gBAAAA,CAC7C,GAGD0L,gBAAgB,aAAA,GAAA,IAAIC,OAGpB,OAAO9C,MAAMC,IAAAA,EACb,OAAOD,MAAME,KAAAA,EAEb+C,iBAAiB;YAAA;QACnB;IAAA;IAGF,SAASzL,eAAesM,eAAAA,EAAqC;QAC7CA,cAAAA;IAAAA;IAGhB,SAASC,aAAaC,aAAAA,EAAuB;QAC3CpB,YAAYoB,eACZf,iBAAiB;IAAA;IAGnB,SAASgB,UAAUC,QAAAA,EAAmC;QAC1CvV,OAAAA,UAAAA,IAAAA,CAAKuV,QAAQ,GAEhB,MAAM;YACLpE,MAAAA,MAAM2C,UAAU9T,IAAAA,CAAKuV,QAAQ;YAE/BpE,MAAM,CAAA,KACR2C,UAAUY,MAAAA,CAAOvD,KAAK,CAAC;QAE3B;IAAA;IAGK,OAAA;QAACrI;QAAUG;QAAQE;QAAOnC;QAAQ6B;QAAgBuM;QAAcE;IAAS;;IAGhF,SAAShB,mBAAmB;QAC1B,IAAI,CAACL,UAAW,CAAA;QAIhB,MAAMuB,YAA2B,CAAE,CAAA;QACnC,KAAA,MAAWzO,WAAWkM,SAChBlM,YAAYmC,mBACdsM,UAAU1C,OAAAA,CAAQ/L,OAAO;QAGzBmC,mBACFsM,UAAU1C,OAAAA,CAAQ5J,eAAe;QAGnC,MAAMuM,UAAU,aAAA,GAAA,IAAIvC,QAA+B,GAC7CO,MAAM+B,UAAUnd,MAAAA,EAChBqd,cAAcF,SAAAA,CAAU,CAAC,CAAA,EACzBG,iBAAAA,CAAkBlC,MAAM,CAAA,IAAKhN;QAEnC,IAAImP,eAAe3B,YAAY0B;QAE/B,KAAA,MAAW5O,WAAWyO,UAAW;YACzBhB,MAAAA,UAAUT,WAAW3d,GAAAA,CAAI2Q,OAAO;YAEtC,IAAI,CAACyN,SACH;YAGI/U,MAAAA,WAAW+U,QAAQlM,eAAAA,IAAmBkM,QAAQ/U,QAAAA,IAAYiH,wBAC1D+C,SAAS1C,YAAY2O,aAIrBG,gBAAgB7B,wBAAwB8B,GAAAA,CAAI/O,OAAO,GAEnDgP,gBAAgBtW,WAAWmW,cAE3B7M,YAAYU,SAAS,CAAA,IAAQoM,iBAAiBE,eAE9CC,aAAa9B,cAAc9d,GAAAA,CAAI2Q,OAAO;YAG5C0O,QAAQtC,GAAAA,CAAIpM,SAAS;gBACnBA;gBACAgC;gBACAT,iBAAiB0N,YAAY5F,SAASoE,QAAQlM,eAAAA;gBAC9CC,iBAAiByN,YAAY5F,SAASoE,QAAQjM,eAAAA;gBAC9CC,MAAMwN,YAAYxN,QAAQgM,QAAQhM,IAAAA,IAAQ;YAAA,CAC3C,GAGGO,YACF6M,gBAAgBnP,uBAEhBmP,gBAAgBnW,WAAWgH;QAAAA;QAI/B,MAAMlM,QAAoB,CAAE,CAAA;QAE5B,KAAA,MAAWwM,WAAWkM,SAAU;YACxBgD,MAAAA,OAAOR,QAAQrf,GAAAA,CAAI2Q,OAAO;YAE5BkP,QAAM1b,MAAMyF,IAAAA,CAAKiW,IAAI;QAAA;QAG3B,KAAA,MAAWV,YAAYzB,UACZ,SAAA;YACP5K,iBAAiBA,mBAAmB+J,QAAAA,CAASA,SAAS5a,MAAAA,GAAS,CAAC,CAAA,IAAK;YACrEkC;YACA6Z;QAAAA,CACD;IAAA;AAGP;AC9OO,SAAA8B,WAAAvgB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA;IAAA0G,IAAAA,UAAAkD,UAAA0W,YAAAC,UAAA/N;IAAAzS,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAKL,EAAA4G,QAAAA,EAAAkD,QAAAA,EAAA0W,UAAAA,EAAAC,QAAAA,EAAA,GAAA/N,WAAAA,GAAiE1S,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,EAAAA,GAAAugB,YAAAvgB,CAAAA,CAAAA,EAAAA,GAAAwgB,UAAAxgB,CAAAA,CAAAA,EAAAA,GAAAyS,SAAAA,IAAAA,CAAA9L,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAA6J,WAAA7J,CAAAA,CAAA,CAAA,CAAA,EAAAugB,aAAAvgB,CAAAA,CAAA,CAAA,CAAA,EAAAwgB,WAAAxgB,CAAAA,CAAA,CAAA,CAAA,EAAAyS,YAAAzS,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAM,IAAAM;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACrChC,KAAAqd,2BAAAA,GAA4Bje,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAA5BM;IAAjC6f,MAAAA,aAAmBngB,IACnB,CAAA0S,aAAAC,cAAA,CAAA,6MAAsChD,WAAAA,EAAAA,IAAoC,GAE1EuK,QADiBH,sKAAAA,EAAerH,WAAW,GACrBwH,SAAY,GAClCrH,YAAkBqH,UAAK7Q,KAAAA,KAAc,CAAKE,WAAQF,KAAAA,IAAe6Q,QAAQ3Q;IAAQ7I,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAC7B5B,KAAA;QAAAsS,iBAAA;QAAA3O,OAAA,CAAA,CAAA;QAAA6Z,UAAA,CAAA;IAAA,GAInDxe,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,CAAA4E,QAAA8b,QAAA,CAAA,6MAA0BzQ,WAAAA,EAA0BjP,EAInD;IAAC,IAAAC,IAAA4B;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAgT,cAAAA,CAGQ/R,KAAAA,IAAMwf,WAAUxN,cAAAA,CAAgBD,WAAW,GAAGnQ,KAAA;QAAC4d;QAAYzN,WAAW;KAAA,EAAChT,CAAAA,CAAAA,EAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,CAAA5B,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAAA6C,KAAA7C,CAAAA,CAAA,EAAA,CAAA,GAAjF2Q,sNAAAA,EAAU1P,IAA8C4B,EAAyB;IAAC,IAAAC,IAAAoB;IAAAlE,CAAAA,CAAAA,GAAAA,KAAAwa,QAAAA,CAGxE1X,KAAAA,IAAM2d,WAAUjB,YAAAA,CAAchF,KAAK,GAAGtW,KAAA;QAACuc;QAAYjG,KAAK;KAAA,EAACxa,CAAAA,CAAAA,GAAAA,GAAAwa,OAAAxa,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,CAAApB,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAAkE,KAAAlE,CAAAA,CAAA,EAAA,CAAA,6MAAnE2Q,YAAAA,EAAU7N,IAAsCoB,EAAmB;IAAC,IAAAiC,IAAAC;IAAApG,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAG1DuD,KAAAA,IAAMsa,WAAUf,SAAAA,CAAWgB,QAAQ,GAAGta,KAAAA;QAACqa,UAAU;KAAA,EAACzgB,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,CAAAD,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAAAoG,KAAApG,CAAAA,CAAA,EAAA,CAAA,OAA5D2Q,kNAAAA,EAAUxK,IAAsCC,EAAY;IAAC,IAAAG,KAAAF;IAAArG,CAAAA,CAAAmT,EAAAA,CAAAA,KAAAA,aAAAnT,CAAAA,CAAAA,GAAAA,KAAAugB,cAAAvgB,CAAAA,CAAA,EAAA,CAAA,KAAAwgB,WAAAA,CAGnDna,KAAAA,MAAA;QACJ8M,cAASxJ,KAAAA,KAAAA,CACTwJ,aAAaoN,cAAYA,WACzB,GAAA,CAACpN,aAAaqN,YAAUA,UAAAA;IAAS,GACpCja,MAAC4M;QAAAA;QAAWoN;QAAYC,QAAQ;KAAA,EAACxgB,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,GAAAA,GAAAugB,YAAAvgB,CAAAA,CAAAA,GAAAA,GAAAwgB,UAAAxgB,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,CAAAE,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAAAqG,KAAArG,CAAAA,CAAA,EAAA,CAAA,6MAJpC2Q,YAAAA,EAAUtK,IAIPE,GAAiC;IAAC,IAAAE,KAAAoC;IAAA7I,CAAAA,CAAAA,GAAAA,KAAAmT,aAAAnT,CAAAA,CAAA4E,EAAAA,CAAAA,KAAAA,OAAA0O,eAAAA,IAAAtT,CAAAA,CAAA4E,EAAAA,CAAAA,KAAAA,OAAAD,KAAAA,IAAA3E,CAAAA,CAAA4E,EAAAA,CAAAA,KAAAA,OAAA4Z,QAAAA,GAAAA,CAI5B3V,MAAA;QAAAqK,UACKuN,WAAUvN,QAAAA;QAAAC;QAAAE,QAEZoN,WAAUpN,MAAAA;QAAAC,iBACD1O,OAAK0O,eAAAA;QAAAC,OACfkN,WAAUlN,KAAAA;QAAA5O,OACVC,OAAKD,KAAAA;QAAAyM,QACJqP,WAAUrP,MAAAA;QAAAoN,UACR5Z,OAAK4Z,QAAAA;IAChBxe,GAAAA,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAA,EAAA,CAAA,GAAA4E,OAAA0O,eAAAA,EAAAtT,CAAAA,CAAA,EAAA,CAAA,GAAA4E,OAAAD,KAAAA,EAAA3E,CAAAA,CAAA,EAAA,CAAA,GAAA4E,OAAA4Z,QAAAA,EAAAxe,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA,EAAAyG,MATMoC;IADT,MAAA8X,aAA2Cla,KAmBrB0C,MAAAgK,YAAY,KAAExJ,KAAAA,GAEfP,MAAAxE,OAAK4Z,QAAAA,GAAY,KAAE7U,KAAAA,GAGpBN,MAAAmR,QAAQ,KAAE7Q,KAAAA;IAAYL,IAAAA;IAAAtJ,CAAAA,CAAA2G,EAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAA,EAAA,CAAA,KAAAyS,aAAAzS,CAAAA,CAAAmJ,EAAAA,CAAAA,KAAAA,OAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAAoJ,OAAApJ,CAAAA,CAAAA,GAAAA,KAAAqJ,MAAAA,CARtCC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAACyH,QACS;QAAA,WAAA;QACJ0B,GAAAA,SAAAA;QACY,kBAAAtJ;QAED,iBAAAC;QAGD,gBAAAC;QACT4J,KAAAA;QAEJtM;IACH,CAAA,GAAO3G,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAAAgK,IAAAA;IAAA,OAAAhK,CAAAA,CAAA2gB,EAAAA,CAAAA,KAAAA,cAAA3gB,CAAAA,CAAAA,GAAAA,KAAAsJ,MAAAA,CAbTU,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,kKAAA,CAAA,QAAA,EAAA;QAAmC2W,OAAAA;QACjCrX,UAAAA;IAaF,CAAA,GAA6BtJ,CAAAA,CAAAA,GAAAA,GAAA2gB,YAAA3gB,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA,EAd7BgK;AAc6B;AChF1B,SAAS4W,iBAAiBlK,IAAAA,EAA6D;IAC5F,OAAA,CAAQA,KAAKzP,IAAAA,KAAS,UAAUyP,KAAKzP,IAAAA,KAAS,OAAA,KAAYyP,KAAKmK,cAAAA;AACjE;AAEaC,MAAAA,0BAAsBC,2IAAAA,EAAOH,gBAAgB;AAEnD,SAASI,iBAAiBzb,MAAAA,EAKb;IACZ,MAAA,EAAC0b,eAAe,CAAE,CAAA,EAAEC,SAAAA,EAAWC,cAAAA,EAAAA,GAAkB5b,QAEjD4S,QAAyB,CAAE,CAAA;IAEjC,IAAIiJ,YAAY;IAEhB,IAAA,IAAStD,IAAI,GAAGA,IAAImD,aAAaxe,MAAAA,EAAQqb,KAAK,EAAG;QACzCL,MAAAA,IAAIwD,YAAAA,CAAanD,CAAC,CAAA;QAElB1T,MAAAA,IAAAA,CAAKiX,6BAA6B5D,GAAG,GAAGK,CAAC,CAAA,CAAA,EAAIL,EAAExW,IAAI,EAAE,CAAC;IAAA;IAG9Dma,aAAajJ,MAAM1V,MAAAA;IAEnB,MAAM6e,SAA2B,CAAE,CAAA;IAEnC,KAAA,MAAWC,aAAaJ,eACRG,OAAO7N,IAAAA,CAAM+N,CAAMA,IAAAA,EAAEzK,GAAAA,KAAQwK,UAAUjc,EAAE,KAGrDgc,OAAOlX,IAAAA,CAAK;QACVnD,MAAM;QACN8P,KAAKwK,UAAUjc,EAAAA;QAEfqB,UAAU,CAAE,CAAA;QACZmN,UAAU,CAAA;QACV+M,gBAAgB,CAAA;QAChBzf,OAAOmgB,UAAUngB,KAAAA;QACjBqgB,MAAMF,UAAUE,IAAAA;IAAAA,CACjB;IAIL,MAAMC,iBAAkC,CAAE,CAAA;IAE1C,IAAA,IAAS5D,IAAI,GAAGA,IAAIoD,UAAUze,MAAAA,EAAQqb,KAAK,EAAG;QACtCxV,MAAAA,OAAO4Y,SAAAA,CAAUpD,CAAC,CAAA;QAEpB6D,IAAAA,QAAQrZ,KAAKqZ,KAAAA,IAASL,OAAO7N,IAAAA,CAAM+N,CAAMA,IAAAA,EAAEzK,GAAAA,KAAQzO,KAAKqZ,KAAK;QAE7DrZ,KAAKqZ,KAAAA,IAAS,CAACA,SAAAA,CACjBA,QAAQ;YACN1a,MAAM;YACN8P,KAAKzO,KAAKqZ,KAAAA;YAEV7N,UAAU,CAAA;YACV9Q,MAAMsF,KAAKtF,IAAAA;YACX5B,OAAOkH,KAAKqZ,KAAAA;YACZhb,UAAU,CAAE,CAAA;YACZka,gBAAgB,CAAA;QAAA,GAElBS,OAAOlX,IAAAA,CAAKuX,KAAK,CAAA,GAGfA,QACFA,MAAMhb,QAAAA,CAASyD,IAAAA,CAAK;YAClBnD,MAAM;YACN8P,KAAK,GAAGqK,YAAYtD,CAAC,CAAA,KAAA,CAAA;YAErBvG,QAAQjP,KAAKsZ,QAAAA;YACb5e,MAAMsF,KAAKtF,IAAAA;YACXmU,QAAQ7O,KAAK6O,MAAAA;YACbQ,UAAUA,IAAMpS,OAAOsc,aAAAA,CAAcvZ,IAAI;YACzCuY,gBAAgBvY,KAAKwZ,YAAAA,IAAgB,CAAA;YACrChP,UAAUxK,KAAKwK,QAAAA;YACf1R,OAAOkH,KAAKlH,KAAAA;YACZqgB,MAAMnZ,KAAKmZ,IAAAA;YACXtR,MAAM7H,KAAK6H,IAAAA;QAAAA,CACZ,IAEDuR,eAAetX,IAAAA,CAAK;YAClBnD,MAAM;YACN8P,KAAK,GAAGqK,YAAYtD,CAAC,CAAA,KAAA,CAAA;YAErBvG,QAAQjP,KAAKsZ,QAAAA;YACb5e,MAAMsF,KAAKtF,IAAAA;YACXmU,QAAQ7O,KAAK6O,MAAAA;YACbQ,UAAUA,IAAMpS,OAAOsc,aAAAA,CAAcvZ,IAAI;YACzCuY,gBAAgBvY,KAAKwZ,YAAAA,IAAgB,CAAA;YACrChP,UAAUxK,KAAKwK,QAAAA;YACf1R,OAAOkH,KAAKlH,KAAAA;YACZqgB,MAAMnZ,KAAKmZ,IAAAA;YACXtR,MAAM7H,KAAK6H,IAAAA;QAAAA,CACZ;IAAA;IAIL,OAAO,CAAC;WAAGuR,gBAAgB;WAAGJ,QAAQ;WAAGnJ,KAAK;KAAA;AAChD;AAEA,SAASkJ,6BAA6B5D,CAAAA,EAAgC1G,GAAAA,EAA4B;IAC5F0G,OAAAA,EAAExW,IAAAA,KAAS,YACN;QACLA,MAAM;QACN8P;IAAAA,IAIA0G,EAAExW,IAAAA,KAAS,UACN;QACLA,MAAM;QACN8P;QAEApQ,UAAU8W,EAAE9W,QAAAA,CAAS6C,GAAAA,CAAI,CAACqN,OAAOkL,WAC/BV,6BAA6BxK,OAAO,GAAGE,GAAG,CAAA,CAAA,EAAIgL,QAAQ,CAAA,CAAA,EAAIlL,MAAM5P,IAAI,EAAE,CACxE;QACAiK,UAAUuM,EAAEvM,QAAAA;QACZ4C,UAAU2J,EAAE3J,QAAAA,IAAY,CAAA;QACxB9Q,MAAMya,EAAEza,IAAAA;QACR5B,OAAOqc,EAAErc,KAAAA;QACTqgB,MAAMhE,EAAEgE,IAAAA;QACRZ,gBAAgBpD,EAAEoD,cAAAA,IAAkB,CAAA;IAAA,IAIjC;QACL5Z,MAAM;QACN8P;QACAI,QAAQsG,EAAEtG,MAAAA;QACVjG,UAAUuM,EAAEvM,QAAAA;QACZlO,MAAMya,EAAEza,IAAAA;QACRyU,WAAWgG,EAAEhG,SAAAA;QACbE,UAAU8F,EAAE9F,QAAAA;QACZkJ,gBAAgBpD,EAAEoD,cAAAA,IAAkB,CAAA;QACpC/N,UAAU2K,EAAE3K,QAAAA;QACZ1R,OAAOqc,EAAErc,KAAAA;QACTqgB,MAAMhE,EAAEgE,IAAAA;QACRtR,MAAMsN,EAAEtN,IAAAA;IACV;AACF;AC5IO,MAAM6R,yNAAe5d,aAAAA,EAAW,SAAArE,KAAAA,EAAAsE,GAAAA,EAAA;IAAArE,MAAAA,gMAAAC,IAAAA,EAAA,EAAA;IAAA,IAAAkX,QAAA1E;IAAAzS,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAOrC,EAAAoX,MAAAA,EAAA,GAAA1E,WAAAA,GAA+B1S,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAmX,QAAAnX,CAAAA,CAAAA,EAAAA,GAAAyS,SAAAA,IAAAA,CAAA0E,SAAAnX,CAAAA,CAAA,CAAA,CAAA,EAAAyS,YAAAzS,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAM,IAAAM;IAAAZ,CAAAA,CAAAmX,CAAAA,CAAAA,KAAAA,OAAA5R,MAAAA,IAAAvF,CAAAA,CAAA,CAAA,CAAA,KAAAmX,OAAAlQ,IAAAA,GAAAA,CAKhCrG,KAAAwD,uNAAAA,EAAA,SAAAuD,SAAAA,EAAAsa,OAAAA,EAAA;QAKI,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,2JAAC,aAAA,EAAU;YAAA,GAAKta,SAAAA;YAAmB,QAAAwP,OAAMlQ,IAAAA;YAAe,QAAAkQ,OAAM5R,MAAAA;YAAc0c,KAAM;QAAK,CAAA;IAAA,CAE1F,GAACjiB,CAAAA,CAAA,CAAA,CAAA,GAAAmX,OAAA5R,MAAAA,EAAAvF,CAAAA,CAAA,CAAA,CAAA,GAAAmX,OAAAlQ,IAAAA,EAAAjH,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAPFM;IAHJ,MAAAshB,OAAa5hB;IAYZU,IAAAA;IAAA,OAAAhB,CAAAA,CAAAkiB,CAAAA,CAAAA,KAAAA,QAAAliB,CAAAA,CAAAA,EAAAA,KAAAD,MAAAmR,QAAAA,IAAAlR,CAAAA,CAAAqE,CAAAA,CAAAA,KAAAA,OAAArE,CAAAA,CAAAA,EAAAA,KAAAyS,YAAAA,CAEMzR,KAAAjB,MAAKmR,QAAAA,GACV,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2LAAA,EAAWuB;QAAAA,GAAAA,SAAAA;QAAc,IAAA;QAAS,MAAA;QAAqB,iBAAA;IAAA,CAAS,IAEjE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2LAAA,EAAM;QAAA,GAAKA,SAAAA;QAAeyP,IAAG;QAAW,WAAA;QAAS;IAAA,CACnD,GAAAliB,CAAAA,CAAAA,EAAAA,GAAAkiB,MAAAliB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAmR,QAAAA,EAAAlR,CAAAA,CAAAA,EAAAA,GAAAqE,KAAArE,CAAAA,CAAAA,EAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAJMgB;AAIN,CACF;ACnBM,SAAAmhB,sCAAA7hB,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAA+C,EAAAmiB,MAAAA,EAAAlZ,OAAAA,EAAA6Q,OAAAA,EAAApT,QAAAA,EAAAA,GAAArG,IAMpD+hB,eAAoBC,4KAAAA,KACpB,EAAA5hB,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAAC,IAAA,CAE/C4iB,QAAM;QAAAxhB,IAAAA;QAAA,OAAAZ,CAAAA,CAAAA,EAAAA,KAAA2G,WAAAA,CACF/F,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA;YAAA;QAAA,CAAW,GAAIZ,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAfY;IAAAA;IAAeA,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAkJ,WAAAlJ,CAAAA,CAAAqiB,CAAAA,CAAAA,KAAAA,eAAAriB,CAAAA,CAAA+Z,CAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAMlBE,KAAAmZ,UACErZ,EAAE,uDAAuD,IAEzD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,iCAAA,EAAwCwI;QAAAA;QAAsBmZ;IAAAA,CAChE,GAAAriB,CAAAA,CAAAA,EAAAA,GAAAkJ,SAAAlJ,CAAAA,CAAAA,EAAAA,GAAAqiB,aAAAriB,CAAAA,CAAAA,EAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA2G,WAAAA,CAMH3F,KAAqB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;QAAR;IAAA,CAAE,GAAMhB,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAA,OAAAjB,CAAAA,CAAAY,CAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAAgB,KAAAA,CAZvBC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,4LAAA,EAAA;QAEG,SAAAL;QAMF,QAAA,CAAA;QAIAI,UAAAA;IACF,CAAA,GAAUhB,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAbViB;AAaU;ACrBd,MAAMshB,gBAA8B;IAClClM,eAAe,CAAA;IACfC,WAAW;IACXC,QAAQ,CAAA;AACV,GAEMiM,YAAYA,CAChBpiB,QACAqiB,WACAna,SACiC;IAC3Boa,MAAAA,WAAWD,UAAUhP,IAAAA,CAAM/S,CAAAA,IAAMA,EAAE4E,EAAAA,KAAOgD,KAAKqa,UAAU,GAAGliB;IAC9D,IAAA,CAACiiB,SAAiB,CAAA,OAAA;IAEtB,MAAME,aAAa;QACjB7b,UAAUuB,KAAKqa,UAAAA;QACf1b,MAAMyb;QACNpd,IAAIgD,KAAKua,iBAAAA;IACX;IAEO,OAAA;QACL5b,MAAM;QACN1B,QAAQ+C,KAAKwa,UAAAA,GAAa;YAACF;YAAYta,KAAKwa,UAAU;SAAA,GAAIF;IAC5D;AACF;AAMO,SAAAG,uBAAAziB,EAAAA,EAAA;IAAAN,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAAgC,EAAA+iB,aAAAA,EAAAA,GAAA1iB,IACrCF,qKAAeC,YAAAA,CACfoiB,IAAAA,wKAAkBQ,eAAAA,KAElB,EAAAviB,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAAgjB,CAAAA,CAAAA,KAAAA,iBAAAhjB,CAAAA,CAAAA,EAAAA,KAAAyiB,YAAAA,CACjB7hB,KAAA,CAAA;WAAIoiB,eAAa;WAAKP,SAAS;KAAA,EAACziB,CAAAA,CAAAA,EAAAA,GAAAgjB,eAAAhjB,CAAAA,CAAAA,EAAAA,GAAAyiB,WAAAziB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAnE2W,MAAAA,0KAAoBC,iBAAAA,EAAehW,EAAgC;IAACI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAgjB,gBAAAA,CAEehiB,KAAA;QAAAgiB;IAAA,GAElFhjB,CAAAA,CAAAA,EAAAA,GAAAgjB,eAAAhjB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAA,CAAAkjB,qBAAAC,4BAAA,CAAA,+JAA4DC,yBAAAA,EAAuBpiB,EAElF;IAACC,IAAAA;IAGAA,KACE,CAACkiB,gCACDD,qBAAmBG,MAAAtZ,OAAA;IAHvB,MAAAuZ,iBAAuBriB;IAKgC4B,IAAAA;IAAA,KAAA;QAAA,IAAA,CAGhDqgB,qBAAmB;YAAApgB,IAAAA;YAAA9C,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAASE,MAAA,CAAE9C,GAAAA,CAAAA,CAAAA,EAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,CAAA,CAAA,EAAT6C,KAAOC;YAAE0R,MAAAA;QAAAA;QAAA1R,IAAAA;QAAA9C,CAAAA,CAAAA,EAAAA,KAAAkjB,sBAAAA,CAC5BpgB,MAAAogB,oBAAmBK,MAAAA,CAAA7U,UAAAA,CAM1B,CAAA,GAAC1O,CAAAA,CAAAA,EAAAA,GAAAkjB,qBAAAljB,CAAAA,CAAAA,EAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,CAAA,CAAA,EAND6C,KAAOC;IAAAA;IAFT,MAAA0gB,kBAAwB3gB;IASC,IAErBygB,gBAAc;QAAAxgB,IAAAA;QAAA9C,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAQEoC,MAAApC,EAAE,gDAAgD,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,CAAA,CAAA;QAAAkE,IAAAA;QAAAlE,CAAAA,CAAAA,GAAAA,KAAA8C,MAAAA,CADjEoB,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EACa;YAAA,cAAApB;YACN2gB,yJAAAA,UAAAA;YACM,eAAA;YACZ,UAAA,CAAA;YACK,MAAA;YAES,cAAA;QACd,CAAA,GAAAzjB,CAAAA,CAAAA,GAAAA,GAAA8C,KAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,GAAAA,IAAAA,MAAAlE,CAAAA,CAAA,EAAA,CAAA;QAAAmG,IAAAA;QAAA,OAAAnG,CAAAA,CAAAmjB,EAAAA,CAAAA,KAAAA,gCAAAnjB,CAAAA,CAAAA,GAAAA,KAAAkE,MAAAA,CAbJiC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,uCACS;YAAA,SAAA;YACR,QAAK,CAAA;YACIgd,SAAAA;YAETjf,UAAAA;QASF,CAAA,GAAwClE,CAAAA,CAAAA,GAAAA,GAAAmjB,8BAAAnjB,CAAAA,CAAAA,GAAAA,GAAAkE,KAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,GAAAA,IAAAA,MAAAnG,CAAAA,CAAA,EAAA,CAAA,EAdxCmG;IAAAA;IAkBA6c,IAAAA,cAAavgB,MAAAA,KAAa,GAAA;QAC5BihB,MAAAA,YAAkBV,aAAAA,CAAa,CAAA,CAAA,EAE/B9R,WAAA,CADoBsS,eAAAA,CAAgBE,UAASpe,EAAA,CAAA,EAChBqe;QAAS7gB,IAAAA;QAAA9C,CAAAA,CAAA0jB,EAAAA,CAAAA,KAAAA,aAAA1jB,CAAAA,CAAAA,GAAAA,KAAAI,UAAAJ,CAAAA,CAAA,EAAA,CAAA,KAAAyiB,YAAAA,CACvB3f,MAAA0f,UAAUpiB,QAAQqiB,WAAWiB,SAAS,GAAC1jB,CAAAA,CAAAA,GAAAA,GAAA0jB,WAAA1jB,CAAAA,CAAAA,GAAAA,GAAAI,QAAAJ,CAAAA,CAAAA,GAAAA,GAAAyiB,WAAAziB,CAAAA,CAAAA,GAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,EAAA,CAAA;QAAtD,MAAAmX,SAAerU;QAAuC,IAAA,CACjDqU,QAAM,OAAA;QAAAjT,IAAAA;QAAAlE,CAAAA,CAAA0jB,EAAAA,CAAAA,KAAAA,aAAA1jB,CAAAA,CAAAA,GAAAA,KAAA2W,cAAAA,CASOzS,MAAAyS,YAAY+M,SAAS,GAAC1jB,CAAAA,CAAAA,GAAAA,GAAA0jB,WAAA1jB,CAAAA,CAAAA,GAAAA,GAAA2W,aAAA3W,CAAAA,CAAAA,GAAAA,GAAAkE,GAAAA,IAAAA,MAAAlE,CAAAA,CAAA,EAAA,CAAA;QAC5BmG,MAAAA,MAAAud,UAAS1gB,IAAAA,uJAAAygB,UAAAA;QAAgBrd,IAAAA;QAAApG,CAAAA,CAAAkR,EAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAKjB0F,MAAA8K,WAAQ,OAAA;YAAA5G,SAAoB5J,EAAE,uCAAuC;QAAEV,GAAAA,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA;QAAAqG,IAAAA;QAAArG,CAAAA,CAAAA,GAAAA,KAAAkR,YAAAlR,CAAAA,CAAAmX,EAAAA,CAAAA,KAAAA,UAAAnX,CAAAA,CAAA,EAAA,CAAA,KAAAkE,IAAA9C,KAAAA,IAAApB,CAAAA,CAAA,EAAA,CAAA,KAAAmG,OAAAnG,CAAAA,CAAAA,GAAAA,KAAAoG,MAAAA,CAPvFC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,cACa;YAAA,cAAAnC,IAAsB9C,KAAAA;YAC5B,MAAA+E;YACEgR;YACH,MAAA;YACKjG;YACE,eAAA;YACE,cAAA9K;QACd,CAAA,GAAApG,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAAmX,QAAAnX,CAAAA,CAAA,EAAA,CAAA,GAAAkE,IAAA9C,KAAAA,EAAApB,CAAAA,CAAAA,GAAAA,GAAAmG,KAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,KAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,GAAAA,IAAAA,MAAArG,CAAAA,CAAA,EAAA,CAAA;QAAAuG,IAAAA;QAAA,OAAAvG,CAAAA,CAAAkR,EAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAAA,GAAAA,KAAAmjB,gCAAAnjB,CAAAA,CAAA,EAAA,CAAA,KAAAqG,MAAAA,CAbJE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,uCAAA;YACS2K,QAAO;YACNiS,SAAAA;YACD,SAAA;YAER9c,UAAAA;QASF,CAAA,GAAwCrG,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAAmjB,8BAAAnjB,CAAAA,CAAAA,GAAAA,GAAAqG,KAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAdxCuG;IAAAA;IAcwCzD,IAAAA;IAAA9C,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAWZoC,KAAApC,EAAE,uCAAuC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CAJpEoB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,SAAA,EACOuf;QAAAA,MAAAA,kJAAAA,CAAAA,UAAAA;QACD,MAAA;QACO,eAAA;QACE,cAAA;YAAAnZ,SAAUxH;QACxB;IAAA,CAAA,GAAA9C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,IAAAA,CAAAA,CAAA2W,EAAAA,CAAAA,KAAAA,eAAA3W,CAAAA,CAAAmjB,EAAAA,CAAAA,KAAAA,gCAAAnjB,CAAAA,CAAAwjB,EAAAA,CAAAA,KAAAA,mBAAAxjB,CAAAA,CAAAA,GAAAA,KAAAI,UAAAJ,CAAAA,CAAA,EAAA,CAAA,KAAAU,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAgjB,iBAAAhjB,CAAAA,CAAA,EAAA,CAAA,KAAAyiB,WAAA;QAAArc,IAAAA;QAAApG,CAAAA,CAAAA,GAAAA,KAAA2W,eAAA3W,CAAAA,CAAAmjB,EAAAA,CAAAA,KAAAA,gCAAAnjB,CAAAA,CAAAwjB,EAAAA,CAAAA,KAAAA,mBAAAxjB,CAAAA,CAAA,EAAA,CAAA,KAAAI,UAAAJ,CAAAA,CAAAA,GAAAA,KAAAU,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAyiB,YAAAA,CAKmBrc,MAAAA,CAAAkC,MAAAsb,cAAA;YAEjBC,MAAAA,aAAA,CADoBL,eAAAA,CAAgBlb,KAAIhD,EAAA,CAAA,EACXqe,SAC7BG,WAAetB,UAAUpiB,QAAQqiB,WAAWna,IAAI,GAChDvB,WAAiB0b,UAAShP,IAAAA,CAAAqK,CAAAA,IAAaA,EAACxY,EAAAA,KAAQgD,KAAIqa,UAAW;YAC3D,IAAA,CAAC5b,YAAQ,CAAKoQ,UAAM,OAAA;YAExB,MAAA+K,iNAAa9d,aAAAA,EAAAuD,CAAAA,WAAAsa,UACX/Q,aACgE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;oBAAjD,MAAA;oBAAS,UAAA,CAAA;oBAAQ,GAAKvJ,SAAAA;oBAAgBsa,KAAM;gBAAA,KAEzD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,2JAAC,aAAA,EAAU;oBAAA,GACLta,SAAAA;oBACI,QAAAwP,SAAMlQ,IAAAA;oBACN,QAAAkQ,SAAM5R,MAAAA;oBACT0c,KAAAA;gBAAO,CAAA,CAGlB;YAEAC,KAAIzM,WAAAA,GAAe;YAEnB,MAAA,EAAArU,KAAAA,EAAAA,GAAgBuV,YAAW;gBAAA,GACtBrO,IAAAA;gBAAIlH,OAEAkH,KAAIlH,KAAAA,IAAUuV,YAAY5P,QAAQ,EAAC3F,KAAAA;YAAAA,CAC3C;YAAC,OAGC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,uCAAA;gBACS,SAAA;gBAEA8P,QAAO;gBACNiS,SAA2B;gBAEpC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,6LAAA,EACKjB;oBAAAA,IAAG;oBACE,WAAAhR,aAAW,WAAW;oBACzB9P,MAAI;oBAER,cAAA8P,aAAWxQ,EAAE,gDAAgD,IAAIU;oBAEzD8P,UAAAA;oBACG,eAAA,CAAA,qBAAA,EAAwB0S,SAAS,EAAA;gBAElD,CAAA;YAAA,GAdOtb,KAAIhD,EAcX;QAEHtF,GAAAA,CAAAA,CAAAA,GAAAA,GAAA2W,aAAA3W,CAAAA,CAAAA,GAAAA,GAAAmjB,8BAAAnjB,CAAAA,CAAAA,GAAAA,GAAAwjB,iBAAAxjB,CAAAA,CAAAA,GAAAA,GAAAI,QAAAJ,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAyiB,WAAAziB,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA,EA/CAmG,KAAA6c,cAAaxZ,GAAAA,CAAKpD,GA+ClB,GAACpG,CAAAA,CAAAA,GAAAA,GAAA2W,aAAA3W,CAAAA,CAAAA,GAAAA,GAAAmjB,8BAAAnjB,CAAAA,CAAAA,GAAAA,GAAAwjB,iBAAAxjB,CAAAA,CAAAA,GAAAA,GAAAI,QAAAJ,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAgjB,eAAAhjB,CAAAA,CAAAA,GAAAA,GAAAyiB,WAAAziB,CAAAA,CAAAA,GAAAA,GAAAmG;IAAA,OAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAAA,GAAAA,KAAAmG,KAAAA,CAhDJC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;QACED,UAgDH;IAAA,CAAA,GAAOnG,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAA,OAAArG,CAAAA,CAAAkE,EAAAA,CAAAA,KAAAA,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CA5DXC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,aAAA,EAEG;QAAA,QAAAnC;QAOC,IAAA;QAED,MAAAkC;QAmDOmc,SAAYA;IAAAA,CACrB,GAAAviB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA,EA/DFqG;AA+DE;AA3IC,SAAAqI,SAAAqV,GAAAA,EAAAC,YAAAA,EAAA;IAsBKC,OAAAA,GAAAA,CAAAA,aAAU3e,EAAA,CAAA,GAAO2e,cACdF;AAAG;AAvBX,SAAAha,QAAAka,UAAAA,EAAA;IAAA,OAc2CA,CAAAA,WAAUN,OAAAA;AAAA;ACpD5D,SAASO,cAAiBrjB,KAAAA,EAAmC;IAC3D,OAAOA,SAAU;AACnB;AAKA,MAAMsjB,aAActjB,CAAmB,UAAA;IACrC,MAAMujB,aAAcC,CAAAA,IACd,OAAOA,KAAM,YAAY,CAACA,IAAUA,IACpCjW,MAAMkW,OAAAA,CAAQD,CAAC,IAAUA,EAAE7a,GAAAA,CAAI4a,UAAU,IACtCG,OAAOC,OAAAA,CAAQH,CAAC,EAAE7V,IAAAA,CAAK,CAAC,CAACiW,IAAI,CAAA,EAAG,CAACC,IAAI,CAAA,GAAMD,KAAKE,aAAAA,CAAcD,MAAM,IAAI,CAAC;IAKlF,OAAOE,KAAKC,SAAAA,CAAUT,WAAAA,CAFHC,CAAAA,IAAeO,KAAKE,KAAAA,CAAMF,KAAKC,SAAAA,CAAUR,CAAC,CAAC,CAAA,EAEnBxjB,KAAK,CAAC,CAAC;AACpD,GASakkB,wBAAoBC,6MAAAA,EAAK,SAA2BjlB,KAAAA,EAA+B;IACxF,MAAA,EACJklB,2BAA2BC,iMAAyC/d,cAAAA,EACpE+Z,oKAAY/Z,cAAAA,EACZga,wKAAiBha,eAAAA,EACjBge,yKAAiBC,eAAAA,EAAAA,GACfrlB,OAEE0iB,wKAAYQ,eAAAA,KAEZoC,eAAeC,wNAAAA,EAClBhd,CAAuB,SAAA;QACtB,IAAI,OAAOA,KAAKN,MAAAA,IAAW,YAAY,CAAA,CAAEM,KAAKN,MAAAA,IAAUmd,cAAAA,GACtDI,OAAAA,QAAQrK,IAAAA,CAAK,0BAA0B5S,KAAKN,MAAM,GAC3C,CAAA;QAGHwd,MAAAA,UAAAA,6CAAAA;QAEJ,OAAOld,KAAKN,MAAAA,IAAW,aACnBM,KAAKN,MAAAA,GACL,OAAOM,KAAKN,MAAAA,IAAW,WACrBmd,cAAAA,CAAe7c,KAAKN,MAAM,CAAA,GAC1B;QAER,OAAIwd,UAAAA,CACFA,QAAQld,KAAK/C,MAAgC,GACtC,CAAA,CAAA,IAGF,CAAA;IAAA,GAET;QAAC4f,cAAc;KACjB,GAEMM,sNAAYC,UAAAA,EAChB,IACE1E,iBAAiB;YACfa,eAAewD;YACflE;YACAD,WAAWA,UAGRpX,MAAAA,CAAQxB,CAAAA,SAASA,OAAK6O,MAAAA,EAAQlQ,SAAS,QAAQ;QACnD,CAAA,GACH;QAACoe;QAAclE;QAAgBD,SAAS;KAC1C,GAEMyE,wNAAcD,UAAAA,EAAQ,IAAMD,UAAU3b,MAAAA,CAAO8W,gBAAgB,GAAG;QAAC6E,SAAS;KAAC,GAC3EG,6NAAmBF,UAAAA,EAAQ,IAAMD,UAAU3b,MAAAA,CAAOgX,mBAAmB,GAAG;QAAC2E,SAAS;KAAC,GAEnFI,wCAAwCH,oNAAAA,EAAQ,IAC7CxE,UACJ1X,GAAAA,CAAI,CAAClB,QAAMwd,kBAAkB;YAC5B,IAAIxd,OAAK6O,MAAAA,EAAQlQ,SAAS,SAAiB,CAAA,OAAA;YAErC,MAAA,EAAC1B,MAAAA,EAAAA,GAAU+C,OAAK6O,MAAAA;YAClB,IAAA,CAAC5R,OAAe,CAAA,OAAA;YAEdwgB,MAAAA,eAAe3X,MAAMkW,OAAAA,CAAQ/e,MAAM,IAAIA,MAAAA,CAAO,CAAC,CAAA,GAAIA,QACnDygB,iBAAiB5X,MAAMkW,OAAAA,CAAQ/e,MAAM,IAAIA,MAAAA,CAAO,CAAC,CAAA,GAAIoE,KAAAA,GAKrDgZ,aAAaoD,aAAahf,QAAAA,IAAYgf,aAAa9e,IAAAA;YACrD,IAAA,CAAC0b,WAAmB,CAAA,OAAA;YAGxB,MAAM5b,WAAW0b,UAAUhP,IAAAA,CAAM/S,CAAMA,IAAAA,EAAE4E,EAAAA,KAAOqd,UAAU;YAEtD,IAAA,CAAC5b,SAAiB,CAAA,OAAA;YAEtB,MAAM8b,oBAAoBkD,aAAazgB,EAAAA;YAEhC,OAAA;gBACLgD,MAAAA;gBACAvB;gBACAif;gBACAF;gBACAjD;YACF;QACD,CAAA,EACA/Y,MAAAA,CAAOoa,aAAa,EACpB1a,GAAAA,CAAI,CAAC,EAACqZ,mBAAAA,mBAAAA,EAAmBva,MAAAA,MAAAA,EAAMvB,UAAAA,UAAAA,EAAU+e,eAAAA,eAAAA,EAAeE,gBAAAA,gBAAAA,EAAAA,GAAAA,CACI;gBACzD1gB,IAAI,CAAA,QAAA,EAAWwgB,eAAa,EAAA;gBAC5BjD,mBAAAA;gBACAF,YAAY5b,WAASzB,EAAAA;gBACrB2B,MAAM;gBACN7F,OAAOkH,OAAKlH,KAAAA,IAAS2F,WAAS3F,KAAAA;gBAC9BqgB,MAAMnZ,OAAKmZ,IAAAA,IAAQ1a,WAAS0a,IAAAA;gBAC5Bze,MAAMsF,OAAKtF,IAAAA;gBACXijB,aAAalf,WAASkf,WAAAA;gBACtBnD,YAAYkD;gBACZvlB,YAAYsG,WAAStG,UAAAA;YAIxB,CAAA,CAAA,GACF;QAACygB;QAAWuB,SAAS;KAAC,GAEnByD,0OAAgCR,UAAAA,EAAQ,yIAErCS,UAAAA,EACL,CAAC;eAAGN,uCAAuC;eAAGX,sCAAsC;SAAA,EACnF5c,CAAAA,SAAS6b,WAAW;gBAAC7b,OAAKua,iBAAAA;gBAAmBva,OAAKqa,UAAAA;gBAAYra,OAAKwa,UAAU;aAAC,CACjF,GACC;QAAC+C;QAAuCX,sCAAsC;KAAC;IAGhF,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAK;QAAA,KAAK;QACRgB,UAAAA;YAAAA,8BAA8BzjB,MAAAA,GAAS,KACrC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wBAAA;gBAAuB,eAAeyjB;YAAAA,CACxC;YAEAP,YAAYnc,GAAAA,CAAKkN,CAChB,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,wBAAA;oBAAsC;gBAAVA,GAAAA,KAAKK,GAAgB,CACnD;YAEA6O,iBAAiBnjB,MAAAA,GAAS,KAAM,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,uBAAA;gBAAsB,OAAOmjB;YAAoB,CAAA;SAAA;IAAA,CACpF;AAEJ,CAAC;ACzJM,SAAAQ,kBAAArmB,KAAAA,EAAA;IAAAC,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GACL,EAAAS,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC,GACnD,EAAAyD,MAAAA,EAAApC,KAAAA,EAAAA,GAAwBd;IAAKO,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CASPtC,KAAA;QAAA+lB,MAAO;IAAA,GAAOrmB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAa,MAAAN,KAAAA,GAAAA,CAClBK,KAAA;QAAAiG,cAAehG,MAAKN,KAAAA;IAAOP,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAAa,MAAAN,KAAAA,EAAAP,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CALvCI,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;QACE,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,yJAAA,aAAA,EAAA;YACIN;YACK,SAAA;YACI,YAAAJ;YACJ,QAAAM;QAAAA,CAEZ;IAAA,CAAA,GAAKZ,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAMS3B,KAAA;QAAAolB,MAAO;IAAA,GAAOrmB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAAa,MAAA2C,GAAAA,GAAAA,CAClBX,KAAA;QAAA+D,YAAa/F,MAAK2C,GAAAA;IAAKxD,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAAa,MAAA2C,GAAAA,EAAAxD,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAJjCC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,yJAAA,aAAA,EAAA;QACIpC;QACK,SAAA;QACI,YAAAO;QACJ,QAAA4B;IAAAA,CACR,GAAA7C,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAA,OAAAlE,CAAAA,CAAAiD,EAAAA,CAAAA,KAAAA,UAAAjD,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAA8C,KAAAA,CAjBNoB,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,uBAAA,EAAA;QAEG,OAAAlD;QAUA,UAAA8B;QAQK,OAAAiH;QACC9G;IAAAA,CACR,GAAAjD,CAAAA,CAAAA,GAAAA,GAAAiD,QAAAjD,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EAtBFkE;AAsBE;AA3BC,SAAA6F,UAAA;IAAA,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,qJAyBa,qBAAA,EAAqB,CAAA,CAAA;AAAA;ACazBuc,SAAAA,oBACdtjB,IAAAA,EACAvC,UAAAA,EACA8lB,WAAAA,EAC4B;IAC5B,OAAIvjB,SAAS,CAAA,IACJ,CAAA,IAGFA,QAASvC,cAAcA,WAAWuC,IAAAA,IAASujB,eAAe,CAAA;AACnE;AAEO,SAAAC,SAAAzmB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAA+C,IAAAA,EAAAsC,EAAAA,EAAArC,QAAA3C,EAAAA,EAAAmmB,OAAAA,EAAAhmB,UAAAA,EAAAqS,QAAAA,EAAA1R,KAAAA,EAAAP,KAAAA,EAAA6lB,MAAAA,EAAAC,YAAAA,EAAAC,SAAAA,EAYI7mB,GAAAA,OATFkD,SAAA3C,OAAkBqJ,KAAAA,IAAT,YAATrJ,IAUFF,qKAAeC,YAAAA,CAAU,IACzBkD,mLAA6BkE,0BAAAA,CAAAA,IAC7B,EAAAxC,WAAAA,UAAAA,EAAAA,GAAoBiC,iBACpBK,+KAAyBC,sBAAAA,EAAoBlC,EAAE,GAC/CuhB,gBAAsBtY,CAAAA,CAAAA,CAAQ9N,cAAcA,WAAUiH,IAAAA,IAAStH,OAAMI,GAAAA,CAAKC,WAAUiH,IAAK,CAAA,GACzF,CAAAof,SAAAC,UAAA,CAAA,6MAA8B9W,WAAAA,EAAAA,CAAAA,CAAuB;IAACrP,IAAAA;IAAA,KAAA;QAGhDC,IAAAA,+JAASmmB,oBAAAA,EAAiBnmB,KAAK,GAAC;YAC9B,IAAA,CAACJ,cAAU,CAAKomB,eAAa;gBAAA7lB,IAAAA;gBAAAhB,CAAAA,CAAAA,EAAAA,KAAAa,QAAAA,CACxBG,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;oBAAyBH;gBAAS,CAAA,GAAAb,CAAAA,CAAAA,EAAAA,GAAAa,OAAAb,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAA1CY,KAAOI;gBAAmCwT,MAAAA;YAAAA;YAAAxT,IAAAA;YAAAhB,CAAAA,CAAAgD,CAAAA,CAAAA,KAAAA,QAAAhD,CAAAA,CAAAA,EAAAA,KAAAS,aAAAA,CAMlCO,MAAAslB,oBAAoBtjB,MAAMvC,+JAAUwmB,eAAc,GAACjnB,CAAAA,CAAAA,EAAAA,GAAAgD,MAAAhD,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA;YAAAiB,IAAAA;YAAAjB,CAAAA,CAAAA,EAAAA,KAAAuH,oBAAAvH,CAAAA,CAAAuD,CAAAA,CAAAA,KAAAA,wBAAAvD,CAAAA,CAAAiD,CAAAA,CAAAA,KAAAA,UAAAjD,CAAAA,CAAA,CAAA,CAAA,KAAAS,cAAAT,CAAAA,CAAAA,EAAAA,KAAAgB,OAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAAa,QAAAA,CAF3DI,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iBAAA;gBACuBsC;gBAChB,MAAAvC;gBACEiC;gBACIxC;gBACLI;gBACG0G,UAAAA;YACV,CAAA,GAAAvH,CAAAA,CAAAA,EAAAA,GAAAuH,kBAAAvH,CAAAA,CAAAA,EAAAA,GAAAuD,sBAAAvD,CAAAA,CAAAA,EAAAA,GAAAiD,QAAAjD,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA,EARJY,KACEK;YAQDuT,MAAAA;QAAAA;QAAAxT,IAAAA;QAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAOe5B,MAAA;YAAAkmB,SAAA;QAAA,GAAclnB,CAAAA,CAAAA,GAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,EAAA,CAAA;QAAAiB,IAAAA;QAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAA1B3B,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;YAAW,OAAAD;YACV,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAK,OAAI,CAAA;gBAAQ,MAAA;gBAChB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,sKAAA,EAAA,CAAA,CAAgB;YACnB,CAAA;QACF,CAAA,GAAMhB,CAAAA,CAAAA,GAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,EAAA,CAAA;QAAA6C,IAAAA;QAAA7C,CAAAA,CAAAgD,EAAAA,CAAAA,KAAAA,QAAAhD,CAAAA,CAAAA,GAAAA,KAAAS,aAAAA,CAEFoC,MAAAyjB,oBAAoBtjB,MAAMvC,+JAAU0mB,aAAY,GAACnnB,CAAAA,CAAAA,GAAAA,GAAAgD,MAAAhD,CAAAA,CAAAA,GAAAA,GAAAS,YAAAT,CAAAA,CAAAA,GAAAA,GAAA6C,GAAAA,IAAAA,MAAA7C,CAAAA,CAAA,EAAA,CAAA;QAAA8C,IAAAA;QAAA9C,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,OAAA7C,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CARzD0B,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,uBAAA,EAEG;YAAA,QAAA7B;YAMI,MAAA4B;YACC,QAAA;YACAzB;QACP,CAAA,GAAApB,CAAAA,CAAAA,GAAAA,GAAA6C,KAAA7C,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,EAAA,CAAA,EAZJY,KACEkC;IAAAA;IApBJ,MAAAskB,UAAgBxmB;IA0Cd,IAAAI,IAAAC;IAAAjB,CAAAA,CAAAiF,EAAAA,CAAAA,KAAAA,cAAAjF,CAAAA,CAAAA,GAAAA,KAAAsF,KAAAA,CAIErE,KAAA,SAAA0G,SAAAA,EAAA;QAAA,OACU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA1C,YAAA;YAAc0C,GAAAA,SAAAA;YAAoBrC,SAAC;QAAA,CAAK;IAAA,GACjDtF,CAAAA,CAAAA,GAAAA,GAAAiF,YAAAjF,CAAAA,CAAAA,GAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAAgB,KAFDC;IAFJ,MAAAihB,OAAalhB;IAMZ6B,IAAAA;IAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAE+BC,KAAA4H,CAAA,MAAA;QAAA,IAC1BA,EAAC4c,OAAAA,EAAA;YACHN,WAAAA,CAAAA,CAAgB;YAAC;QAAA;QAInBA,WAAAA,CAAAA,CAAe;IAAA,GAChB/mB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAPD,MAAA+X,cAAoBlV;IAOdC,IAAAA;IAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGIE,KAAAA,IAAMikB,WAAAA,CAAAA,CAAgB,GAAC/mB,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAA8S,WAAAA,CAAE5O,KAAAA;QAAC4O,QAAQ;KAAA,EAAC9S,CAAAA,CAAAA,GAAAA,GAAA8S,UAAA9S,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,4MAA7C2Q,YAAAA,EAAU7N,IAAyBoB,EAAU;IAI5B,MAAAiC,KAAa/E,CAAAA,UAAAA,EAAAA,KAAK,EAAA,EAE3BgF,KAAA8b,MAQM7b,KAAAyM,YAAYgU;IAAOvgB,IAAAA;IAAAvG,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAA0mB,UAAA1mB,CAAAA,CAAA,EAAA,CAAA,KAAA2mB,gBAAA3mB,CAAAA,CAAA,EAAA,CAAA,KAAA4mB,aAAA5mB,CAAAA,CAAAymB,EAAAA,CAAAA,KAAAA,WAAAzmB,CAAAA,CAAAonB,EAAAA,CAAAA,KAAAA,WAAApnB,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAoG,EAAAA,CAAAA,KAAAA,MAAApG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAX/BE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,cAAA,EAAA;QACc,eAAAJ;QACb,sBAAmB,CAAA;QACf,IAAAC;QACI,WAAA;QACAsgB;QACMC;QACHC;QACF7O,SAAU;QACV0O;QACD,QAAC;QACC,UAAApgB;QACH,QAAA;QACG,UAAA,CAAA;QACL,MAAA;QAEJ+gB,UACH;IAAA,CAAA,GAAcpnB,CAAAA,CAAAA,GAAAA,GAAA0mB,QAAA1mB,CAAAA,CAAAA,GAAAA,GAAA2mB,cAAA3mB,CAAAA,CAAAA,GAAAA,GAAA4mB,WAAA5mB,CAAAA,CAAAA,GAAAA,GAAAymB,SAAAzmB,CAAAA,CAAAA,GAAAA,GAAAonB,SAAApnB,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAjBduG;AAiBc;AC7IL+gB,MAAAA,wOAA8BtC,OAAAA,EAAKjlB,CAAA,UAAA;IAAAC,MAAAA,+LAAAC,KAAAA,EAAA,CAAA,GAC9C,EAAA0Z,OAAAA,EAAAhT,QAAAA,EAAA4gB,WAAAA,EAAAC,gBAAAA,EAAA7F,KAAAA,EAAAA,GAAkE5hB;IAAKO,IAAAA;IAAAN,OAAAA,CAAAA,CAAAunB,CAAAA,CAAAA,KAAAA,eAAAvnB,CAAAA,CAAA,CAAA,CAAA,KAAA2Z,WAAA3Z,CAAAA,CAAA2G,CAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAA,CAAA,CAAA,KAAA2hB,SAAA3hB,CAAAA,CAAAA,EAAAA,KAAAwnB,mBAAAA,CAGrElnB,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,yBAAA,EAAA;QACUknB,SAAe;QACjB7N,OAAAA;QACD4N,MAAU;QACT5F;QAEC;IACV,CAAA,GAAyB3hB,CAAAA,CAAAA,EAAAA,GAAAunB,aAAAvnB,CAAAA,CAAAA,EAAAA,GAAA2Z,SAAA3Z,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA2hB,OAAA3hB,CAAAA,CAAAA,EAAAA,GAAAwnB,kBAAAxnB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAPzBM;AAOyB,CAE5B;AACDgnB,4BAA4B7R,WAAAA,GAAc;AChB7BgS,MAAAA,uOAA6BzC,OAAAA,EAAKjlB,CAAA,UAAA;IAAAC,MAAAA,QAAAC,4LAAAA,EAAA,CAAA,GAC7C,EAAAynB,MAAAA,EAAA/gB,QAAAA,EAAAghB,UAAAA,EAAAA,GAAuC5nB;IAAKO,IAAAA;IAAA,OAAAN,CAAAA,CAAA2nB,CAAAA,CAAAA,KAAAA,cAAA3nB,CAAAA,CAAAA,EAAAA,KAAA0nB,UAAA1nB,CAAAA,CAAA,CAAA,CAAA,KAAA2G,WAAAA,CAG1CrG,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,yBAAA,EAAA;QACQonB,OAAAA;QACDC,MAAAA;QAAAA;IAGR,CAAA,GAAyB3nB,CAAAA,CAAAA,EAAAA,GAAA2nB,YAAA3nB,CAAAA,CAAAA,EAAAA,GAAA0nB,QAAA1nB,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EALzBM;AAKyB,CAE5B;AACDmnB,2BAA2BhS,WAAAA,GAAc;AC1BlC,SAAAmS,UAAA7nB,KAAAA,EAAA;IAAAC,MAAAA,KAAAC,+LAAAA,EAAA,EAAA,GASL,EAAA0G,QAAAA,EAAA+L,eAAAA,EAAAE,IAAAA,EAAA/I,QAAAA,EAAAge,OAAAA,EAAAzmB,OAAAd,EAAAA,EAAA6P,MAAAvP,EAAAA,EAAA,GAQIb,OAFFqB,QAAAd,OAAeqJ,KAAAA,IAAP,UAARrJ,IACA6P,OAAAvP,OAAiB+I,KAAAA,IAAV,aAAP/I;IAAiBI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CAWfJ,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC0Y,cAAAA;QAAkBtY;IAAAA,CAAS,GAAApB,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAA2G,WAAAA,CAC5B1F,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,aAAqB;QAAA,UAAA;QACpB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAc;YAAA,UAAA;YAAa,UAAA;YACzB0F;QACH,CAAA;IACF,CAAA,GAAc3G,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA,OAAA7C,CAAAA,CAAA0S,CAAAA,CAAAA,KAAAA,mBAAA1S,CAAAA,CAAA4S,CAAAA,CAAAA,KAAAA,QAAA5S,CAAAA,CAAA6J,CAAAA,CAAAA,KAAAA,YAAA7J,CAAAA,CAAAA,EAAAA,KAAA6nB,WAAA7nB,CAAAA,CAAA,CAAA,CAAA,KAAAgB,MAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAiB,MAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAAmQ,OAAAA,CAZhBtN,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAC,MAAA;QACkB6P;QACXE;QACFiV,IAAAA;QACMhe;QACJsG;QAENnP,UAAAA;YAAAA;YACAC;SAAAA;IAKF,CAAA,GAAOjB,CAAAA,CAAAA,EAAAA,GAAA0S,iBAAA1S,CAAAA,CAAAA,EAAAA,GAAA4S,MAAA5S,CAAAA,CAAAA,EAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,EAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAmQ,MAAAnQ,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAbP6C;AAaO;AC5BJ,SAASilB,gBAAgB/K,IAAAA,EAAyC;IACvE,MAAMgL,aAA6C;QACjD;YAAC1X,IAAI;YAAK2X,YAAY;QAAA;QACtB;YAAC3X,IAAI;YAAM2X,YAAY;QAAA,CAAuC;KAAA;IAGhE,4JAAIC,QAAAA,EAAO;QACT,MAAM/mB,UAAU;YACd;YACA;YACA6b,KAAKta,MAAAA,GAAS,IAAI,CAAA,gBAAA,EAAmBsa,KAAK9T,IAAAA,CAAK,UAAK,CAAC,EAAA,GAAK,EAAE;SAAA;QAG9D8e,WAAW3d,IAAAA,CAAK;YACdiG,IAAI;YACJnP,SAASA,QAAQ+H,IAAAA,CAAK,CAAA;AAAA,CAAI;QAAA,CAC3B;IAAA;IAGGif,MAAAA,sJAAMpb,MAAAA,EAAG,IAAI;IAEZqb,wJAAAA,QAAAA,CACL,IAAGJ,WAAWve,GAAAA,CAAK4e,CAAAA,YACjBF,IAAIpd,IAAAA,+JACFud,QAAAA,EACE,gBAAgBD,YACZ;YAACJ,YAAYI,UAAUJ,UAAAA;QAAAA,IACvB;YAAC9mB,SAASknB,UAAUlnB,OAAAA;QAC1B,CAAA,iKACAonB,QAAAA,EAAMF,UAAU/X,EAAE,CACpB,CACF,CACF;AACF;ACtBA,MACMkY,sBAAsB,mCAEtBC,4LAAUjnB,SAAAA,mJAAOa,OAAI,CAAA,CAAA;;;;;;;AAAA,CAAA,EAYdqmB,wNAAczD,OAAAA,EAAKjlB,CAAA,UAAA;IAAAC,MAAAA,KAAAC,+LAAAA,EAAA,EAAA,GAC9B,EAAAqoB,OAAAhoB,EAAAA,EAAAsS,IAAAA,EAAA1R,SAAAN,EAAAA,EAAAiJ,QAAAA,EAAAge,OAAAA,EAAA9K,IAAAA,EAAAjK,QAAAA,EAAA1R,KAAAA,EAAA+O,IAAAA,EAAA,GAUIpQ,OATFuoB,SAAAhoB,OAAWqJ,KAAAA,IAAAA,MAAXrJ,IAESooB,cAAA9nB,OAA6B+I,KAAAA,IAAAme,kBAA7BlnB,IASX,EAAAF,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACwB,IAAAA;IAAA,KAAA;QAG9C,IAAA,OAAO0nB,eAAgB,YAAU;YAAAznB,IAAAA;YAAAjB,CAAAA,CAAA0oB,CAAAA,CAAAA,KAAAA,eAAA1oB,CAAAA,CAAAA,EAAAA,KAAA+c,OAAAA,CAC5B9b,MAAAynB,YAAY3L,OAAOA,KAAIvF,KAAAA,CAAO,GAAG,IAAC,CAAA,CAAK,GAACxX,CAAAA,CAAAA,EAAAA,GAAA0oB,aAAA1oB,CAAAA,CAAAA,EAAAA,GAAA+c,MAAA/c,CAAAA,CAAAA,EAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA,EAA/CgB,KAAOC;YAAwCuT,MAAAA;QAAAA;QAG1CkU,KAAAA;IAAAA;IALT,MAAAC,kBAAwB3nB;IAMDC,IAAAA;IAAAjB,CAAAA,CAAA2oB,CAAAA,CAAAA,KAAAA,mBAAA3oB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAE6CO,KAAAA,IAC9D,OAAO0nB,mBAAoB,WAAiBA,kBACzCjoB,EAAC6nB,mBAAoB,GAC7BvoB,CAAAA,CAAAA,EAAAA,GAAA2oB,iBAAA3oB,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAA,CAAA4oB,gBAAAC,iBAAA,CAAA,6MAA4C5Y,WAAAA,EAAwBhP,EAGnE;IAAC,IAAA4B,IAAAC;IAAA9C,CAAAA,CAAA2oB,CAAAA,CAAAA,KAAAA,mBAAA3oB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAEQmC,KAAAA,MAAA;QAC+B,IAAnC,OAAO8lB,mBAAoB,YAC3B,OAAOA,gBAAejJ,SAAAA,IAAe,YAAU;QAEnDoJ,MAAAA,MAAYH,gBAAejJ,SAAAA,CAAAxe,CAAA,YAAA;YACzB2nB,kBAAkB,gBAAgB3nB,UAAUR,EAAEQ,QAAO8mB,UAAW,IAAI9mB,QAAOA,OAAQ;QAAA,CACpF;QAAC,OAAA,IAEW4nB,IAAGC,WAAAA,CAAa;IAC5BjmB,GAAAA,KAAA;QAAC6lB;QAAiBjoB,CAAC;KAAA,EAACV,CAAAA,CAAAA,EAAAA,GAAA2oB,iBAAA3oB,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,CAAAD,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAA8C,KAAA9C,CAAAA,CAAA,CAAA,CAAA,6MATvB2Q,YAAAA,EAAU9N,IASPC,EAAoB;IAEvB,MAAA,CAAAkmB,gBAAAC,iBAAA,CAAA,6MAA4ChZ,WAAAA,EAAAA,IAAoC,GAChF,CAAAiZ,SAAAC,UAAA,CAAA,GAA8BlZ,qNAAAA,EAAAA,CAAAA,CAAc;IAAC,IAAA/L,IAAAiC;IAAAnG,CAAAA,CAAAA,GAAAA,KAAAgpB,iBAAAA,CAEnC9kB,KAAAA,MAAA;QACH8kB,IAAAA,gBAAc,4JACZI,QAAAA,EAAA,IAAYD,WAAU,CAAA,CAAK,CAAC;IAAC,GACnChjB,KAAAA;QAAC6iB,cAAc;KAAA,EAAChpB,CAAAA,CAAAA,GAAAA,GAAAgpB,gBAAAhpB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,CAAAjC,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EAAAmG,KAAAnG,CAAAA,CAAA,EAAA,CAAA,6MAHnB2Q,YAAAA,EAAUzM,IAGPiC,EAAgB;IAKD,MAAAC,KAAA8iB,UAAU,KAAEvf,KAAAA,GAMItD,KAAAjF,SAASwnB;IAAcriB,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAArDE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,yJAAA,gBAAA,EAAA;QAAa,UAAA,CAAA;QAAgB,OAAAF;IAAAA,CAA2B,GAAArG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAR3DK,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA+hB,WAAAA;QACO,OAAA;QACQ,gBAAApiB;QACJ,WAAA;QACH,QAAA;QACC,SAAA;QACH6iB,KAAgB;QAErB1iB,UAAAA;IACF,CAAA,GAAUvG,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAVZ,MAAAsK,UACE7D;IAUDoC,IAAAA;IAAA7I,CAAAA,CAAAsK,EAAAA,CAAAA,KAAAA,WAAAtK,CAAAA,CAAAA,GAAAA,KAAAsoB,SAAAA,CAIGzf,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,aAAawgB;QAAAA,UAA8C/e;IAAQ,CAAA,GAActK,CAAAA,CAAAA,GAAAA,GAAAsK,SAAAtK,CAAAA,CAAAA,GAAAA,GAAAsoB,QAAAtoB,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAA,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAA4S,QAAA5S,CAAAA,CAAA6J,EAAAA,CAAAA,KAAAA,YAAA7J,CAAAA,CAAA6nB,EAAAA,CAAAA,KAAAA,WAAA7nB,CAAAA,CAAA,EAAA,CAAA,KAAA8S,YAAA9S,CAAAA,CAAAA,GAAAA,KAAA6I,OAAA7I,CAAAA,CAAA,EAAA,CAAA,KAAAmQ,OAAAA,CADpFhH,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAWyJ;QAAAA;QAAUiV,IAAAA;QAAmBhe;QAAoBiJ;QAAgB3C;QAC3EtH,UACF;IAAA,CAAA,GAAO7I,CAAAA,CAAAA,GAAAA,GAAA4S,MAAA5S,CAAAA,CAAAA,GAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,GAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,GAAAA,GAAA8S,UAAA9S,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmQ,MAAAnQ,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA,EAFPmJ;AAEO,CAEV;AAEDsf,YAAYhT,WAAAA,GAAc;ACnGnB,SAAA6T,kBAAA;IACLC,MAAAA,wNAAqB/kB,cAAAA,gJAAAglB,sBAA8B;IAAC,IAAA,CAE/CD,cAAYvkB,MAAAA,IAAAA,MACC,qCAAqC;IAGhDukB,OAAAA;AAAY;ACSd,SAAAE,gBAAA1pB,KAAAA,EAAA;IAAAC,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GACL,EAAA0G,QAAAA,EAAAC,UAAAA,EAAAC,YAAAA,EAAAA,GAA6C9G;IAAKO,IAAAA;IAAAN,CAAAA,CAAA2G,CAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAA,EAAAA,KAAA4G,cAAA5G,CAAAA,CAAA,CAAA,CAAA,KAAA6G,eAAAA,CAI9CvG,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,yBAAA;QAAoCsG;QAA0BC;QAAAA;IAAAA,CAE/D,GAA0B7G,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAA,OAAAZ,CAAAA,CAAA4G,CAAAA,CAAAA,KAAAA,cAAA5G,CAAAA,CAAAA,EAAAA,KAAA6G,gBAAA7G,CAAAA,CAAA,CAAA,CAAA,KAAAM,KAAAA,CAH5BM,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,0BAAA,EAAoCgG;QAAAA;QAA0BC;QAC7DvG,UAGF;IAAA,CAAA,GAA0BN,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAJ1BY;AAI0B;AAI9B,SAAA8oB,wBAAA3pB,KAAAA,EAAA;IAAAC,MAAAA,+LAAAC,KAAAA,EAAA,EAAA,GACE,EAAA0G,QAAAA,EAAAC,UAAAA,EAAAC,YAAAA,EAAAA,GAA6C9G,OAE7C,EAAAmZ,OAAAA,EAAA,+JAAkByQ,qBAAAA,KAClB,EAAAC,eAAAA,EAAAC,UAAAA,EAAAC,SAAAA,EAAAC,aAAAA,EAAA,GAAgET,mBAChE,EAAA/jB,MAAAA,EAAAykB,SAAAA,EAAAC,oBAAAA,EAAAA,GAAkD/iB,cAElDgjB,GAAAA,oBAA0B3kB,QAAM4kB,SAChCC,qNAAkBpW,UAAAA,EAAOzO,MAAM;IAAC,IAAAjF,IAAAM;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAuF,SAAAA,CAEhBjF,KAAAA,MAAA;QACd8pB,UAASnW,OAAAA,GAAW1O;IAAM,GACzB3E,KAAAA;QAAC2E,MAAM;KAAA,EAACvF,CAAAA,CAAAA,EAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,CAAAN,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAAY,KAAAZ,CAAAA,CAAA,CAAA,CAAA,GAFXqqB,4NAAAA,EAAgB/pB,IAEbM,EAAQ;IAACI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAiqB,uBAAAA,CAGVjpB,KAAAspB,CAAA,cAAA;QAKE,MAAAvN,OAAakN,qBAAoB;YAAA,GAC5BG,UAASnW,OAAAA;YAAAkW,SACHG;YAASC,iKAAAC,0BAAAA;QAAAA,CAEnB;QAAC,OACK,GAAAzY,OAAA0Y,QAAAA,CAAAC,MAAA,GAA4B3N,IAAI,EAAA;IAAE,GAC1C/c,CAAAA,CAAAA,EAAAA,GAAAiqB,sBAAAjqB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAZH,MAAA2qB,iBAAuB3pB;IActBC,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAgqB,YAAAA,CAE8C/oB,KAAAA,MAAA;QACpC,UAAA;YAAA,GAAKmpB,UAASnW,OAAAA;YAAAkW,SAAAxgB,KAAAA;QAAAA,CAA6B;IAAC,GACtD3J,CAAAA,CAAAA,EAAAA,GAAAgqB,WAAAhqB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAA4qB,6BAAmC3pB;IAEpB4B,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAA8pB,WAAApiB,QAAA1H,CAAAA,CAAAA,EAAAA,KAAA+pB,gBAAAA,CAEiClnB,KAAAA,MAAA;QAC1CinB,WAASpiB,iKAAA8iB,0BAAAA,IAEbT,sKAAaS,0BAAwB;IAAA,GACtCxqB,CAAAA,CAAA,CAAA,CAAA,GAAA8pB,WAAApiB,MAAA1H,CAAAA,CAAAA,EAAAA,GAAA+pB,eAAA/pB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA6qB,8BAAoChoB;IAIA,IAAA,CAG/BqW,SAAO;QAAApW,IAAAA;QAAA,OAAA9C,CAAAA,CAAAA,GAAAA,KAAA2G,WAAAA,CACH7D,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA;YAAA;QAAA,CAAW,GAAI9C,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAf8C;IAAAA;IAQW,MAAAA,KAAAgnB,WAASpiB,iKAAA8iB,0BAAAA,EACXtmB,KAAA0lB,oBAAoB;IAAYzjB,IAAAA;IAAAnG,OAAAA,CAAAA,CAAA2G,EAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAA,GAAAA,KAAA4G,cAAA5G,CAAAA,CAAA,EAAA,CAAA,KAAA6G,gBAAA7G,CAAAA,CAAAA,GAAAA,KAAA2qB,kBAAA3qB,CAAAA,CAAA4qB,EAAAA,CAAAA,KAAAA,8BAAA5qB,CAAAA,CAAAA,GAAAA,KAAA6qB,+BAAA7qB,CAAAA,CAAA,EAAA,CAAA,KAAA6pB,cAAA7pB,CAAAA,CAAAkqB,EAAAA,CAAAA,KAAAA,qBAAAlqB,CAAAA,CAAA,EAAA,CAAA,KAAA8C,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CALhDiC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,mBAAA,EAAA;QACaS;QACEC;QACE8jB;QACA,gBAAA7nB;QACF,cAAAoB;QACU0mB,wBAAAA;QACRC,gBAA0B;QAC9BhB;QACOK;QACT,WAAA;QACL,MAAA;QAEJvjB;IACH,CAAA,GAAmB3G,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,GAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,GAAAA,GAAA2qB,gBAAA3qB,CAAAA,CAAAA,GAAAA,GAAA4qB,4BAAA5qB,CAAAA,CAAAA,GAAAA,GAAA6qB,6BAAA7qB,CAAAA,CAAAA,GAAAA,GAAA6pB,YAAA7pB,CAAAA,CAAAA,GAAAA,GAAAkqB,mBAAAlqB,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAdnBmG;AAcmB;AC3FV2kB,MAAAA,SAAS,CAAA,GAETC,iBAAe,CAAA,GACfC,eAAeroB,OAAO,cAAc,GAEpCsoB,gCAAgC;ACFtC,SAAAC,mBAAA;IACLC,MAAAA,2NAAsB3mB,aAAAA,gJAAA4mB,uBAA+B;IAAC,IAAA,CAEjDD,gBAAanmB,MAAAA,IAAAA,MAAkB,sCAAsC;IAEnEmmB,OAAAA;AAAa;ACRf,MAAME,2BAA2B,KAC3BC,mCAAmC,KAEnCC,+BAA+B,KAC/BC,+BAA+B,KAE/BT,iBAA8D,CAAC,GAE/DU,wBAAwB,YAExBC,2BAAgD;IAAC;QAACpmB,IAAI;IAAY;IAAG;QAACA,IAAI;IAAO,CAAC;CAAA,EAGlFqmB,yBAAyB,4BACzBC,4BAA4B;ACDlC,SAASC,mCAAmC9rB,KAAAA,EAAgD;IAC3F,MAAA,EAAC6G,UAAAA,EAAYC,YAAAA,EAAcilB,YAAAA,WAAAA,EAAYC,WAAAA,EAAAA,GAAehsB,OAEtD8d,MAAMiO,YAAWrpB,MAAAA,EACjBupB,mNAAShY,SAAAA,EAAO6J,GAAG,GAEnB,CAACqD,WAAW+K,YAAY,CAAA,6MAAIhc,WAAAA,EAAsC,IACtE7B,MAAMC,IAAAA,CAAK,IAAID,MAAMyP,GAAG,CAAC,CAC3B,GAEMqO,wNAAelY,UAAAA,EAAOkN,SAAS;IAErCvQ,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACVqb,IAAAA,OAAO/X,OAAAA,KAAY4J,KAAK;YAC1B,MAAMsO,kBAAkB/d,MAAMC,IAAAA,CAAK,IAAID,MAAMyP,GAAG,CAAC;YAExCC,IAAAA,IAAAA,IAAI,GAAGA,IAAID,KAAKC,IACvBqO,eAAAA,CAAgBrO,CAAC,CAAA,GAAIoO,aAAajY,OAAAA,CAAQ6J,CAAC,CAAA;YAG7CkO,OAAO/X,OAAAA,GAAU4J,KAEjBoO,aAAa,IAAA,CACXC,aAAajY,OAAAA,GAAUkY,iBAChBA,eAAAA,CACR;QAAA;IACH,GACC;QAACtO,GAAG;KAAC;IAER,MAAMuO,wNAAc9G,cAAAA,EAAY,CAACrb,OAAeyM,SAAoC;QAClFuV,aAAcI,CAAS,SAAA;YACfC,MAAAA,OAAO,CAAC;mBAAGD,IAAI;aAAA;YACrBC,OAAAA,IAAAA,CAAKriB,KAAK,CAAA,GAAIyM,MACdwV,aAAajY,OAAAA,GAAUqY,MAChBA;QAAAA,CACR;IACH,GAAG,EAAE;IAEL3b,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACFuQ,YAAAA,UAAUpX,MAAAA,CAAOyE,OAAO,CAAC;IAAA,GACpC;QAAC2S;QAAW6K,WAAW;KAAC;IAErBQ,MAAAA,+NAAqB7G,UAAAA,EAAQ,IAC1BoG,YAAWtiB,GAAAA,CAAI,CAACsgB,WAAW7f,UACzB6f,UAAU0C,WAAAA,GACZ;gBACCC,iCAAiC;oBAC/B7lB;oBACAC;oBACAoD,OAAAA;oBACAmiB;oBACAI,aAAa1C,UAAU0C,WAAAA;gBACxB,CAAA;gBACD1C,UAAUpiB,IAAI;aAAA,GAEf;gBAAC,IAAM;gBAAM,EAAE;aACrB,GACA;QAACd;QAAYC;QAAcilB;QAAYM,WAAW;KAAC;IAEtD,OAEKG,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAAA,mOAAAA,EAAAA;QAAAA,UAAAA,mBAAmB/iB,GAAAA,CAAI,CAAC,CAACkjB,mBAAmB3V,GAAG,CAAA,GAAMA,OAAO,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,mBAAuBA,CAAAA,GAAAA,GAAI,CAAG;IAAA,CAC9F;AAEJ;AAEA,SAAS0V,iCAAiC,EACxC7lB,UAAAA,EACAC,YAAAA,EACAoD,KAAAA,EACAmiB,WAAAA,EACAI,aAAAA,YAAAA,EAOF,EAAG;IACD,iNAAOxH,OAAAA,EAAK,WAAA;QAAAhlB,MAAAA,KAAAC,+LAAAA,EAAA,CAAA;QAAAK,IAAAA;QAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACmBtC,KAAA;YAAAsG;YAAAC;QAAAA,GAG5B7G,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;QAHD,MAAA2sB,WAAiBH,aAAYlsB,EAG5B,GACDoW,OAAa7Q,wKAAAA,EAAU8mB,QAAQ;QAAC,IAAA/rB,IAAAI;QAAA,OAAAhB,CAAAA,CAAAA,EAAAA,KAAA0W,OAAAA,CAEtB9V,KAAAA,MAAA;YACRwrB,YAAAniB,OAAmByM,IAAI;QACtB1V,GAAAA,KAAAA;YAAC0V,IAAI;SAAA,EAAC1W,CAAAA,CAAAA,EAAAA,GAAA0W,MAAA1W,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,CAAAJ,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,CAAA,CAAA,6MAFT2Q,YAAAA,EAAU/P,IAEPI,EAAM,GAAC;IAAA,CAGX;AACH;ACrFO,SAAA4rB,mBAAA;IAAA5sB,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAA2pB,eAAAA,EAAAnpB,UAAAA,EAAAW,KAAAA,EAAAyrB,SAAAA,EAAAA,GAAwDvD,mBACxDnpB,gBAAsB0sB,WAASlpB,SAAWkpB,WAAShpB,WACnDipB,aAAmBve,CAAQpO,CAAAA;IAAcG,IAAAA;IAAAN,CAAAA,CAAAG,CAAAA,CAAAA,KAAAA,iBAAAH,CAAAA,CAAAA,EAAAA,KAAAS,cAAAT,CAAAA,CAAA,CAAA,CAAA,KAAA8sB,aAAAA,CAEFxsB,KAAA;QAAA4Y,SAC5B4T;QAAUrsB;QAAAI,OAEZV;IAAAA,GACRH,CAAAA,CAAAA,EAAAA,GAAAG,eAAAH,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAA8sB,YAAA9sB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,EAAAc,KAAAA,EAAAD,KAAAA,EAAAA,+JAAuBE,2BAAAA,EAAgBT,EAItC;IAEGspB,IAAAA,oBAAoB,gBAAY,CAAKkD,YAAU;QAAAlsB,IAAAA;QAAA,OAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAC1ChC,MAAA;YAAAE,OAAA6I,KAAAA;YAAAvI,OAAAuI,KAAAA;QAAAA,GAAoC3J,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAApCY;IAAAA;IAAoC,IAGzCQ,OAAK;QAAAR,IAAAA;QAAA,OAAAZ,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CACAR,MAAA;YAAAE,OAAA6I,KAAAA;YAAAvI;QAAyBpB,GAAAA,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAzBY;IAAAA;IAAyB,IAAA,CAG7BT,eAAa;QACiB,MAAAS,MAAAA,CAAAA,IAAAA,EAAOH,YAAUW,SAAWX,YAAUiH,IAAM,EAAA;QAAE1G,IAAAA;QAAA,OAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,MAAAA,CAAxEI,MAAA;YAAAF,OAAA6I,KAAAA;YAAAvI,OAA0BR;QAA+CZ,GAAAA,CAAAA,CAAAA,EAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAzEgB;IAAAA;IAAyE,IAG9EF,OAAK;QACQF,MAAAA,MAAA,CAAA,OAAA,EAAUE,MAAKI,OAAA,EAAA;QAAUF,IAAAA;QAAA,OAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,MAAAA,CAAjCI,MAAA;YAAAF,OAAQF;YAAyBQ,OAAAuI,KAAAA;QAAmB3J,GAAAA,CAAAA,CAAAA,EAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,EAAA,CAAA,EAApDgB;IAAAA;IAGwB,MAAAJ,KAAAC,OAAKO;IAAOJ,IAAAA;IAAA,OAAAhB,CAAAA,CAAAA,GAAAA,KAAAY,KAAAA,CAAtCI,KAAA;QAAAF,OAAA6I,KAAAA;QAAAvI,OAA0BR;IAAaZ,GAAAA,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAAvCgB;AAAuC;ACzChD,MAAM+rB,aAAa;IAAC;IAAS,QAAQ;CAAA,EAExBC,qOAA2BhI,OAAAA,EAAK,WAAA;IAAAhlB,MAAAA,KAAAC,+LAAAA,EAAA,EAAA,GAC3C,EAAAmK,MAAA6iB,SAAAA,EAAA,wJAA0B5kB,WAAAA,KAC1B,EAAAzB,UAAAA,EAAAC,YAAAA,EAAAhG,OAAAqsB,iBAAAA,EAAAA,GAA6D5D,gBAC7D6D,GAAAA,oBAA0BP,iBAC1BQ,GAAAA,aAAmBD,kBAAiBrsB,KAAAA,EACpCyQ,oKAAmB8b,4BAAAA,EAA0BzmB,YAAYC,YAAY,GACrEymB,sNAAkBtZ,SAAAA,EAAOzC,KAAK,GAC9Bgc,aAAmBrmB,iBACnB,EAAAxG,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACc,IAAAA;IAAA,KAAA;QAAA,IAKhD,CAAC6sB,kBAAiB/rB,KAAAA,IAAA,CACjBgsB,cAAU,CACVL,WAAAS,QAAAA,CAAoBjc,OAAKkc,EAAI,KAC9B,OAAOP,kBAAiB9rB,KAAAA,IAAW,YACnCmQ,OAAKtK,SAAW,WAAS;YAEzB3G,KAAO4sB,kBAAiB9rB,KAAAA;YAAMoT,MAAAA;QAAAA;QAEhClU,KAAO6sB,kBAAiB/rB,KAAAA;IAAAA;IAX1B,MAAAA,QAAcd;IAY2DM,IAAAA;IAAAZ,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CAE/CR,KAAAQ,SAASV,EAAE,4DAA4D,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAlG,MAAA0tB,oBAA0B9sB;IAAwEI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA0tB,oBAAAA,CAEhG1sB,KAAA0sB,kBAAiBjrB,MAAAA,GAAAA,KAAe,GAAGirB,kBAAiBhpB,KAAAA,CAAA,GAAA,EAAY,CAAC,CAAA,GAAA,CAAA,GAAQgpB,mBAAiB1tB,CAAAA,CAAAA,EAAAA,GAAA0tB,mBAAA1tB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAD5F,MAAA+H,gBACE/G;IAA0F,IAAAC,IAAA4B;IAAA7C,OAAAA,CAAAA,CAAA+H,CAAAA,CAAAA,KAAAA,iBAAA/H,CAAAA,CAAA,CAAA,CAAA,KAAAuR,SAAAvR,CAAAA,CAAAutB,CAAAA,CAAAA,KAAAA,cAAAvtB,CAAAA,CAAA,CAAA,CAAA,KAAAitB,aAAAjtB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAElFO,KAAAA,MAAA;QACJ,IAAA,CAACsQ,SAASA,UAAU+b,UAASrZ,OAAAA,EAAQ;QAErC0Z,IAAAA;QAEApc,OAAAA,MAAKtK,IAAAA,KAAU,WACjBgmB,UAAS;YAAAW,UAAA,CAAA;YAAAC,UAAA;YAAA9pB,QAGC;YAAO3C,OACRV,EAAE,oDAAkD;gBAAAwI,SAAYqI,MAAKkc,EAAAA;YAAAA,CAAI;YAACxH,aAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAAA,WAG7E;gBAAA,UAAA;oBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,WAAA;wBAAUvlB,UAAE,EAAA,sDAAsD;oBAAE,CAAA;oBACnE6Q,MAAKzQ,KAAAA,CAAAI,OAAAA;iBAAAA;YACR,CAAA;QAAA,CAEH,GAGCqQ,MAAKtK,IAAAA,KAAU,aAAS,CAAK8lB,WAAAS,QAAAA,CAAoBjc,MAAKkc,EAAG,KAC3DR,UAAS;YAAAW,UAAA,CAAA;YAAA7pB,QAEC;YAAS3C,OAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAEd,YAAA,EACU;gBAAA,SAAAmQ,MAAKkc,EAAAA;gBACN,SAAA;gBACL/sB;gBACK,QAAA;oBAAA+sB,IACFlc,MAAKkc,EAAAA;oBAAArsB,OACF2G;gBAAAA;gBAEG,YAAA;oBAAA+lB,QACF;gBAAA;YACT,CAAA;QAAA,CAGN,GAMCvc,MAAKtK,IAAAA,KAAU,aAAasK,MAAKkc,EAAAA,KAAQ,YAAA,CAE3CE,YAAYA,WAAAA,IAAiBJ,WAAUQ,oBAAAA,IAAAA,CAA0B,CAAA,GAGnET,UAASrZ,OAAAA,GAAW1C,OAGPb,IAAAA,aAAaid,SAAS;IAAA,GAClC9qB,KAAA;QAAC0O;QAAOgc;QAAYN;QAAWvsB;QAAGqH,aAAa;KAAA,EAAC/H,CAAAA,CAAAA,EAAAA,GAAA+H,eAAA/H,CAAAA,CAAAA,EAAAA,GAAAuR,OAAAvR,CAAAA,CAAAA,EAAAA,GAAAutB,YAAAvtB,CAAAA,CAAAA,EAAAA,GAAAitB,WAAAjtB,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,CAAA5B,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAA6C,KAAA7C,CAAAA,CAAA,EAAA,CAAA,6MArDnD2Q,YAAAA,EAAU1P,IAqDP4B,EAAgD,GAAC;AAAA,CAGrD,GCrFYmrB,oBAAqBvtB,CAA2BA,aAAAA,WAAWwtB,QAAAA,KAAa,CAAA,GCO/Eld,yLAAOxP,SAAAA,mJAAOgI,OAAI,EAAE;IACxB2kB,UAAU;IACVC,QAAQ;IACRC,YAAY;AACd,CAAC;AAGM,SAAAC,wBAAAtuB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA;IAAA,IAAA0G,UAAA2nB,kBAAAC,aAAAC,SAAA/b,WAAArR;IAAApB,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAGL,EAAA8V,IAAA0Y,WAAAA,EAAA5nB,QAAAA,EAAA2nB,gBAAAA,EAAAE,OAAAA,EAAAptB,KAAAA,EAAA,GAAAqR,WAAA,GAAoF1S,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAsuB,kBAAAtuB,CAAAA,CAAAA,EAAAA,GAAAuuB,aAAAvuB,CAAAA,CAAAA,EAAAA,GAAAwuB,SAAAxuB,CAAAA,CAAAA,EAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,EAAAA,GAAAoB,KAAAA,IAAAA,CAAAuF,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAAsuB,mBAAAtuB,CAAAA,CAAA,CAAA,CAAA,EAAAuuB,cAAAvuB,CAAAA,CAAA,CAAA,CAAA,EAAAwuB,UAAAxuB,CAAAA,CAAA,CAAA,CAAA,EAAAyS,YAAAzS,CAAAA,CAAA,CAAA,CAAA,EAAAoB,QAAApB,CAAAA,CAAA,CAAA,CAAA;IACzF,MAAA,EAAAU,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACc,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CAK9Cd,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAU,MAAC;QAAW,SAAC;QACtB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;YAAQ,IAAA;YAAW,MAAC;YAAS,QAAA;YAC3Bc,UAAAA;QAAAA,CACH;IACF,CAAA,GAAMpB,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAOsBE,KAAAF,EAAE,yCAAyC,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,GAAAA,KAAAY,KAAAA,CAAtDI,KAAA;QAAAsJ,SAAU1J;IAA4C,GAACZ,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAsuB,EAAAA,CAAAA,KAAAA,oBAAAtuB,CAAAA,CAAAA,GAAAA,KAAAwuB,WAAAxuB,CAAAA,CAAA,EAAA,CAAA,KAAAgB,KAAAA,CANzEC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,MAAA,EAAS;QAAA,MAAA;QAAgB,SAAC;QACzB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,2LAAA,EAAA;YACaqtB,cAAAA;YACNG,yJAAAA,YAAAA;YACD,MAAA;YACID,SAAAA;YACK,cAAAxtB;QAElB,CAAA;IAAA,CAAA,GAAMhB,CAAAA,CAAAA,GAAAA,GAAAsuB,kBAAAtuB,CAAAA,CAAAA,GAAAA,GAAAwuB,SAAAxuB,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAM,EAAAA,CAAAA,KAAAA,MAAAN,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CAdR4B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAc;QAAA,SAAC;QACdvC,UAAAA;YAAAA;YAKAW;SAAAA;IASF,CAAA,GAAOjB,CAAAA,CAAAA,GAAAA,GAAAM,IAAAN,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAA2G,YAAA3G,CAAAA,CAAAuuB,EAAAA,CAAAA,KAAAA,eAAAvuB,CAAAA,CAAAyS,EAAAA,CAAAA,KAAAA,aAAAzS,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAhBTC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAACiO,QAAI;QAAA,GAAK0B,SAAAA;QAAe8b,IAAAA;QACvB1rB,UAAAA;YAAAA;YAAAA;SAiBF;IAAA,CAAA,GAAO7C,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAAuuB,aAAAvuB,CAAAA,CAAAA,GAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAlBP8C;AAkBO;AC9CX,MAAMiO,qLAAOxP,SAAAA,CAAOmtB,GAAAA,CAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,CAAAA;AAwCb,SAAAC,QAAA5uB,KAAAA,EAAA;IAAAC,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GACL,EAAA2uB,QAAAA,EAAAC,aAAAA,EAAkC9uB,GAAAA,OAElC+uB,sNAAkB9a,SAAAA,EAAA,CAAQ;IAAC1T,IAAAA;IAAAN,CAAAA,CAAA4uB,CAAAA,CAAAA,KAAAA,YAAA5uB,CAAAA,CAAAA,EAAAA,KAAA6uB,gBAAAA,CAGzBvuB,KAAAiR,CAAA,UAAA;QACEA,MAAKC,cAAAA,IAELsd,UAAS7a,OAAAA,GAAW1C,MAAKG,KAAAA,EAEzBmd,cAAc;QAEd,MAAAld,kBAAAlH,CAAA,MAAA;YACEA,EAAC+G,cAAAA,IACDod,SAASnkB,EAACiH,KAAAA,GAASod,UAAS7a,OAAQ;QAAC,GAGvCpC,gBAAAA,MAAA;YACEE,OAAAC,mBAAAA,CAA2B,aAAaL,eAAe,GACvDI,OAAAC,mBAAAA,CAA2B,WAAWH,aAAa;QAAC;QAGtDE,OAAAE,gBAAAA,CAAwB,aAAaN,eAAe,GACpDI,OAAAE,gBAAAA,CAAwB,WAAWJ,aAAa;IACjD7R,GAAAA,CAAAA,CAAAA,EAAAA,GAAA4uB,UAAA5uB,CAAAA,CAAAA,EAAAA,GAAA6uB,eAAA7uB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IApBH,MAAAkS,kBAAwB5R;IAsBvB,IAAAM,IAAAI;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAKGhC,KAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA,GAGRI,KAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA,GAAAhB,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,CAAAJ,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,OAAAA,CAAAA,CAAAA,EAAAA,KAAAkS,kBAAAA,CALVjR,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA8P,QAAA;QAAkBmB,aAAAA;QAEjBtR,UAAAA;YAAAA;YAGAI;SAAAA;IAAAA,CACF,GAAOhB,CAAAA,CAAAA,EAAAA,GAAAkS,iBAAAlS,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EANPiB;AAMO;ACpEX,MAAM8P,yLAAOxP,SAAAA,EAAOC,uJAAG,CAAA,CAAA;;;;AAAA,CAAA;AAMhB,SAAAutB,UAAAhvB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA;IAAA0G,IAAAA,UAAA4nB,aAAA1b,UAAAhJ,UAAA4I;IAAAzS,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAGL,EAAA8V,IAAA0Y,WAAAA,EAAA5nB,QAAAA,EAAAkD,QAAAA,EAAAgJ,QAAAA,EAAA,GAAAJ,WAAAA,GAAsE1S,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAuuB,aAAAvuB,CAAAA,CAAAA,EAAAA,GAAA6S,UAAA7S,CAAAA,CAAAA,EAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,EAAAA,GAAAyS,SAAAA,IAAAA,CAAA9L,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAAuuB,cAAAvuB,CAAAA,CAAA,CAAA,CAAA,EAAA6S,WAAA7S,CAAAA,CAAA,CAAA,CAAA,EAAA6J,WAAA7J,CAAAA,CAAA,CAAA,CAAA,EAAAyS,YAAAzS,CAAAA,CAAA,CAAA,CAAA;IAC3E,MAAA,CAAAmR,SAAA6d,UAAA,CAAA,IAA8B/e,oNAAAA,EAAAA,IAAoC,GAClEgf,4NAAwBjb,SAAAA,CACxB,IAAA,CAAAkb,aAAAC,cAAA,CAAA,6MAAsClf,WAAAA,CAAiB;IAAC3P,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAAmR,SAAAiO,cAAAA,CAElB9e,KAAAA,MAAA;QACpC2uB,gBAAehb,OAAAA,GAAW9C,SAAOiO;IAClCpf,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAAmR,SAAAiO,aAAApf,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAovB,oBAA0B9uB;IAEbM,IAAAA;IAAAZ,CAAAA,CAAA6S,CAAAA,CAAAA,KAAAA,YAAA7S,CAAAA,CAAAA,EAAAA,KAAA6J,WAAAA,CAGXjJ,KAAAgR,CAAA,WAAA;QACE,MAAAyd,IAAUJ,gBAAehb,OAAAA;QAEpBob,KAELF,eAAenT,KAAAC,GAAAA,CAASD,KAAAQ,GAAAA,CAAS6S,IAAIzd,QAAQ/H,QAAQ,GAAGgJ,QAAQ,CAAC;IAClE7S,GAAAA,CAAAA,CAAAA,EAAAA,GAAA6S,UAAA7S,CAAAA,CAAAA,EAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAPH,MAAAsvB,eAAqB1uB;IASpB,IAAAI,IAAAC;IAAAjB,CAAAA,CAAA6S,EAAAA,CAAAA,KAAAA,YAAA7S,CAAAA,CAAAA,GAAAA,KAAA6J,YAAA7J,CAAAA,CAAA,EAAA,CAAA,KAAAkvB,cAAAA,CAGQjuB,KAAAiuB,cAAW;QAAAtc,MAAU;QAAM4H,OAAS0U;IAAAA,IAAW;QAAArlB;QAAAgJ;IAAAA,GAAwB7S,CAAAA,CAAAA,GAAAA,GAAA6S,UAAA7S,CAAAA,CAAAA,GAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,GAAAA,GAAAkvB,aAAAlvB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAAgB,KAAvEC;IADT,MAAA6T,QAAc9T;IAGb6B,IAAAA;IAAA7C,CAAAA,CAAAsvB,EAAAA,CAAAA,KAAAA,gBAAAtvB,CAAAA,CAAAA,GAAAA,KAAAovB,oBAAAA,CAKGvsB,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,SAAkBysB;QAAAA,UAAAA;QAA6BF,eAAgB;IAAA,CAAK,GAAApvB,CAAAA,CAAAA,GAAAA,GAAAsvB,cAAAtvB,CAAAA,CAAAA,GAAAA,GAAAovB,mBAAApvB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAA2G,EAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAA,EAAA,CAAA,KAAAuuB,eAAAvuB,CAAAA,CAAAyS,EAAAA,CAAAA,KAAAA,aAAAzS,CAAAA,CAAA,EAAA,CAAA,KAAA8U,SAAA9U,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAFvEC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAACiO,QAASwd;QAAAA,IAAU;QAAO9b,GAAAA,SAAAA;QAAgBuc,KAAAA;QAAmBla;QAC3DnO,UAAAA;YAAAA;YACD9D;SAAAA;IAAAA,CACF,GAAO7C,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAAuuB,aAAAvuB,CAAAA,CAAAA,GAAAA,GAAAyS,WAAAzS,CAAAA,CAAAA,GAAAA,GAAA8U,OAAA9U,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAHP8C;AAGO;AClCJ,SAAAysB,uBAAAxvB,KAAAA,EAAA;IAAAC,MAAAA,+LAAAC,KAAAA,EAAA,EAAA,GACL,EAAA2G,UAAAA,EAAAC,YAAAA,EAAA+L,IAAAA,EAAAA,GAAyC7S,OACzC,EAAAoT,SAAAA,EAAA,GAAoBuC,WACpB,EAAA8Z,cAAAA,EAAA1F,SAAAA,EAAA,GAAoCR,mBACpC,EAAAmG,QAAAA,EAAAA,GAAmBvE,iBAAiB;IAAC5qB,IAAAA;IAAAN,CAAAA,CAAAwvB,CAAAA,CAAAA,KAAAA,kBAAAxvB,CAAAA,CAAAA,EAAAA,KAAA8pB,YAAAA,CAELxpB,KAAAA,MAAA;QAC1BwpB,aAAW0F,eAAe1F,UAASpiB,IAAK;IAC7C1H,GAAAA,CAAAA,CAAAA,EAAAA,GAAAwvB,gBAAAxvB,CAAAA,CAAAA,EAAAA,GAAA8pB,WAAA9pB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAA0vB,cAAoBpvB;IAEW,IAE3B6S,aAAAA,CAAc2W,WAAS,OAAA;IAAAlpB,IAAAA;IAAAZ,CAAAA,CAAA4G,CAAAA,CAAAA,KAAAA,cAAA5G,CAAAA,CAAAA,EAAAA,KAAA6G,gBAAA7G,CAAAA,CAAA,CAAA,CAAA,KAAA0vB,eAAA1vB,CAAAA,CAAA8pB,CAAAA,CAAAA,KAAAA,UAAA6F,SAAAA,GAAAA,CAEX/uB,+MAAAgvB,gBAAAA,EAAc9F,UAAS6F,SAAAA,EAAA;QAAAnB,SAC5BkB;QAAW9oB;QAAAC;IAGrB,CAAA,GAAC7G,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAA0vB,aAAA1vB,CAAAA,CAAA,CAAA,CAAA,GAAA8pB,UAAA6F,SAAAA,EAAA3vB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAJF,MAAAmR,UAAgBvQ;IAId,IAEE6uB,SAAQI,cAAAA,EAAA;QAAA7uB,IAAAA;QAAA,OAAAhB,CAAAA,CAAAmR,CAAAA,CAAAA,KAAAA,WAAAnR,CAAAA,CAAAA,EAAAA,KAAA4S,OAAAA,CAER5R,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,WAAA;YACI,IAAA;YACK,WAAA;YACF4R;YACI4Y,UAAAA;YACAD,UAA2BA;YAEpCpa,UAAAA;QAAAA,CACH,GAAYnR,CAAAA,CAAAA,EAAAA,GAAAmR,SAAAnR,CAAAA,CAAAA,EAAAA,GAAA4S,MAAA5S,CAAAA,CAAAA,GAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,EAAA,CAAA,EARZgB;IAAAA;IAQYA,IAAAA;IAAA,OAAAhB,CAAAA,CAAAmR,EAAAA,CAAAA,KAAAA,WAAAnR,CAAAA,CAAAA,GAAAA,KAAA4S,OAAAA,CAKd5R,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAO,IAAA;QAAgB,WAAA;QAA+B4R;QAAAA,UAEvD;IAAA,CAAA,GAAM5S,CAAAA,CAAAA,GAAAA,GAAAmR,SAAAnR,CAAAA,CAAAA,GAAAA,GAAA4S,MAAA5S,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAFNgB;AAEM;AC7CV,MAAM8uB,2BAA2B;AAK1BC,SAAAA,wBAAAnwB,SAAAA,EAAAmX,GAAAA,EAAAiZ,YAAAA,EAAA;IAAA,MAAAhwB,oMAAAC,EAAA,EAAA,GAKLgwB,4KAAsBC,mBAAAA,CAAiB;IAAC5vB,IAAAA;IAAAN,CAAAA,CAAA+W,CAAAA,CAAAA,KAAAA,OAAA/W,CAAAA,CAAAA,EAAAA,KAAAJ,YAAAA,CAEfU,KAAA;QAAAwvB;QAA2BlwB;QAAWmX,GAAG;KAAA,CAAAjN,MAAAA,CAAAyE,OAAgB,GAACvO,CAAAA,CAAAA,EAAAA,GAAA+W,KAAA/W,CAAAA,CAAAA,EAAAA,GAAAJ,WAAAI,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAnFmwB,MAAAA,mBAAyB7vB,GAA0D2I,IAAAA,CAAM,GAAG;IAAC,IAAArI,IAAAI;IAAAhB,IAAAA,CAAAA,CAAAgwB,CAAAA,CAAAA,KAAAA,gBAAAhwB,CAAAA,CAAAA,EAAAA,KAAAiwB,iBAAAjwB,CAAAA,CAAA,CAAA,CAAA,KAAAmwB,kBAAA;QAAAlvB,IAAAA;QAAAjB,CAAAA,CAAAA,EAAAA,KAAAgwB,eAAAA,CAK/E/uB,MAAAJ,CAAYA,QAAAA,UAAAA,OAAiBmvB,eAAenvB,OAAMb,CAAAA,CAAAA,EAAAA,GAAAgwB,cAAAhwB,CAAAA,CAAAA,EAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA,EAFvDgB,KAAAivB,cAAaG,MAAAA,CACVD,gBAAgB,EAACrlB,IAAAA,+JACnBtB,MAAAA,EAAIvI,GAAkD,CAAC,GAACjB,CAAAA,CAAAA,EAAAA,GAAAgwB,cAAAhwB,CAAAA,CAAAA,EAAAA,GAAAiwB,eAAAjwB,CAAAA,CAAAA,EAAAA,GAAAmwB,kBAAAnwB,CAAAA,CAAAA,EAAAA,GAAAgB;IAAA,OAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAFzDgB,KAAAA;IAKTqvB,MAAAA,2JAAcvsB,gBAAAA,EANClD,IAMqBovB,YAAY;IAAc/uB,IAAAA;IAAAjB,CAAAA,CAAAiwB,CAAAA,CAAAA,KAAAA,iBAAAjwB,CAAAA,CAAAA,GAAAA,KAAAmwB,oBAAAnwB,CAAAA,CAAA,EAAA,CAAA,KAAAqwB,UAAAA,CAE5DpvB,KAAAqvB,CAAA,aAAA;QACMA,aAAazvB,WACfovB,cAAaM,MAAAA,CAAQJ,kBAAkBG,QAAkB;IAAA,GAE5DtwB,CAAAA,CAAAA,EAAAA,GAAAiwB,eAAAjwB,CAAAA,CAAAA,GAAAA,GAAAmwB,kBAAAnwB,CAAAA,CAAAA,GAAAA,GAAAqwB,SAAArwB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IALH,MAAAud,MAAYtc;IAOX,IAAA4B,IAAAC;IAAA,OAAA9C,CAAAA,CAAAud,EAAAA,CAAAA,KAAAA,OAAAvd,CAAAA,CAAAA,GAAAA,KAAAqwB,UAAAA,CAEoBvtB,KAAA;QAACjC;QAAO0c,GAAG;KAAA,EAACvd,CAAAA,CAAAA,GAAAA,GAAAud,KAAAvd,CAAAA,CAAAA,GAAAA,GAAAqwB,SAAArwB,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAA6C,KAAZC,IAAdD;AAAyC;ACnC3C,MAAM2tB,mBAAmB;IAAClrB,IAAI;IAAUlE,OAAO;AAAqC,GAC9EqvB,gBAAgB;IAACnrB,IAAI;IAAOlE,OAAO;AAAuC,GAC1EsvB,aAAa;IAACF;IAAkBC,aAAa;CAAA,ECEpDE,MAAM,0IAAIC,UAAAA,CAAI;IAACC,SAAS;AAAI,CAAC;AAEnBC,SAAAA,WAAWC,OAAAA,EAAclwB,KAAAA,EAAiB;IAClDmwB,MAAAA,SAASL,IAAInwB,GAAAA,CAAIuwB,OAAO;IAE9B,OAAIC,WAAWrnB,KAAAA,IAAAA,CACbgnB,IAAIpT,GAAAA,CAAIwT,SAAS3iB,MAAMkW,OAAAA,CAAQzjB,KAAK,iKAAKsC,WAAAA,EAAStC,KAAK,CAAC,GACjDiwB,WAAWC,SAASlwB,KAAK,CAAA,IAG3BmwB;AACT;AAEO,SAASC,eAAe1f,KAAAA,EAAkB;IACzC,MAAA,EAACwL,IAAAA,EAAQxL,GAAAA,OACT0C,UAAU0c,IAAInwB,GAAAA,CAAIuc,IAAI;IAExB9I,YAAYtK,KAAAA,KAKhBgnB,IAAIpT,GAAAA,CAAIR,MAAM,CAAC9I,OAAO;AACxB;AAEO,SAASid,cAAc/f,OAAAA,EAA4B;IAClDggB,MAAAA,MAAMpf,OAAOqf,YAAAA,CAAa;IAEhC,IAAID,KAAK;QACDE,MAAAA,QAAQnxB,SAASoxB,WAAAA,CAAY;QAE/BC,IAAAA,eAAAA,IACJF,MAAMG,kBAAAA,CAAmBrgB,OAAO,GAChCggB,IAAIM,QAAAA,CAASJ,KAAK;IAAA;AAEtB;AAEO,SAASK,OAAOngB,KAAAA,EAAkB;IACvC2f,cAAc3f,MAAMogB,aAAa;AACnC;AAEO,SAASC,eAAergB,KAAAA,EAAkB;IAC7BA,MAAMsgB,OAAAA,KAAY,MAAA,CAAOtgB,MAAM8V,OAAAA,IAAW9V,MAAMugB,OAAAA,KAAAA,CAMlEvgB,MAAMC,cAAAA,CAAe,GAErB0f,cAAc3f,MAAMogB,aAAa,CAAA;AACnC;AAEO,SAASI,eAAelxB,KAAAA,EAA6C;IACnEsC,mKAAAA,WAAAA,EAAStC,KAAK,SAAKwC,mKAAAA,EAASxC,MAAM2C,GAAG,iKAAKH,WAAAA,EAASxC,MAAMN,KAAK;AACvE;ACxDayxB,MAAAA,mMAAuBzwB,SAAAA,CAAOmtB,GAAAA,CAAI,CAAC,EAAC3sB,KAAAA,EAAqB,KAAM;IACpE,MAAA,EAACV,KAAAA,EAAO4wB,KAAAA,EAAO/vB,KAAAA,EAAAA,GAASH,MAAME,MAAAA;IAE7B2W,mLAAAA,MAAAA,CAAAA;;;mBAAAA,EAGYqZ,MAAMC,IAAAA,CAAKC,MAAM,CAAA;iBAAA,EACnBF,MAAMC,IAAAA,CAAKE,KAAAA,CAAM,CAAC,CAAA,CAAEC,QAAQ,CAAA;mBAAA,EAC1BJ,MAAMC,IAAAA,CAAKE,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;;;;;oBAAA,GAK7BpsB,0JAAAA,EAAIE,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;;;;mBAAA,sJAIdF,OAAAA,EAAIE,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAAA,uJAmCJF,MAAAA,EAAIE,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;iBAAA,EACxB+vB,MAAMC,IAAAA,CAAKE,KAAAA,CAAM,CAAC,CAAA,CAAEC,QAAQ,CAAA;mBAAA,EAC1BJ,MAAMC,IAAAA,CAAKE,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;;;;;;;;iBAAA,EAQhC6D,MAAMC,IAAAA,CAAKE,KAAAA,CAAM,CAAC,CAAA,CAAEC,QAAQ,CAAA;mBAAA,EAC1BJ,MAAMC,IAAAA,CAAKE,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;;;;;;;;;mBAAA,uJAS9BpsB,MAAAA,EAAIE,KAAAA,CAAM,CAAC,CAAA,GAAI,CAAC,CAAC,CAAA;;;;;;;;;;;;;aAAA,EAavBb,MAAMixB,MAAAA,CAAOC,QAAQ,CAAA;;;;;aAAA,EAKrBlxB,MAAMixB,MAAAA,CAAOE,QAAQ,CAAA;;;;mBAAA,uJAIfxwB,MAAAA,EAAIE,KAAAA,CAAM,CAAC,CAAC,CAAC,CAAA;;;;aAAA,EAInBb,MAAMixB,MAAAA,CAAOG,MAAM,CAAA;;;;aAAA,EAInBpxB,MAAMixB,MAAAA,CAAOI,OAAO,CAAA;;;;aAAA,EAIpBrxB,MAAMixB,MAAAA,CAAOK,MAAM,CAAA;;;;;;;;;;;;;;;;;;;;EAAA,CAAA;AAqBlC,CAAC;AC3HM,SAAAC,OAAA7yB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GACL,EAAA4yB,QAAAA,EAAA3mB,KAAAA,EAAAA,GAA0BnM;IAAKO,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA6yB,WAAAA,CAG7BvyB,KAAAiR,CAA0CshB,QAAAA,SAASthB,MAAKuhB,MAAAA,CAAAjyB,KAAa,GAACb,CAAAA,CAAAA,EAAAA,GAAA6yB,UAAA7yB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IADxE,MAAA+yB,eAAqBzyB,IAIrB,EAAAI,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAMnCE,KAAAF,EAAE,uCAAuC,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAEhD,MAAAgB,KAAAkL,SAAS;IAAEjL,IAAAA;IAAAjB,OAAAA,CAAAA,CAAA+yB,CAAAA,CAAAA,KAAAA,gBAAA/yB,CAAAA,CAAAA,EAAAA,KAAAY,MAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAgB,KAAAA,CALpBC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,YAAA,EACO+xB;QAAAA,yJAAAA,aAAAA;QACID,UAAW;QACR,aAAAnyB;QACL,QAAA;QACD,OAAAI;IAAAA,CACP,GAAAhB,CAAAA,CAAAA,EAAAA,GAAA+yB,cAAA/yB,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EANFiB;AAME;ACHC,SAAAgyB,cAAAlzB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAY,KAAAA,EAAAA,GAAgBd,OAChB,EAAAmzB,cAAAA,EAAArL,OAAAA,EAAkCyB,GAAAA,gBAAAA,GAClC6J,iBAAuB,GAAGtL,OAAO,CAAA,SAAA,CAAA,EAKjCuL,CAAAA,YAAAC,gBAAA,CAAA,GAAuCtD,wBACrC,qBAEA,MAAA,QACF;IAACzvB,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAAozB,aAAAA,CAGgB9yB,KAAAowB,WAAAjd,IAAAA,CAAA6f,CAA0BA,OAAAA,KAAIhuB,EAAAA,KAAQ8tB,UAAU,GAACpzB,CAAAA,CAAAA,EAAAA,GAAAozB,YAAApzB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAlE,MAAAuzB,WAAiBjzB;IAAiDM,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAqzB,mBAAAA,CAE5BzyB,KAAAA,MAAA;QACpCyyB,iBAAgB7C,iBAAAlrB,EAAoB;IAAC,GACtCtF,CAAAA,CAAAA,EAAAA,GAAAqzB,kBAAArzB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAwzB,oBAA0B5yB;IAEJI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAqzB,mBAAAA,CAEaryB,KAAAA,MAAA;QACjCqyB,iBAAgB5C,cAAAnrB,EAAiB;IAAC,GACnCtF,CAAAA,CAAAA,EAAAA,GAAAqzB,kBAAArzB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAyzB,iBAAuBzyB,IAIvB,EAAAN,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC,GAK3CyB,KAAGkyB,GAAAA,cAAc,CAAA,MAAA,CAAA;IAAQtwB,IAAAA;IAAA7C,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAa,QAAAA,CAE3BgC,KAAAkvB,eAAelxB,KAAK,IAClB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EAAA;QACIH;QACK,SAAA;QACI,YAAA;YAAA+H,eAAAA,IAER,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;oBACE,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UAAmB5H;wBAAAA,UAAAA;oBAAAA,CAAK;gBAC3B,CAAA;QAAA;IAAA,CAEH,IAGH,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;QAAKH,UAAAA,EAAE,0CAA0C;IAAA,CAAE,GACpDV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAa,OAAAb,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAYQE,KAAA;QAAAorB,UAAW;QAAQwF,QAAA;QAAAvF,QAAA;IAAA,GAAuBnuB,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAI9BkE,MAAAA,KAAGivB,GAAAA,cAAc,CAAA,QAAA,CAAA,EAC5BhtB,KAAGgtB,GAAAA,cAAc,CAAA,IAAA,EAAA3C,iBAAAlrB,EAAA,EAAA;IAA4Bc,IAAAA;IAAApG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAC1C0F,KAAA1F,EAAC8vB,iBAAApvB,KAAuB,GAACpB,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAEtB,MAAAqG,KAAAktB,aAAQ/C;IAAqBjqB,IAAAA;IAAAvG,CAAAA,CAAAwzB,EAAAA,CAAAA,KAAAA,qBAAAxzB,CAAAA,CAAA,EAAA,CAAA,KAAAkE,MAAAlE,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,MAAApG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CALzCE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,MAAA,EACgB;QAAA,iBAAArC;QACX,IAAAiC;QACG,OAAAC;QACEotB,SAAAA;QACC,UAAAntB;IACV,CAAA,GAAArG,CAAAA,CAAAA,GAAAA,GAAAwzB,mBAAAxzB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAEeyG,MAAAA,MAAG0sB,GAAAA,cAAc,CAAA,QAAA,CAAA,EAC5BtqB,MAAGsqB,GAAAA,cAAc,CAAA,IAAA,EAAA1C,cAAAnrB,EAAA,EAAA;IAAyB6D,IAAAA;IAAAnJ,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACvCyI,MAAAzI,EAAC+vB,cAAArvB,KAAoB,GAACpB,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAEnB,MAAAoJ,MAAAmqB,aAAQ9C;IAAkBpnB,IAAAA;IAAArJ,CAAAA,CAAAyzB,EAAAA,CAAAA,KAAAA,kBAAAzzB,CAAAA,CAAA,EAAA,CAAA,KAAAyG,OAAAzG,CAAAA,CAAA6I,EAAAA,CAAAA,KAAAA,OAAA7I,CAAAA,CAAA,EAAA,CAAA,KAAAmJ,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAAoJ,MAAAA,CALtCC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,MAAA,EACgB;QAAA,iBAAA5C;QACX,IAAAoC;QACG,OAAAM;QACEsqB,SAAAA;QACC,UAAArqB;IACV,CAAA,GAAApJ,CAAAA,CAAAA,GAAAA,GAAAyzB,gBAAAzzB,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAAAsJ,IAAAA;IAAAtJ,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAqJ,MAAAA,CApBNC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QACU,SAAA;QACG,YAAA;QACJ,QAAA;QACD,OAAAxG;QAEP,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,UAAA,EAAe;YAAA,OAAA;YACdyD,UAAAA;gBAAAA;gBAOA8C;aAAAA;QAOF,CAAA;IACF,CAAA,GAAOrJ,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAGYgK,MAAAA,MAAA,GAAGmpB,cAAc,CAAA,IAAA,EAAOC,UAAU,EAAA,EAE/Cve,MAAGse,GAAAA,cAAc,CAAA,QAAA,CAAA;IAAUpe,IAAAA;IAAA/U,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGxBmS,MAAA;QAAA4e,SAAU;IAAA,GAAO3zB,CAAAA,CAAAA,GAAAA,GAAA+U,GAAAA,IAAAA,MAAA/U,CAAAA,CAAA,EAAA,CAAA;IAAAgV,IAAAA;IAAAhV,CAAAA,CAAAa,EAAAA,CAAAA,KAAAA,SAAAb,CAAAA,CAAAA,GAAAA,KAAAuzB,WAAAA,CAEvBve,MAAAue,aAAQ/C,oBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACN,sBACC;QAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,+KAAC,UAAA,EAAA;YACO3vB,MAAAA;YACMiwB;YACHG,SAAaA;YACd2B,QAAAA;YACO,eAAA;gBAAAgB,YAAA,CAAA;YAAA;QAAkB,CAAA;IAErC,CAAA,GACD5zB,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAAuzB,UAAAvzB,CAAAA,CAAAA,GAAAA,GAAAgV,GAAAA,IAAAA,MAAAhV,CAAAA,CAAA,EAAA,CAAA;IAAAiV,IAAAA;IAAAjV,CAAAA,CAAAa,EAAAA,CAAAA,KAAAA,SAAAb,CAAAA,CAAAA,GAAAA,KAAAuzB,WAAAA,CAEAte,MAAAse,aAAQ9C,iBACN,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QACU,UAAA;QACC,UAAC;QACAmB,WAAAA;QACIF,eAAKA;QACXA,SAAAA;QACH,MAAA;QAEL9M,UAAAA,KAAAC,SAAAA,CAAehkB,OAAc,MAAA,CAAA;IAChC,CAAA,GACDb,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAAuzB,UAAAvzB,CAAAA,CAAAA,GAAAA,GAAAiV,GAAAA,IAAAA,MAAAjV,CAAAA,CAAA,EAAA,CAAA;IAAAkV,IAAAA;IAAAlV,CAAAA,CAAA,EAAA,CAAA,KAAAgK,OAAAhK,CAAAA,CAAA6U,EAAAA,CAAAA,KAAAA,OAAA7U,CAAAA,CAAAgV,EAAAA,CAAAA,KAAAA,OAAAhV,CAAAA,CAAAA,GAAAA,KAAAiV,MAAAA,CA/BHC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,WAAA,EAAA;QACkB,mBAAAlL;QACX,MAAA;QACF,IAAA6K;QACK,UAAA;QACA,SAAA;QACF,OAAAE;QAENC,UAAAA;YAAAA;YAYAC;SAAAA;IAAAA,CAYH,GAAWjV,CAAAA,CAAAA,GAAAA,GAAAgK,KAAAhK,CAAAA,CAAAA,GAAAA,GAAA6U,KAAA7U,CAAAA,CAAAA,GAAAA,GAAAgV,KAAAhV,CAAAA,CAAAA,GAAAA,GAAAiV,KAAAjV,CAAAA,CAAAA,GAAAA,GAAAkV,GAAAA,IAAAA,MAAAlV,CAAAA,CAAA,EAAA,CAAA;IAAAmV,IAAAA;IAAAnV,CAAAA,CAAAsJ,EAAAA,CAAAA,KAAAA,OAAAtJ,CAAAA,CAAAA,GAAAA,KAAAkV,MAAAA,CAzDbC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;QAAe,WAAA;QAAgB,QAAA;QAC9B7L,UAAAA;YAAAA;YAwBA4L;SAAAA;IAiCF,CAAA,GAAOlV,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAkV,KAAAlV,CAAAA,CAAAA,GAAAA,GAAAmV,GAAAA,IAAAA,MAAAnV,CAAAA,CAAA,EAAA,CAAA;IAAAoV,IAAAA;IAAApV,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAAkzB,kBAAAlzB,CAAAA,CAAAmV,EAAAA,CAAAA,KAAAA,OAAAnV,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAnFTuS,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EAAA;QACY,YAAA;QACP,IAAAnU;QAEF,QAAA4B;QAgBOqwB,SAAAA;QACOA,gBAAAA;QACP,SAAI,CAAA;QACN,OAAA;QAEP/d,UAAAA;IA2DF,CAAA,GAASnV,CAAAA,CAAAA,GAAAA,GAAAkzB,gBAAAlzB,CAAAA,CAAAA,GAAAA,GAAAmV,KAAAnV,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAAoV,GAAAA,IAAAA,MAAApV,CAAAA,CAAA,EAAA,CAAA,EApFToV;AAoFS;AChHN,SAAAye,OAAA9zB,KAAAA,EAAA;IAAAC,MAAAA,QAAAC,4LAAAA,EAAA,EAAA;IAAA6zB,IAAAA,MAAA9rB,QAAAsC,SAAAjF,MAAA/E;IAAAN,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CACL,EAAAiI,MAAAA,EAAAsC,OAAAA,EAAAtH,MAAA8wB,IAAAA,EAAA3jB,MAAA7P,EAAAA,EAAA,GAAA+E,MAAAA,GAAqEtF,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAA8zB,MAAA9zB,CAAAA,CAAAA,EAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,EAAAA,GAAAsK,SAAAtK,CAAAA,CAAAA,EAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,CAAAwzB,OAAA9zB,CAAAA,CAAA,CAAA,CAAA,EAAAgI,SAAAhI,CAAAA,CAAA,CAAA,CAAA,EAAAsK,UAAAtK,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAtCmQ,MAAAA,OAAA7P,OAAoBqJ,KAAAA,IAAb,gBAAPrJ;IAAoBM,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAA8zB,OAAAA,CAKjDlzB,KAAAkzB,QACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QACV,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA,CACH,CAAA;IAAA,CAAA,GACD9zB,CAAAA,CAAAA,EAAAA,GAAA8zB,MAAA9zB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAsK,UAAAA,CAEDtJ,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,OAAA;QAAe,MAAC;QAAO,KAAA;QAAa,UAAA;QACvC,UACT;IAAA,CAAA,GAAOhB,CAAAA,CAAAA,EAAAA,GAAAsK,SAAAtK,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,GAAAA,KAAAgI,SAAAA,CAEN/G,KAAA+G,UACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EAAA;QAAWA,GAAAA,MAAAA;QAAc,MAAAA,OAAMsrB,IAAAA,IAAS;QAAe,MAAAtrB,OAAMmI,IAAAA,IAAS;IAAA,CACxE,GAAAnQ,CAAAA,CAAAA,GAAAA,GAAAgI,QAAAhI,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAAiB,KAAAA,CAbH4B,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;QAAW,OAAA;QAAc,KAAC;QACxBjC,UAAAA;YAAAA;YAMDI;YAICC;SAAAA;IAAAA,CAGH,GAAOjB,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,OAAAA,CAAAA,CAAAqF,EAAAA,CAAAA,KAAAA,QAAArF,CAAAA,CAAAA,GAAAA,KAAA6C,MAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAAmQ,OAAAA,CAfTrN,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,OAAA,EAAK;QAAA,cAAA,CAAA;QAAuB,UAAC;QAAY,UAAC;QAAQqN;QAAU9K,GAAAA,IAAAA;QAC3DxC,UAAAA;IAeF,CAAA,GAAO7C,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAAmQ,MAAAnQ,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAhBP8C;AAgBO;AC1BJ,SAAAixB,sBAAAzzB,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAA+B,EAAA+zB,UAAAA,EAAAA,GAAA1zB,IACpC,EAAAsG,UAAAA,EAAAC,YAAAA,EAAA,GAAmCyiB,mBACnC,EAAA2K,OAAAA,EAAAA,+JAAkBC,uBAAAA,EAAqBttB,YAAYC,YAAY,GAC/D,EAAAstB,cAAAA,EAAAA,gKAAyBC,YAAAA,CAAU;IAACxzB,IAAAA;IAAAZ,CAAAA,CAAA4G,CAAAA,CAAAA,KAAAA,cAAA5G,CAAAA,CAAA,CAAA,CAAA,KAAA6G,gBAAA7G,CAAAA,CAAAm0B,CAAAA,CAAAA,KAAAA,kBAAAn0B,CAAAA,CAAA,CAAA,CAAA,KAAAi0B,WAAAj0B,CAAAA,CAAAA,EAAAA,KAAAg0B,aAAAA,CACFpzB,KAAAA,MAAA;QAC5BozB,cAAAA,CACFC,QAAOI,OAAAA,CAASL,UAAU,GAC1BG,eAAe,QAAM;YAAA7uB,IAAOsB;YAAUK,MAAQJ;QAAAA,CAAa,CAAA;IAAC,GAE/D7G,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAm0B,gBAAAn0B,CAAAA,CAAAA,EAAAA,GAAAi0B,SAAAj0B,CAAAA,CAAAA,EAAAA,GAAAg0B,YAAAh0B,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IALD,MAAAs0B,gBAAsB1zB,IAMtB,EAAAF,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACwB,IAAAA;IAAAhB,CAAAA,CAAAs0B,CAAAA,CAAAA,KAAAA,iBAAAt0B,CAAAA,CAAAA,EAAAA,KAAAg0B,cAAAh0B,CAAAA,CAAA,CAAA,CAAA,KAAAU,IAAAA,CAK9CM,KAAAgzB,aAAU;QAAA3sB,SAEKitB;QAAa1kB,MAChBlP,EAAE,qDAAqD;IAAA,IAACiJ,KAAAA,GAEvD3J,CAAAA,CAAAA,EAAAA,GAAAs0B,eAAAt0B,CAAAA,CAAAA,EAAAA,GAAAg0B,YAAAh0B,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIVO,KAAAP,EAAE,sCAAsC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CAD5C4B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAU,QAAA;QACnB5B,UAAAA;IAAAA,CACH,GAAOjB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAZXC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,QAEG;QAAA,QAAA9B;QAQA,SAAA6B;QAIU,eAAA;QACN0xB,yJAAWA,eAAAA;IAAAA,CACjB,GAAAv0B,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAhBF8C;AAgBE;ACnCC,SAAA0xB,+BAAA;IAAAx0B,MAAAA,oMAAAC,EAAA,CAAA,GACL,EAAAQ,UAAAA,EAAA,GAAqB6oB,mBACrB,EAAA5oB,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAE9Ci1B,IAAAA,wJAAAA,yBAAAA,EAAuBh0B,UAAU,GAAC,OAAA;IAAAH,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAQ/BJ,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,YAAA,EAAA;QAAaI;QAAW,SAAA;IAAA,CAAiD,GAAAV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAA,OAAAZ,CAAAA,CAAAS,CAAAA,CAAAA,KAAAA,WAAAi0B,UAAAA,CAAAhoB,MAAAA,IAAA1M,CAAAA,CAAA,CAAA,CAAA,KAAAM,KAAAA,CAHhFM,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,QAAA;QAEG,SAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAA;YAAW,MAAA;YAAU,QAAA;YACpBN,UAAAA;gBAAAA;gBAA2E;gBAC1EG,WAAUi0B,UAAAA,CAAAhoB,MAAAA;aACb;QAAA,CAAA;QAEU,eAAA;QACNioB,MAAAA,sKAAAA;IAAAA,CACN,GAAA30B,CAAAA,CAAAS,CAAAA,CAAAA,GAAAA,WAAAi0B,UAAAA,CAAAhoB,MAAAA,EAAA1M,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EATFY;AASE;ACvBC,MAAMg0B,mMAAwBC,cAAAA,EAAY;IAC/CntB,MAAM;IACNotB,SAAS;IACT7O,aAAa;AACf,CAAC,GAGY8O,kMAAuBF,cAAAA,EAAY;IAC9CntB,MAAM;IACNotB,SAAS;IACT7O,aAAa;AACf,CAAC,GCDK+O,kBAAkB,KAGXhmB,6LAAazN,SAAAA,mJAAOC,MAAG,CAAA,CAAA;;AAAA,CAAA;gLAKJD,SAAAA,mJAAOa,OAAI,EAAE8M,KAAAA,CAAM;IACjDC,OAAO;IACPC,WAAW;IACXC,SAAS;AACX,CAAC,CAAA,CAAA;;AAAA,CAAA;AAiBM,SAAA4lB,wBAAA30B,EAAAA,EAAA;IAAAN,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAAiC,EAAAuuB,OAAAA,EAAA0G,kBAAAA,EAAAA,GAAA50B,IAItC,EAAAI,CAAAA,EAAYC,+JAAAA,iBAAAA,EAAAnB,wBAAuC,GACnD21B,+KAAiBC,eAAAA,CAAAA,IACjB3lB,WAAiB,CAAA,oBAAA,4MAAuBC,QAAAA,CAAO,CAAA,GAAA,EAC/CxF,wKAAkBmrB,eAAAA,CAAa;IAACz0B,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACPhC,KAAA;QAAA00B,YAAa;IAAA,GAAat1B,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAnD,MAAAu1B,qKAAexnB,YAAAA,EAAUnN,EAA0B,GACnDwH,6JAAcC,WAAAA,CAAAA,IACdmtB,sKAAgBC,YAAAA,CAAAA,IAEhB,CAAAC,cAAAC,eAAA,CAAA,GAAwC1lB,qNAAAA,EAAAA,CAAAA,CAAc,GAEtD,CAAA2lB,MAAAC,OAAA,CAAA,6MAAwB5lB,WAAAA,EAAS,EAAE,GAEnC,CAAA6lB,UAAAC,WAAA,CAAA,6MAAgC9lB,WAAAA,KAChC,CAAA+lB,oBAAAC,qBAAA,CAAA,6MAAoDhmB,WAAAA,EAAAA,CAAAA,CAAuB,GAC3E,CAAAimB,eAAAC,gBAAA,CAAA,6MAA0ClmB,WAAAA,EAAAA,CAAAA,CAAuB;IAACjP,IAAAA;IAAA,KAAA;QAGhE,MAAAo1B,YAAkB;QACd,IAAA,CAAClsB,aAAS,CAAKqrB,QAAM;YAAAt0B,IAAAA;YAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAAS3B,uJAAA6L,KAAAA,EAAGspB,SAAS,GAACp2B,CAAAA,CAAAA,EAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA,EAApBgB,KAAOC;YAAauT,MAAAA;QAAAA;QAAAvT,IAAAA;QAAAjB,IAAAA,CAAAA,CAAAA,EAAAA,KAAAu1B,OAAAlpB,UAAAA,IAAArM,CAAAA,CAAAA,EAAAA,KAAAkK,WAAA;YAAArH,IAAAA;YAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAIvCC,MAAAwzB,CACgBA,QAAAA,MAAKvsB,MAAAA,CAAAC,OACiB,EAAC0J,IAAAA,CAAA/E,QACD,IACrB,WAAW0nB,WAC/Bp2B,CAAAA,CAAAA,EAAAA,GAAA6C,GAAAA,IAAAA,MAAA7C,CAAAA,CAAA,CAAA,CAAA;YAAA8C,IAAAA;YAAA9C,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEUE,MAAAA,qJAAMgK,KAAAA,EAAGspB,SAAS,GAACp2B,CAAAA,CAAAA,EAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,CAAA,CAAA,EAV3BiB,MAAAs0B,OAAMlpB,UAAAA,CAAAC,OAAAA,CAAA;gBAAAY,KAC2C,CAAA,UAAA,EAAahD,SAAS,CAAA,MAAA,CAAA;YAAA,CAAS,EAACY,IAAAA,kJAEpFtB,MAAAA,EAAI3G,GAKH,oJACDkI,YAAAA,EAAUqrB,SAAS,oJACnBjpB,aAAAA,EAAWrK,GAAmB,CAChC,GAAC9C,CAAAA,CAAA,CAAA,CAAA,GAAAu1B,OAAAlpB,UAAAA,EAAArM,CAAAA,CAAAA,EAAAA,GAAAkK,WAAAlK,CAAAA,CAAAA,EAAAA,GAAAiB;QAAA,OAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA;QAXIiB,KAAAA;IAAAA;IAcTq1B,MAAAA,iBAAsBxyB,gKAAAA,EAjByC9C,EAiBb;IAACC,IAAAA;IAAAjB,CAAAA,CAAAu1B,CAAAA,CAAAA,KAAAA,UAAAv1B,CAAAA,CAAA41B,CAAAA,CAAAA,KAAAA,QAAA51B,CAAAA,CAAAk1B,CAAAA,CAAAA,KAAAA,sBAAAl1B,CAAAA,CAAAA,GAAAA,KAAAkK,aAAAlK,CAAAA,CAAA,EAAA,CAAA,KAAAs2B,iBAAAt2B,CAAAA,CAAA,EAAA,CAAA,KAAAm1B,YAAAn1B,CAAAA,CAAA,EAAA,CAAA,KAAAoI,QAAAA,CAElCnH,KAAAA,MAAA;0BACK,GACpBs0B,OAAMjpB,OAAAA,CAAA;YAAAY,KAEG,CAAA,gBAAA,EAAmBhD,SAAS,CAAA,SAAA,CAAA;YAAWqsB,QACpC;YAAMC,MAAA;gBAAAZ;gBAAAa,YAAA1kB,QAAA0Y,SAAAzS;gBAAAse;gBAAArvB,MACuD;YAAA;QAAM,CAC5E,EAACyvB,IAAAA,CAAApqB,CAAA,YAAA;YAEIA,WAAAA,CACE4oB,sBAAoBA,sBACxBC,SAAQwB,GAAAA,CAAA5B,oBAAyB,GACjC3sB,MAAKgC,IAAAA,CAAA;gBAAAhJ,OAAc;YAAA,CAAwB,CAAA;QAAA,CAE9C,EAACw1B,KAAAA,CAAAC,CAAA,QAAA;YAEA,MAAAzpB,aAAmBypB,KAAGC,UAAA1pB,YACtB2pB,aAAmBF,KAAGC,UAAAN,MAAAt1B;YAClBkM,eAAkB,OAAA,CAEpB6oB,sBAAAA,CAAAA,CAA0B,GAC1BF,YAAYgB,UAAU,CAAA,GAEpB3pB,eAAkB,MAAA,CAGpB+oB,iBAAAA,CAAAA,CAAqB,GACrBJ,YAAYgB,UAAU,CAAA,IAEtB3uB,MAAKgC,IAAAA,CAAA;gBAAAhJ,OACI;gBAA8C2C,QAC7C;YAAA,CACT;QAAA,CAEJ,EAACizB,OAAAA,CAAA,MAAA;YAEArB,gBAAAA,CAAAA,CAAqB;QAAA,CACtB;IAAA,GACJ31B,CAAAA,CAAAA,EAAAA,GAAAu1B,QAAAv1B,CAAAA,CAAAA,EAAAA,GAAA41B,MAAA51B,CAAAA,CAAAA,EAAAA,GAAAk1B,oBAAAl1B,CAAAA,CAAAA,GAAAA,GAAAkK,WAAAlK,CAAAA,CAAAA,GAAAA,GAAAs2B,eAAAt2B,CAAAA,CAAAA,GAAAA,GAAAm1B,UAAAn1B,CAAAA,CAAAA,GAAAA,GAAAoI,OAAApI,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAtCDi3B,MAAAA,WAAiBh2B,IAyC6B4B,KAAA2yB,QAAO0B,UAAAA;IAAWp0B,IAAAA;IAAA9C,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIlDoC,KAAApC,EAAE,uCAAuC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIxCwD,KAAAxD,EAAE,4CAA4C,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAAwuB,EAAAA,CAAAA,KAAAA,WAAAxuB,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CAFzCiC,KAAA;QAAAkB,SACHmnB;QAAO5e,MACV1L;IACPlE,GAAAA,CAAAA,CAAAA,GAAAA,GAAAwuB,SAAAxuB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAIW,MAAAoG,KAAA4vB,sBAAsBE;IAAa7vB,IAAAA;IAAArG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACvC2F,KAAA3F,EAAE,+CAA+C,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAA01B,gBAAA11B,CAAAA,CAAAi3B,EAAAA,CAAAA,KAAAA,YAAAj3B,CAAAA,CAAAoG,EAAAA,CAAAA,KAAAA,MAAApG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAJ3CE,MAAA;QAAAc,SACJ4vB;QAAQld,SACR2b;QAAYxkB,UACX9K;QAAmCwJ,MACvCvJ;QAAkD8J,MAClD;QAASlJ,MACT;IAAA,GACPjH,CAAAA,CAAAA,GAAAA,GAAA01B,cAAA11B,CAAAA,CAAAA,GAAAA,GAAAi3B,UAAAj3B,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAmG,KAAAA,CAZKM,MAAA;QAAAoJ,cACQ1J;QAGb2J,eACcvJ;IAQhBvG,GAAAA,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA7I,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAMUmI,MAAAnI,EAAE,4CAA4C,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAAnJ,CAAAA,CAAAA,GAAAA,KAAA6I,MAAAA,CAAtDM,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;QAAMN,UAAgD;IAAA,CAAA,GAAO7I,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAAAoJ,IAAAA;IAAApJ,CAAAA,CAAAk2B,EAAAA,CAAAA,KAAAA,iBAAAl2B,CAAAA,CAAAg2B,EAAAA,CAAAA,KAAAA,sBAAAh2B,CAAAA,CAAA01B,EAAAA,CAAAA,KAAAA,gBAAA11B,CAAAA,CAAAA,GAAAA,KAAA81B,YAAA91B,CAAAA,CAAA,EAAA,CAAA,KAAA41B,QAAA51B,CAAAA,CAAA,EAAA,CAAA,KAAAi3B,YAAAj3B,CAAAA,CAAA,EAAA,CAAA,KAAAU,IAAAA,CAC7D0I,MAAA4sB,sBAAsBE,gBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJACpB,OAAA,EAAW;QAAA,MAAA;QAAoB,SAAC;QAAU,QAAA;QAAW,QAAA;QACpD,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,kJAAA,QAAA,EAAA;YAAW,MAAC;YACVF,UAAAA;gBAAAA,sBACIF,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAAA,mOAAAA,EAAAA;oBAAAA,UAAAA,YAAYp1B,EAAE,sDAAsD;gBAAA,CAAC;gBAEzEw1B,iBAAa,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mOAAA,EAAA;oBACTJ,UAAYp1B,YAAAA,EAAE,+CAA+C;gBAAC,CAAA;aAAA;QAAA,CAErE;IAAA,CACF,IAEA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,QAAA,EAAA;QAAa,OAAA;QAAkB,eAAC;QAC/B,UAAA;YAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,YAAA,EAAA;gBACc,aAAAA,EAAE,uDAAuD;gBAC5Dg1B,UAAW;gBACV,WAAAjrB,CAAA,MAAA;oBACLA,EAACsM,GAAAA,KAAS,WAASkgB,SAAS;gBAAA;gBAEvBjC,WAAAA;gBACJY,OAAAA;gBACG,UAAA9jB,CAAA,QAAA;oBACArH,QAAAA,IAACknB,aAAAA,CAAA9wB,KAAoB;gBAAA;YAAA,CAC9B;YAGF,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAW,OAAA;gBAAQ,OAAA,CAAA;gBAAY,MAAA;gBAAI,UAAG+0B,GAAAA,KAAInzB,MAAA,CAAA,CAAA,EAAAuyB,eAAA,EAAA;YAA6B,CAAA;SAAA;IAC1E,CAAA,GACDh1B,CAAAA,CAAAA,GAAAA,GAAAk2B,eAAAl2B,CAAAA,CAAAA,GAAAA,GAAAg2B,oBAAAh2B,CAAAA,CAAAA,GAAAA,GAAA01B,cAAA11B,CAAAA,CAAAA,GAAAA,GAAA81B,UAAA91B,CAAAA,CAAAA,GAAAA,GAAA41B,MAAA51B,CAAAA,CAAAA,GAAAA,GAAAi3B,UAAAj3B,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoJ,GAAAA,IAAAA,MAAApJ,CAAAA,CAAA,EAAA,CAAA;IAAAqJ,IAAAA;IAAArJ,CAAAA,CAAAmJ,EAAAA,CAAAA,KAAAA,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAAoJ,MAAAA,CA/BLC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,YAAA;QACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,QAAA,EAAA;YAAa,OAAC;YACbF,UAAAA;gBAAAA;gBACCC;aAAAA;QA6BH,CAAA;IACF,CAAA,GAAapJ,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAAAsJ,IAAAA;IAAAtJ,CAAAA,CAAAyP,EAAAA,CAAAA,KAAAA,YAAAzP,CAAAA,CAAA,EAAA,CAAA,KAAAwuB,WAAAxuB,CAAAA,CAAAyG,EAAAA,CAAAA,KAAAA,OAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAAqJ,OAAArJ,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CAtDfwG,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mLAAC,UAAA,EACQ;QAAA,OAAA;QACHmG,IAAAA;QACI,QAAA3M;QACA,QAAA2D;QAcC+nB;QACOA,gBAAAA;QAEhBnlB,UAAAA;IAkCF,CAAA,GAASrJ,CAAAA,CAAAA,GAAAA,GAAAyP,UAAAzP,CAAAA,CAAAA,GAAAA,GAAAwuB,SAAAxuB,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAAAgK,IAAAA;IAAA,OAAAhK,CAAAA,CAAAA,GAAAA,KAAAsJ,OAAAtJ,CAAAA,CAAAw1B,EAAAA,CAAAA,KAAAA,QAAA0B,UAAAA,GAAAA,CAxDXltB,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,iBAAA,EAAA;QAAyB,UAAA;QAAkB,SAAAnH;QAC1CyG,UAAAA;IAAAA,CAwDF,GAAiBtJ,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAA,EAAA,CAAA,GAAAw1B,QAAA0B,UAAAA,EAAAl3B,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA,EAzDjBgK;AAyDiB;AAzId,SAAA0E,SAAAyoB,MAAAA,EAAA;IAAA,OA6BqBC,OAAI1vB,IAAAA,KAAU;AAAQ;AA7B3C,SAAAqC,QAAAqtB,IAAAA,EAAA;IAAA,OA4BuBA,MAAIC;AAAA;AChDlC,MAAMC,gBAAgB;IAACvd,SAAS,CAAA;IAAMjZ,OAAO,CAAA;IAAOiD,QAAQ4F,KAAAA;AAAS,GAC/D4tB,cAAc;IAACxd,SAAS,CAAA;IAAOjZ,OAAO,CAAA;IAAOiD,QAAQ;AAAM,GAC3DyzB,iBAAiB;IAACzd,SAAS,CAAA;IAAOjZ,OAAO,CAAA;IAAOiD,QAAQ;AAAU,GAClE0zB,gBAAgB;IAAC1d,SAAS,CAAA;IAAOjZ,OAAO,CAAA;IAAOiD,QAAQ;AAAS,GAChE2zB,gBAAgB;IAAC3d,SAAS,CAAA;IAAOjZ,OAAO,CAAA;IAAOiD,QAAQ;AAAS,GAGzD4zB,wBAAwBA,MAAA;IAAA33B,MAAAA,oMAAAC,EAAA,CAAA;IAAAK,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACVtC,KAAA;QAAAg1B,YAAa;IAAA,GAAat1B,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAnD,MAAAu1B,SAAexnB,wKAAAA,EAAUzN,EAA0B,GACnD4J,wKAAkBmrB,eAAAA,CAAa;IAACz0B,IAAAA;IAAA,KAAA;QAG1B,IAAA,CAAC20B,UAAM,CAAKrrB,WAAS;YAAAlJ,IAAAA;YAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAChB5B,uJAAA8L,KAAAA,EAAAyqB,WAAc,GAACv3B,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAtBY,KAAOI;YAAewT,MAAAA;QAAAA;QAAAxT,IAAAA;QAAAhB,CAAAA,CAAAu1B,CAAAA,CAAAA,KAAAA,UAAAv1B,CAAAA,CAAAA,EAAAA,KAAAkK,YAAAA,CAGjBlJ,MAAA42B,kBAAkBrC,QAAQrrB,SAAS,GAAClK,CAAAA,CAAAA,EAAAA,GAAAu1B,QAAAv1B,CAAAA,CAAAA,EAAAA,GAAAkK,WAAAlK,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAA3CY,KAAOI;IAAAA;IALT,MAAA62B,qBAA2Bj3B,IAQ3B,EAAAmZ,OAAAA,EAAAjZ,KAAAA,EAAAiD,MAAAA,EAAAA,OAAiCD,6JAAAA,EAAc+zB,oBAAkBP,aAAe;IAACt2B,IAAAA;IAAA,OAAAhB,CAAAA,CAAAc,CAAAA,CAAAA,KAAAA,SAAAd,CAAAA,CAAAA,EAAAA,KAAA+Z,WAAA/Z,CAAAA,CAAA,CAAA,CAAA,KAAA+D,SAAAA,CAC1E/C,KAAA;QAAAqf,MAAOtc;QAAMgW;QAAAjZ;IAAAA,GAAiBd,CAAAA,CAAAA,EAAAA,GAAAc,OAAAd,CAAAA,CAAAA,EAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAA9BgB;AAA8B;AAGvC,SAAS42B,kBAAkBrC,MAAAA,EAAsBrrB,SAAAA,EAAmB;IAC3DqrB,OAAAA,OAAOlpB,UAAAA,CACXC,OAAAA,CAAgC;QAC/BY,KAAK;QACLd,KAAK;IACN,CAAA,EACAtB,IAAAA,8JACCtB,OAAAA,EAAKsuB,CAAa,aAAA;QACZ,IAAA,CAACA,YAAYA,SAASr1B,MAAAA,KAAW,GAC5B80B,OAAAA;QAIT,MAAMQ,kBAAkBD,SAAShuB,MAAAA,CAC9BwC,CAAYA,UAAAA,QAAQ0rB,UAAAA,KAAe9tB,aAAaoC,QAAQrF,IAAAA,KAAS,MACpE,GAEMgxB,kBAAkBF,gBAAgBtkB,IAAAA,CAAMnH,CAAYA,UAAAA,QAAQvI,MAAAA,KAAW,UAAU;QAErFk0B,OAAAA,oNACAC,UAAAA,qMAAQC,WAAAA,EAAS,IAAIC,KAAKH,gBAAgBI,SAAS,GAAG,CAAC,GAAG,aAAA,GAAA,IAAID,KAAK,CAAC,IAE7DZ,iBAGcO,gBAAgBtkB,IAAAA,CACpCnH,CAAAA,UACCA,QAAQvI,MAAAA,KAAW,8MACnBm0B,UAAAA,qMAAQC,WAAAA,EAAS,IAAIC,KAAK9rB,QAAQ+rB,SAAS,GAAG,CAAC,GAAG,aAAA,GAAA,IAAID,KAAM,CAAA,CAChE,IAESX,gBAGiBM,gBAAgBtkB,IAAAA,CACvCnH,CAAAA,UACCA,QAAQvI,MAAAA,KAAW,+MACnBu0B,YAAAA,qMAASH,WAAAA,EAAS,IAAIC,KAAK9rB,QAAQ+rB,SAAS,GAAG,CAAC,GAAG,aAAA,GAAA,IAAID,KAAK,CAAC,CACjE,IAE2BV,gBAAgBH;IAAAA,CAC5C,iKACDpqB,aAAAA,EAAY0pB,CACVtR,MAAAA,CAAAA,QAAQzkB,KAAAA,CAAM,mCAAmC+1B,GAAG,oJAC7C/pB,KAAAA,EAAG;YAACiN,SAAS,CAAA;YAAOjZ,OAAO,CAAA;YAAMiD,QAAQ4F,KAAAA;QAAU,CAAA,CAAA,CAC3D,gKACDoB,aAAAA,EAAUusB,aAAa;AAE7B;AC3EO,SAAAiB,6BAAAj4B,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAsC,EAAAu4B,kBAAAA,EAAAA,GAAAl4B,IAG3C+hB,kBAAoBC,yKAAAA,KAEpB,EAAAjC,MAAAoY,iBAAAA,EAAA1e,SAAA2e,oBAAAA,EAAA53B,OAAA63B,kBAAAA,EAAAA,GAIIhB,sBACJ,GAAA,CAAAiB,aAAAC,cAAA,CAAA,6MAAsC5oB,WAAAA,EAAAA,CAAAA,CAAc;IAACrP,IAAAA;IAE7C63B,KAAAA,sBAAsB,aAAaA,sBAAsB,cAAcG;IAD/E,MAAAE,iBAAuBl4B;IAGtBI,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAqiB,aAAAgU,QAAAA,CACwBr1B,KAAAqhB,aAAWgU,SAAa,CAAA,CAAA,EAAAr2B,CAAAA,CAAA,CAAA,CAAA,GAAAqiB,aAAAgU,OAAAr2B,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAjD,MAAA+4B,mBAAyB/3B,IACzBg4B,eAAqBD,iBAAgBt2B,MAAAA,KAAa,KAAIs2B,gBAAAA,CAAgB,CAAA,CAAA,CAAArxB,IAAAA,KAAa,UACnF,CAAAuxB,6BAAAC,8BAAA,CAAA,6MAAsEjpB,WAAAA,EAAAA,CAAAA,CAAc;IAAChP,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEpD3B,KAAA;QAAA6T,OAAQ;IAAA,GAAQ9U,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAjDm5B,MAAAA,yKAAmBC,gBAAAA,EAAcn4B,EAAgB,GACjD,EAAAP,CAAAA,EAAYC,GAAAA,6KAAAA,EAAAnB,wBAAuC,GACnD65B,gLAAkBjE,eAAAA,CAAa;IAAC,IAAAkE,YAAAz2B;IAAA7C,CAAAA,CAAA+4B,CAAAA,CAAAA,KAAAA,oBAAA/4B,CAAAA,CAAAA,EAAAA,KAAAm5B,aAAAA,CAEhCG,aAAmBP,iBAAgBvvB,GAAAA,CAAAO,OAAyB,GAC9ClH,KAAAs2B,WAAUI,aAAAA,CACPD,UAAU,EAAC9vB,GAAAA,CAAAkF,QAG1B,GAAC1O,CAAAA,CAAAA,EAAAA,GAAA+4B,kBAAA/4B,CAAAA,CAAAA,EAAAA,GAAAm5B,YAAAn5B,CAAAA,CAAAA,EAAAA,GAAAs5B,YAAAt5B,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,CAAAy2B,aAAAt5B,CAAAA,CAAA,CAAA,CAAA,EAAA6C,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAJH,MAAAq2B,QAAcxzB;IAIXC,IAAAA;IAAA9C,CAAAA,CAAAA,EAAAA,KAAAq2B,QAAAA,CAUqBvzB,KAAA;QAAA02B,OAAAA,IAAiBnD,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0NAAAA,WAAAA,EAAAA;gBAAAA,UAAK;YAAA,CAAA;IAAA,GAAKr2B,CAAAA,CAAAA,EAAAA,GAAAq2B,OAAAr2B,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,EAAAA,KAAAs5B,cAAAt5B,CAAAA,CAAAq2B,EAAAA,CAAAA,KAAAA,MAAA5zB,MAAAA,GAAAA,CAC/ByB,KAAA;QAAAxB,OAAQ2zB,MAAK5zB,MAAAA;QAAA4zB,OAAgBiD;IAAAA,GAAWt5B,CAAAA,CAAAA,EAAAA,GAAAs5B,YAAAt5B,CAAAA,CAAA,EAAA,CAAA,GAAAq2B,MAAA5zB,MAAAA,EAAAzC,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAw4B,sBAAAx4B,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CALpDiC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAU,QAAA;QACpB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,YAAA,EAAA;YACIzF;YACK,SAAA;YACI,YAAAoC;YACJ,QAAAoB;YACCs0B,SAAAA;QAAAA,CAEb;IAAA,CAAA,GAAOx4B,CAAAA,CAAAA,GAAAA,GAAAw4B,oBAAAx4B,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAAg5B,EAAAA,CAAAA,KAAAA,gBAAAh5B,CAAAA,CAAA84B,EAAAA,CAAAA,KAAAA,kBAAA94B,CAAAA,CAAA24B,EAAAA,CAAAA,KAAAA,sBAAA34B,CAAAA,CAAAA,GAAAA,KAAA04B,wBAAA14B,CAAAA,CAAA,EAAA,CAAA,KAAAy4B,qBAAAz4B,CAAAA,CAAA,EAAA,CAAA,KAAAU,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAq5B,YAAAA,CAGPjzB,KAAA4yB,gBAAgBP,qBAAsBE,CAAAA,sBAAAA,CAAuBD,uBAAoB;QAAArxB,SAElEyxB,iBAAcnvB,KAAAA,IAAA,MAAA;YAGjBuvB,+BAAAA,CAAAA,CAAmC,GACnCG,UAAS1C,GAAAA,CAAA/B,qBAA0B;QAAC;QACrChlB,MAEDlP,EADEo4B,iBACA,mEACA,gEADgE;QACC3oB,MACjE2oB,iBAAiB,YAAY;QAAS5nB,UAClC4nB;QAAcxF,MAClBwF,iBAAiB,UAAOnvB,KAAAA;IAAAA,IAAYA,KAAAA,GAEnC3J,CAAAA,CAAAA,GAAAA,GAAAg5B,cAAAh5B,CAAAA,CAAAA,GAAAA,GAAA84B,gBAAA94B,CAAAA,CAAAA,GAAAA,GAAA24B,oBAAA34B,CAAAA,CAAAA,GAAAA,GAAA04B,sBAAA14B,CAAAA,CAAAA,GAAAA,GAAAy4B,mBAAAz4B,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAq5B,WAAAr5B,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CA5BjBC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,QAEG;QAAA,SAAAF;QAWA,QAAAC;QAiBU,eAAA;QACNmuB,yJAAWA,eAAAA;IACjB,CAAA,GAAAv0B,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAAi5B,8BAAAA,CACD1yB,MAAA0yB,+BACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,yBACU;QAAA,SAAA,IAAMC,+BAA8B,CAAA,CAAM;QAC/B,oBAAA,MAAA;6BACC,GACnBA,+BAAAA,CAAAA,CAAoC;QAGzC;IAAA,CAAA,GAAAl5B,CAAAA,CAAAA,GAAAA,GAAAi5B,6BAAAj5B,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,OAAAA,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CA1CHI,MACEJ,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,0NAAAA,WAAAA,EAAAA;QAAAA,UAAAA;YAAAA;YAiCCE;SAAAA;IAQA,CAAA,GACAvG,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA,EA3CHyG;AA2CG;AA1EA,SAAAiI,SAAA+qB,IAAAA,EAAA;IA2BDA,OAAAA,KAAIxyB,IAAAA,KAAU,YAAY,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA;QAAwBwyB,UAAAA,KAAI54B,KAAAA;IAAjB44B,GAAAA,KAAI54B,KAAoB,IAAU44B,KAAI54B,KAAAA;AAAM;AA3BhF,SAAAkJ,QAAAqtB,IAAAA,EAAA;IAAA,OAuB6CA,KAAIh2B,KAAAA;AAAA;ACb3Cs4B,MAAAA,mOAAyB1U,OAAAA,EAAK,MAAM;IACzCzhB,MAAAA,2BAAuBkE,kLAAAA,KACvB,EAAClC,MAAAA,EAAQhB,UAAAA,EAAYD,gBAAAA,EAAkBq1B,cAAAA,EAAgBx1B,UAAAA,SAAAA,EAAAA,GAAY+C,cAAc,GACjF0yB,oBAAoBt1B,gBAAAA,CAAiBC,UAAU,CAAA,EAAA,CAAI,CAAC,CAAA,CAAEe,IAEtDu0B,gBADcv1B,gBAAAA,CAAiBC,aAAa,CAAC,CAAA,EAAA,CACf,CAAC,CAAA,EAC/Bu1B,WAAWD,eAAev0B,IAC1By0B,iBAAiBxrB,CAAAA,CAAQsrB,eAAet0B,QAAQy0B,KAChDlzB,0NAAgB4e,UAAAA,EAAQ,IACpBngB,QAAQuB,uKAAiBmzB,aAAAA,EAAe10B,OAAOuB,aAAa,KAAM,MACzE;QAACvB,QAAQuB,aAAa;KAAC,GACpB,EAACpG,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAenB,wBAAwB,GAa7C06B,2BAA0BxU,mNAAAA,EAAQ,MAAuC;QACvEyU,MAAAA,uBAAuBrzB,eAAAA,CAAgB,CAAC,CAAA;QAG9C,IAAI,CAACgzB,YAAY,CAACK,wBAAwB,CAACrzB,eACzC,QAAOgG,qJAAAA,EAAG;YAACiN,SAAS,CAAA;QAAA,CAAM;QAG5B,MAAMlO,0KAAcvE,iBAAAA,EAAewyB,QAAQ,GACrC/c,QAAOkd,kKAAAA,EAAeE,oBAAoB,GAG1CC,oBAAoBrd,KAAKsd,SAAAA,CAC5B7mB,CAAyB,IAAA,OAAOA,KAAK,YAAY,UAAUA,CAC9D;QAEO8mB,wJAAAA,SAAAA,EAAAA,iCAAAA;yJAELxtB,KAAAA,EAAG;YAACiN,SAAS,CAAA;QAAA,CAAK,GAAA,6DAAA;QAElBxW,qBACGg3B,iCAAAA,CACC1uB,aACCuuB,sBAAsB,CAAA,IAAKrd,OAAOA,KAAKrY,KAAAA,CAAM,GAAG01B,iBAAiB,CACpE,EACCtvB,IAAAA,CAAAA,kEAAAA;QAAAA,mEAAAA;QAAAA,+DAAAA;QAAAA,4BAAAA;sKAKC0vB,eAAAA,EAAa,GAAG,IAChBhxB,mKAAAA,EACE,CAAC,EAAC7F,KAAAA,EAAOE,SAAAA,EAAAA,GAAAA,CAAqC;gBAC5CkW,SAAS,CAAA;gBACT0gB,QAAQ;oBACNC,cAAc;wBACZ/2B,OAAOA,MAAM+2B,YAAAA;wBACb72B,WAAWA,UAAU62B,YAAAA;oBACvB;oBACAvmB,WAAUwmB,2JAAAA,EAAmBh3B,MAAMi3B,QAAAA,IAAY/2B,UAAU+2B,QAAAA,EAAU9zB,aAAa,GAC5E+zB;gBAAAA;YACN,CAAA,CAEJ;IAEN,GACC;QAACt3B;QAAsBu2B;QAAUhzB,aAAa;KAAC,GAC5Cg0B,gBAAgBh3B,iKAAAA,EAAco2B,yBAAyB;QAACngB,SAAS,CAAA;IAAA,CAAK,GAEtEghB,4BAAwBzV,oNAAAA,EAAY,MAAM;QAC1CwV,cAAc/gB,OAAAA,IAEd+gB,cAAcL,MAAAA,EAAQtmB,YACxBwlB,eAAe;YACbr0B,IAAIw1B,cAAcL,MAAAA,CAAOtmB,QAAAA;YACzB5O;QAAAA,CACD;IAAA,GAEF;QAACu1B,cAAc/gB,OAAAA;QAAS+gB,cAAcL,MAAAA;QAAQd;QAAgBp0B,MAAM;KAAC;IAkBxE,OAAA,0EAAA;IAdE,CAACu0B,YACD,CAAChzB,iBAAAA,8CAAAA;IAEDizB,kBAAAA,mBAAAA;IAEAe,cAAc/gB,OAAAA,IAAAA,4EAAAA;IAAAA,8EAAAA;IAAAA,iDAAAA;IAIb,CAAC+gB,cAAcL,MAAAA,EAAQC,aAAa/2B,MAAMq3B,aACzC,CAACF,cAAcL,MAAAA,EAAQC,aAAa72B,UAAUm3B,aAAAA,yEAAAA;IAEhDF,cAAcL,MAAAA,EAAQtmB,aAAaylB,oBAEd,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAGpB,QACC;QAAA,QACEkB,cAAcL,MAAAA,EAAQtmB,WAClB;YACE9M,SAAS0zB;YACT/3B,MAAMi4B,8JAAAA;YACNrrB,MAAMlP,EAAE,oEAAoE;QAAA,IAE9E;YACEmV,IAAI1R;YACJnB,yJAAMyrB,YAAAA;YACN7e,MAAMlP,EAAE,mEAAmE;QAC7E;QAEN,eAAY;QACZ,SAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACG,wJAAA,EAAK;YAAA,MAAM;YAAG,QAAO;YACnBo6B,UAAAA,cAAcL,MAAAA,EAAQtmB,WACnBzT,EAAE,sDAAsD,IACxDA,EAAE,sDAAsD;QAC9D,CAAA;QAEF,yJAAMw6B,qBAAAA;QACN,MAAK;IACL,CAAA;AAEN,CAAC;AAEDxB,uBAAuBjkB,WAAAA,GAAc;ACrJ9B,MAAM0lB,8LAAmBtG,cAAAA,EAAsB;IACpDntB,MAAM;IACNotB,SAAS;IACT7O,aAAa;AACf,CAAC;ACUM,SAAAmV,oBAAA96B,EAAAA,EAAA;IAAAN,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GAA6B,EAAAo7B,SAAAA,EAAAz0B,UAAAA,EAAAnG,UAAAA,EAAAA,GAAAH,IAKlC,EAAAI,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC,GACnD,CAAA87B,cAAAC,aAAA,CAAA,4MAAsCtrB,YAAAA,EAAAA,CAAAA,CAAc,GACpD,CAAAurB,cAAAC,aAAA,CAAA,6MAAsCxrB,WAAAA,EAAAA,CAAAA,CAAc,GACpDopB,aAAkBjE,kLAAAA,KAElB,EAAAsG,OAAAA,EAAAC,cAAAA,EAAkCzH,+JAAAA,uBAAAA,EAAqBttB,YAAYy0B,WAAS96B,SAAW,EAAE;IAACK,IAAAA;IAAAZ,CAAAA,CAAA07B,CAAAA,CAAAA,KAAAA,WAAA17B,CAAAA,CAAAA,EAAAA,KAAAq5B,YAAAA,CAExDz4B,KAAAA,MAAA;QAChC86B,QAAOrH,OAAAA,CACPkH,GAAAA,cAAAA,CAAAA,CAAkB,GAClBlC,UAAS1C,GAAAA,CAAAwE,kBAAA;YAAAS,qBAA6C;QAAA,CAAU;IACjE57B,GAAAA,CAAAA,CAAAA,EAAAA,GAAA07B,SAAA17B,CAAAA,CAAAA,EAAAA,GAAAq5B,WAAAr5B,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA67B,gBAAsBj7B;IAIEI,IAAAA;IAAAhB,CAAAA,CAAA27B,CAAAA,CAAAA,KAAAA,kBAAA37B,CAAAA,CAAAA,EAAAA,KAAAq5B,YAAAA,CAEUr4B,KAAAA,MAAA;QAChC26B,eAActH,OAAAA,CACdoH,GAAAA,cAAAA,CAAAA,CAAkB,GAClBpC,UAAS1C,GAAAA,CAAAwE,kBAAA;YAAAS,qBAA6C;QAAA,CAAU;IACjE57B,GAAAA,CAAAA,CAAAA,EAAAA,GAAA27B,gBAAA37B,CAAAA,CAAAA,EAAAA,GAAAq5B,WAAAr5B,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA87B,gBAAsB96B;IAISC,IAAAA;IAAAjB,IAAAA,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAErB3B,KAAAA,IAAA,MAAA;4BAEa,GACnBw6B,cAAAA,CAAAA,CAAmB;QAAA,GAEtBz7B,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,4MALD2Q,YAAAA,EAAU1P,EAKT,GAEGo6B,aAAaA,UAAS73B,GAAAA,IAASu4B,EAAAA,uKAAAA,EAAUV,UAAS73B,GAAI,GAAC,OAAA;IAAAX,IAAAA;IAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAAS,WAAAW,KAAAA,GAAAA,CAYvCyB,KAAA;QAAApC,YAAaA,WAAUW,KAAAA;IAAOpB,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAAS,WAAAW,KAAAA,EAAApB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAJ1CC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAU,QAAA;QACpB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EAAA;YACIpC;YACM,SAAA;YACD,QAAAmC;QAAAA,CAEZ;IAAA,CAAA,GAAO7C,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAGCwD,KAAAxD,EAAE,gCAAgC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACjByF,KAAAzF,EAAE,gDAAgD,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAAA,GAAAA,KAAAmG,KAAAA,CAA7DC,KAAA;QAAAkE,SAAUnE;IAAmD,GAACnG,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAA,EAAA,CAAA,KAAA67B,iBAAA77B,CAAAA,CAAAs7B,EAAAA,CAAAA,KAAAA,gBAAAt7B,CAAAA,CAAAkE,EAAAA,CAAAA,KAAAA,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAH9EC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EAAA;QACUw1B,SAAAA;QACH,MAAA33B;QACQ,cAAAkC;QACLk1B,SAAW;IACpB,CAAA,GAAAt7B,CAAAA,CAAAA,GAAAA,GAAA67B,eAAA77B,CAAAA,CAAAA,GAAAA,GAAAs7B,cAAAt7B,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIM6F,MAAA7F,EAAE,gDAAgD,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACjC+F,MAAA/F,EAAE,gDAAgD,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA7I,CAAAA,CAAAA,GAAAA,KAAAyG,MAAAA,CAA7DoC,MAAA;QAAAyB,SAAU7D;IAAmD,GAACzG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAA87B,iBAAA97B,CAAAA,CAAAw7B,EAAAA,CAAAA,KAAAA,gBAAAx7B,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAA6I,MAAAA,CAH9EM,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2LAAA,EAAA;QACU2yB,SAAAA;QACH,MAAAv1B;QACQ,cAAAsC;QACL2yB,SAAW;IACpB,CAAA,GAAAx7B,CAAAA,CAAAA,GAAAA,GAAA87B,eAAA97B,CAAAA,CAAAA,GAAAA,GAAAw7B,cAAAx7B,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAAAoJ,IAAAA;IAAApJ,OAAAA,CAAAA,CAAAmJ,EAAAA,CAAAA,KAAAA,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAA8C,MAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAAqG,KAAAA,CAtBR+C,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,QAEG;QAAA,SAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;YAAW,OAAA;YAAiB,SAAA;YAAqB,KAAA;YAChDtG,UAAAA;gBAAAA;gBAOAuD;gBAOA8C;aAMF;QAAA,CAAA;QAEU,eAAA;QACNwrB,MAAAA,sKAAAA;IAAAA,CACN,GAAA30B,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAoJ,GAAAA,IAAAA,MAAApJ,CAAAA,CAAA,EAAA,CAAA,EA3BFoJ;AA2BE;AChEO4yB,MAAAA,gMAAiBz6B,UAAAA,mJAAO06B,QAAK,CAAA,CAAA;EAAA,EACtC,CAAC,EAACl6B,KAAAA,EAAK,+KACA6W,MAAAA,CAAAA;;;;;;;;mBAAAA,EAQU7W,MAAME,MAAAA,CAAOgwB,KAAAA,CAAMiK,OAAAA,CAAQ9J,KAAAA,CAAM,CAAC,CAAA,CAAEC,QAAQ,CAAA;qBAAA,EAC1CtwB,MAAME,MAAAA,CAAOgwB,KAAAA,CAAMiK,OAAAA,CAAQ9J,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;;;;;;;qBAAA,EAO9CrsB,MAAME,MAAAA,CAAOgwB,KAAAA,CAAMiK,OAAAA,CAAQ9J,KAAAA,CAAM,CAAC,CAAA,CAAEC,QAAQ,CAAA;uBAAA,EAC1CtwB,MAAME,MAAAA,CAAOgwB,KAAAA,CAAMiK,OAAAA,CAAQ9J,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;;;;;;qBAAA,EAMhDrsB,MAAME,MAAAA,CAAOgwB,KAAAA,CAAMiK,OAAAA,CAAQ9J,KAAAA,CAAM,CAAC,CAAA,CAAEC,QAAQ,CAAA;uBAAA,EAC1CtwB,MAAME,MAAAA,CAAOgwB,KAAAA,CAAMiK,OAAAA,CAAQ9J,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;;;IAAA,CAIpE,CAAA;AAAA,CAAA,EAQU+N,aAAa77B,CAAA,OAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAC,EAAA2G,UAAAA,EAAAnG,UAAAA,EAAAW,KAAAA,EAAAd,GAAAA,IACzB87B,cAAoBx1B,eAAenG,WAAUiH,IAAAA,EAC7C,EAAAhH,CAAAA,EAAAA,wKAAYC,iBAAAA,EAAAnB,wBAAuC;IAAC,IAEhDiB,WAAU47B,+BAAAA,KAA0C,CAAA,GAAA,OAAA;IAAAz7B,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAo8B,eAAAp8B,CAAAA,CAAAS,CAAAA,CAAAA,KAAAA,WAAAiH,IAAAA,IAAA1H,CAAAA,CAAAS,CAAAA,CAAAA,KAAAA,WAAAW,KAAAA,GAAAA,CAMnDR,KAAA,CAACw7B,eAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJACC,OAAA,EAAK;QAAA,OAAA,CAAA;QAAY,MAAA;QACf37B,UAAAA,WAAUW,KAAAA,IAAUX,WAAUiH,IAAAA;IACjC,CAAA,GACD1H,CAAAA,CAAAA,EAAAA,GAAAo8B,aAAAp8B,CAAAA,CAAA,CAAA,CAAA,GAAAS,WAAAiH,IAAAA,EAAA1H,CAAAA,CAAA,CAAA,CAAA,GAAAS,WAAAW,KAAAA,EAAApB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAEoC,MAAAgB,KAAAA,CAACI;IAAKH,IAAAA;IAAAjB,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CACxCH,KAAAG,SAASV,EAAE,6CAA6C,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CAD5D4B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,UAAA,EAAW;QAAA,IAAA;QAAK,gBAAW,CAAA;QAAS,OAAA7B;QAAoB,eAAA;QACtDC,UAAAA;IAAAA,CACH,GAAUjB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CATZC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,gBAAA;QAA6B,cAAA;QAAU,OAAA;QACrClC,UAAAA;YAAAA;YAMDiC;SAAAA;IAGF,CAAA,GAAiB7C,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAVjB8C;AAUiB,GC5Efw5B,+BAA+B,MAAO,KAAK,KAAK,KAAK;AAKpD,SAAAC,oBAAAh3B,MAAAA,EAAA;IAAA,MAAAvF,oMAAAC,EAAA,CAAA,GACLmI,6JAAcC,WAAAA,CAAS;IAAC,IAAA/H,IAAAM;IAAAZ,CAAAA,CAAAuF,CAAAA,CAAAA,KAAAA,UAAAvF,CAAAA,CAAAA,EAAAA,KAAAoI,QAAAA,CAId9H,KAAAA,IAAAA,CACJiF,OAAM2T,OAAAA,IACR9Q,MAAKgC,IAAAA,CAAA;YAAA,GAAU7E,MAAAA;YAAMsoB,UAAAyO;QAAyC,CAAA,GAAC,MAAA;YAG3D/2B,OAAM2T,OAAAA,IACR9Q,MAAKgC,IAAAA,CAAA;gBAAA,GACA7E,MAAAA;gBAAMsoB,UAAA;YAAA,CAGV;QAGJjtB,CAAAA,GAAAA,KAAA;QAAC2E;QAAQ6C,KAAK;KAAA,EAACpI,CAAAA,CAAAA,EAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,EAAAA,GAAAoI,OAAApI,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,CAAAN,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAAY,KAAAZ,CAAAA,CAAA,CAAA,CAAA,6MAblB2Q,YAAAA,EAAUrQ,IAaPM,EAAe;AAAC;ACGrB,MAAM4Q,iBAAkBgrB,CAAkBA,KAAAA,GAAGhrB,cAAAA,CAAe,GAE/CirB,qNAAWr4B,aAAAA,EAA0C,SAAkBrE,KAAAA,EAAOsE,GAAAA,EAAK;IACxF,MAAA,EAACqQ,MAAAA,EAAQgoB,OAAAA,EAAAA,GAAW38B,OAEpB,EACJ48B,kBAAAA,EACAC,cAAAA,EACAvB,WAAWx6B,KAAAA,EACXgsB,SAAAA,EACAjmB,UAAAA,EACAC,YAAAA,EACAoa,YAAAA,EACA4R,QAAAA,EACAgK,UAAAA,EACAvsB,KAAAA,EACAwsB,SAAAA,EACAC,OAAAA,EACAnT,eAAAA,EACAoT,MAAAA,EACAC,kBAAAA,EACApT,UAAAA,EACAqT,sBAAAA,EACAC,qBAAAA,EACAC,QAAAA,EAAAA,GACE9T,gBACE/b,GAAAA,gBAAgBU,+KAAAA,CAChB/K,IAAAA,uKAAWsE,sBAAAA,EAAoBZ,UAAU,GACzC,EAACxF,KAAAA,EAASwrB,GAAAA,iBAKVyQ,GAAAA,yNAAe3X,UAAAA,EAAQ,gKAAM4X,qBAAAA,CAAAA,IAAsB,CAAE,CAAA,GAErDC,WAAW1Q,WAAW2Q,qBAAqBtkB,SAC3C,EAACxY,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAenB,wBAAwB,GAE7Ci+B,mOAAyB/X,UAAAA,EAC7B,IAAA,CAAO;YACLpgB,IAAI;YACJvB,QAAQ;YACRmV,SAASqkB;YACTn8B,OAAOV,EAAE,+CAA+C;YACxDulB,aAAavlB,EAAE,qDAAqD;YACpEktB,UAAU,CAAA;QAAA,CAAA,GAEZ;QAAC2P;QAAU78B,CAAC;KACd;IAEoB+8B,oBAAAA,sBAAsB,6MAE1C9sB,YAAAA,EAAU,MAAM;QACRmY,MAAAA,MAAMvb,cAAcmwB,IAAAA,CACvBC,cAAAA,CAAe/2B,YAAYC,YAAY,EACvCiE,IAAAA,+JACC8yB,MAAAA,EAAKrsB,CAAU,UAAA;YACTA,MAAMtK,IAAAA,KAAS,cACjBo2B,aAAa3B,OAAAA,CAAQmC,qBAAqBtsB,KAAK,CAAC,GAG9CA,MAAMtK,IAAAA,KAAS,YACjBo2B,aAAa3B,OAAAA,CAAQoC,mBAAmBvsB,KAAK,CAAC;QAAA,CAEjD,CACH,EACCmO,SAAAA,CAAU;QAEb,OAAO,MAAM;YACXoJ,IAAIC,WAAAA,CAAY;QAClB;IAAA,GACC;QAACniB;QAAY2G;QAAe1G;QAAcw2B,YAAY;KAAC;IAEpDU,MAAAA,SAASxvB,CAAAA,CAAQ1N,OAAOm9B;IAC9BrtB,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACVotB,UAKFV,aAAa3B,OAAAA,CAAQ;YACnBz0B,MAAM;YACNg3B,SAAS,CAAE,CAAA;YACXrD,UAAU/5B;QAAAA,CACX;IAAA,GAIF;QAACk9B,MAAM;KAAC;IAEX,MAAM,CAACG,SAASC,UAAU,CAAA,6MAAIluB,WAAAA,EAAgC,IAAI,GAG5D,CAACmuB,wBAAwBC,yBAAyB,CAAA,OAAIpuB,iNAAAA,EAAS,CAAA,CAAK;IAC1EU,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QAGV,CAACytB,0BAA0B9tB,SAAS,CAACwsB,WAAWwB,UAAU77B,UAAUy7B,WAAAA,CACtEG,0BAA0B,CAAA,CAAI,GAC9BE,4KAAAA,EAAqBL,OAAO,CAAA;IAAA,GAE7B;QAACE;QAAwBF;QAASpB,WAAWwB,UAAU77B;QAAQ6N,KAAK;KAAC;IAElE8D,MAAAA,mNAASkR,cAAAA,EACZ5O,CAAgC,SAAA;QACpBA,WAAAA,IAAI,GACX,OAAOrS,OAAQ,aACjBA,IAAIqS,IAAI,IACCrS,OAAAA,CACTA,IAAI4P,OAAAA,GAAUyC,IAAAA;IAAAA,GAGlB;QAACrS,GAAG;KACN;IAcE,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,YAAA,EAAA;QACC;QACA,UAAU;QACV,YAAY;QACZ,eAAe;QACf,QAAO;QACP,OAAO;QAEP,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,kBAAA,EAAgB;YAAA;YACf,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAI;gBAAA,IAAG;gBAAO,UAAUmN;gBAAgB,KAAK4C;gBAC3CwV,UAAAA,oBAAoB,gBAAgB,CAACiD,WAAWlpB,SAAS,CAACkpB,WAAWhpB,YACnE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;oBAAM,IAAI;oBAET,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAA;wBAAK,OAAM;wBAAS,WAAU;wBAAS,QAAO;wBAAO,SAAQ;wBAC5D,UAAA;4BAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,UAAA,EAAA;gCAAQ,OAAK,CAAA;4BAAA,CAAA;4BACb,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;gCAAI,WAAW;gCACd,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAK;oCAAA,OAAM;oCAAS,OAAK,CAAA;oCAAC,MAAM;oCAC9BnD,UAAE,EAAA,iCAAiC;gCAAA,CACtC;4BACF,CAAA;yBAAA;oBAAA,CACF;gBACF,CAAA,IACEo8B,cAAc,QAAQpoB,SAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJACvB,MAAA,EAAI;oBAAA,SAAS;oBACZ,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;wBAAMhU,UAAE,EAAA,qCAAqC;oBAAE,CAAA;gBAClD,CAAA,IAGE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0NAAA,WAAA,EAAA;oBAAA,UAAA;wBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,YAAW;4BAAA;4BAAwB,YAAYo8B,UAAUr8B,UAAAA;4BAAY;wBAAA,CAAa;wBACnF,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,cAAA,EAAA;4BACC,yBAAyBwgB;4BACzB,yBAAyBoc;4BACzB,SAASP,UAAU0B,OAAAA;4BACnB;4BACA;4BACA,SAAS1B,UAAU2B,OAAAA;4BACnB,WAAW3B,UAAUwB,SAAAA;4BACrB,QAAQxB,UAAUxb,MAAAA;4BAClB,IAAG;4BACH,SAASwb,UAAU4B,OAAAA;4BACnB;4BACA,oBAAoBvB;4BACpB,YAAYH;4BACZ,aAAaD;4BACb;4BACA,wBAAwBG;4BACxB,oBAAoBD;4BACpB;4BACA;4BACA,UACErT,oBAAoB,kBAAkBkT,UAAU6B,QAAAA,IAAY,CAAC9R,WAAWvc;4BAE1E,YAAYwsB,UAAUr8B,UAAAA;4BACtB;4BACA,OAAA,0EAAA;4BAAA,iCAAA;4BAGEq8B,UAAUj8B,KAAAA;wBACX,CAAA;qBAAA;gBAAA,CAEL;YAAA,CAEJ;QACF,CAAA;IAAA,CACF;AAEJ,CAAC;AAED,SAASg9B,qBAAqBtsB,KAAAA,EAAwC;IAC9D0sB,MAAAA,UAAU1sB,MAAMqtB,SAAAA,CAAUp1B,GAAAA,CAAKq1B,CAAAA,MAAQA,IAAIC,KAAK,EAAEh1B,MAAAA,CAAOyE,OAAO;IAE/D,OAAA;QACLtH,MAAM;QACN2zB,UAAUrpB,MAAMrR,QAAAA;QAChB+9B,qKAASc,sBAAAA,EAAoBxtB,MAAMmZ,MAAAA,EAAQuT,OAAO;IACpD;AACF;AAEA,SAASH,mBAAmBvsB,KAAAA,EAAsC;IAC1DytB,MAAAA,gBAAgBztB,MAAM0tB,eAAAA,CAAgBz1B,GAAAA,CAAKq1B,CAAAA,MAAQA,IAAIC,KAAK,EAAEh1B,MAAAA,CAAOyE,OAAO,GAC5E2wB,eAAe3tB,MAAM4tB,cAAAA,CAAe31B,GAAAA,CAAKq1B,CAAAA,MAAQA,IAAIC,KAAK,EAAEh1B,MAAAA,CAAOyE,OAAO;IAEzE,OAAA;QACLtH,MAAM;QACN2zB,UAAUrpB,MAAMrR,QAAAA;QAChB+9B,qKAASc,sBAAAA,EAAoB,UAAUC,aAAa,EAAE1E,MAAAA,6JACpDyE,sBAAAA,EAAoB,SAASG,YAAY,CAC3C;IACF;AACF;AC1NA,MAAME,8LAAc79B,SAAAA,mJAAOC,MAAG,EAAE;IAC9B0sB,UAAU;AACZ,CAAC,GAEKmR,6LAAW99B,SAAAA,EAAO+9B,0KAAe,EAAwB,CAAC,EAACC,SAAAA,EAAS,GACpEA,YACK;QAACjlB,QAAQ;IAAM,gLAGjB1B,MAAAA,CAAAA;;;;;;EAAAA,CAOR,GAEY4mB,gBAAgB,SAAuBz/B,KAAAA,EAA2B;IACvE,MAAA,EAAC0/B,YAAAA,EAAcC,YAAAA,EAAcC,aAAAA,EAAe3sB,WAAAA,EAAa4sB,6BAAAA,EAAAA,GAC7D7/B,OACI,EACJ8/B,YAAAA,EACAxE,SAAAA,EACAz0B,UAAAA,EACAimB,SAAAA,EACA/C,SAAAA,EACAjpB,KAAAA,EACAi/B,OAAAA,MAAAA,EACAxvB,KAAAA,EACA7P,UAAAA,EACAs/B,WAAAA,EACAC,oBAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,aAAAA,EACF,GAAI7W,mBACE,EAACnW,WAAWC,eAAAA,EAAe,GAAIvO,iBAC/B,EAACsO,SAAAA,EAAauC,GAAAA,QACd0qB,GAAAA,oKAAeC,YAAAA,KACf,EAAC5Q,QAAAA,EAAAA,GAAYvE,iBACboV,GAAAA,sNAAYtsB,SAAAA,EAA8B,IAAI,GAC9C,CAACusB,uBAAuBC,wBAAwB,CAAA,6MAAIvwB,WAAAA,EAAgC,IAAI,GACxFwwB,iOAAuBzsB,SAAAA,EAA8B,IAAI,GAEzDwkB,qBAAqB33B,MAAM6/B,UAAAA,GAAa,WAAW,UAEnDC,uNAAajb,UAAAA,EACjB,IAAMoa,OAAMrsB,IAAAA,CAAMmtB,CAAAA,OAASA,KAAKt7B,EAAAA,KAAOu6B,YAAY,KAAKC,MAAAA,CAAM,CAAC,CAAA,IAAK;YAAC74B,MAAM;QAAM,GACjF;QAAC44B;QAAcC,MAAK;KACtB,GAGMe,gBAAoCpR,SAASqR,UAAAA,IAC/CR,UAAUrsB,OAAAA,IAAWmsB,aAAajvB,OAAAA,EAIhCurB,oNAA4ChX,UAAAA,EAAQ,IACpDtS,kBACK;YAACssB,gBAAgB;YAAG;YAAGD,eAAeA,eAAe,IAAI;YAAG,CAAC;SAAA,GAG/D;YAAC;YAAG;YAAG;YAAG,CAAC;SAAA,EACjB;QAACrsB;QAAiBqsB;QAAcC,YAAY;KAAC,GAE1CqB,iBAAiBJ,WAAW15B,IAAAA,KAAS,QAErC+5B,2NAAiBtb,UAAAA,EACrB,IACEib,WAAW15B,IAAAA,KAAS,eACpB05B,WAAWhR,SAAAA,8MACXC,gBAAAA,EAAc+Q,WAAWhR,SAAAA,EAAW;YAClCzvB,UAAU;gBACRyD,OAAOkpB,WAAWlpB,SAAS;gBAC3B03B,WAAWA,aAAax6B;gBACxBogC,YAAY5F;gBACZx3B,WAAWgpB,WAAWhpB,aAAa;YACrC;YACA+C;YACAgY,SAAS+hB,WAAW/hB,OAAAA;YACpBne;QAAAA,CACD,GACH;QAACkgC;QAAYtF;QAAWz0B;QAAYimB,WAAWlpB;QAAOkpB,WAAWhpB;QAAWpD;QAAYI,KAAK;KAC/F,GAEMqgC,kLAAsBC,sBAAAA,EAC1BhB,eACCv7B,CAAAA,SAAUA,OAAMs8B,mBACnB,GAEME,aAAapT,kBAAkBvtB,UAAU;IAG/CkQ,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACT4vB,uBAAuBc,YAC5Bd,sBAAsBc,QAAAA,CAAS,GAAG,CAAC;IAAA,GAClC;QAACz6B;QAAY25B,qBAAqB;KAAC,GAGtC5vB,sNAAAA,EAAU,MAAM;QACVkwB,iBACFjB,8BAA8BiB,aAAa;IAAA,GAE5C;QAACA;QAAejB,6BAA6B;KAAC;IAE3C0B,MAAAA,0NAAgB5b,UAAAA,EAAQ,IACrBia,gBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAiB,eAAc;YAAA,OAAOtE,aAAax6B;QAAM,CAAA,IAAM,MACrE;QAAC8+B;QAAetE;QAAWx6B,KAAK;KAAC,GAE9B0gC,gBAAgBhzB,CAAAA,CAAAA,CAAQ,CAAC4E,aAAa2W,SAAAA;IAE5C,OACG,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,aAAA;QACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;YAAK,QAAO;YACT2F,UAAAA;gBAAAA,CAAAA,SAASI,cAAAA,IAAkB,CAAC0R,aAAAA,KAC5B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,aAAY;oBAAA,MAAM;oBAAG,UAAS;oBAC7B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,iBAAA,EACC;wBAAA,SAASV;wBACT,qBAAqB;4BAACN;wBAAAA;wBAEtB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,0BAAA,EAAA;4BAAwB,SAASA;4BAChC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0JAAC,oCAAA,EACC;gCAAA,eAAeA;gCACf,kBAAkBE;gCAEjBE,UAAAA;oCAAW15B,WAAAA,IAAAA,KAAS,UAAUm6B,cAAc9wB,SAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAC1C,qBACC;wCAAA;wCACA;wCACA;oCAEH,CAAA;oCAEAqwB,WAAW15B,IAAAA,KAAS,UAAU,CAAC+4B,wBAAwB1vB,SAEnD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0NAAA,WAAA,EAAA;wCAAA,UAAA;4CAAA,CAACyvB,aAAapc,WACZ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8BAAA;gDAA6B;4CAC/B,CAAA;4CACA,CAACsc,cAAcC,aACb,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,uBAAA;gDAAsB,YAAYgB;4CAAAA,CACpC;4CAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACA,wBAAsB,CAAA,CAAA;4CAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACtB,8BAA4B,CAAA,CAAA;yCAAA;oCAAA,CAC/B;oCAGF,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC7B,YAAAA;wCACC,WAAWjsB,mBAAmB,CAAA;wCAC9B,eAAY;wCACZ,KAAKotB;wCAEL,UAAA;4CAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UACC;gDAAA,QAAQO;gDACR;gDACA,KAAKN;4CAAAA,CAAqB;4CAE3BO;yCAAAA;oCAAAA,CACH;oCAECM;oCAEA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;wCAAI,eAAY;wCAAwB,KAAKhB;oCAAU,CAAA;iCAAA;4BAAA,CAC1D;wBAAA,CACF;oBACF,CAAA;gBAAA,CACF;gBAGDiB,iBACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,0BAAA,EAAwB;oBAAA,SAASvuB;oBAChC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,wBACC;wBAAA;wBACA,cAAcvS,WAAWiH,IAAAA;wBACzB,MAAM;oBAAA,CAAE;gBAEZ,CAAA;aAAA;QAAA,CAEJ;IACF,CAAA;AAEJ,GC7Ma85B,8BAA2C;IAAC;IAAQ,QAAQ;CAAA,EAE5DC,2BAAkE;IAC7EC,OAAO;IACPC,QAAQ;IACRC,OAAO;IACPC,MAAM;AACR;ACMO,SAAAC,cAAA/hC,KAAAA,EAAA;IAAAC,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GAIL,EAAA8hC,MAAAA,EAAAC,gBAAAA,EAAAA,GAAmCjiC;IAAKO,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA+hC,SAAAA,CAI3BzhC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,sBAAA;QAA6ByhC;IAAAA,CAAU,GAAA/hC,CAAAA,CAAAA,EAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAA,OAAAZ,CAAAA,CAAAgiC,CAAAA,CAAAA,KAAAA,oBAAAhiC,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CADnDM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,UAAA,EAAA;QACU,SAAAN;QACWkhC,oBAA0BA;QAC9C,MAAG,CAAA;QACO,WAAA;QACV,QAAA,CAAA;QACA,iBAAA,CAAA;QACkBQ;IAClB,CAAA,GAAAhiC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EARFY;AAQE;AAQN,SAAAqhC,qBAAAliC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACE,EAAA8hC,MAAAA,EAAAA,GAAiBhiC,OACjB,EAAAmiC,gBAAAA,EAAAC,gBAAAA,EAAAC,iBAAAA,EAAAC,iBAAAA,EAAAnhC,OAAAA,EAAAqO,QAAAA,EAAAC,SAAAA,EAAAW,IAAAA,EAAAA,GAUI4xB,QACJ,EAAArhC,CAAAA,EAAAA,IAAYC,4KAAAA,EAAAnB,wBAAuC,GACnD,EAAA8iC,UAAAA,EAAqBC,OAAAA,4JAAAA,CACrBl+B,IAAAA,gNAAY2P,SAAAA,EAAA,IAAkC;IAAC1T,IAAAA;IAAAN,CAAAA,CAAAsiC,CAAAA,CAAAA,KAAAA,cAAAtiC,CAAAA,CAAAA,EAAAA,KAAAuP,WAAAA,CAG7CjP,KAAAiR,CAAA,UAAA;QACMA,MAAKwF,GAAAA,KAAS,YAAYurB,cAAY/yB,SAAS;IAAA,GACpDvP,CAAAA,CAAAA,EAAAA,GAAAsiC,YAAAtiC,CAAAA,CAAAA,EAAAA,GAAAuP,UAAAvP,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,uJAIHwiC,mBAAAA,EAP4BliC,EAOQ;IAACM,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACQhC,KAAAA,IAAOyD;YAAAA,IAAG4P,OAAA;SAAA,EAASjU,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,uJAAhEyiC,uBAAAA,EAAqBH,cAAc/yB,UAAU3O,EAAmB;IAACI,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGrB5B,KAAA;QAAA6I,UAAA;QAAAgJ,UAAA;IAAA,GAAmC7S,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAkB,UAAAA,CAC3ED,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAU;QAAA,MAAA;QAAY,UAAA;QAAgB,SAAC;QACtC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAMC;YAAAA,UAAAA;QAAQ,CAAA;IACjB,CAAA,GAAMlB,CAAAA,CAAAA,EAAAA,GAAAkB,SAAAlB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACgCC,KAAA;QAAA6G,WAAY;IAAA,GAAqC1J,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAAmiC,CAAAA,CAAAA,KAAAA,oBAAAniC,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAO3EoC,KAAAq/B,oBAAoBzhC,EAAE,4CAA4C,GAACV,CAAAA,CAAAA,EAAAA,GAAAmiC,kBAAAniC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAkiC,EAAAA,CAAAA,KAAAA,oBAAAliC,CAAAA,CAAAA,GAAAA,KAAAuP,YAAAvP,CAAAA,CAAA,EAAA,CAAA,KAAA8C,KAAAA,CAL3EoB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAACw+B,SAAAA,EACa;QAAA,eAAA;QACNR,MAAe;QACZ3yB,SAAO;QACX,MAAA;QACC,MAAAzM;IACN,CAAA,GAAA9C,CAAAA,CAAAA,GAAAA,GAAAkiC,kBAAAliC,CAAAA,CAAAA,GAAAA,GAAAuP,UAAAvP,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAAqiC,EAAAA,CAAAA,KAAAA,qBAAAriC,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAKMyF,KAAAk8B,qBAAqB3hC,EAAE,6CAA6C,GAACV,CAAAA,CAAAA,GAAAA,GAAAqiC,mBAAAriC,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAA,EAAA,CAAA,KAAAoiC,qBAAApiC,CAAAA,CAAAwP,EAAAA,CAAAA,KAAAA,aAAAxP,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAA,GAAAA,KAAAmQ,OAAAA,CAJ7E/J,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAACs8B,SAAAA,EAAAA;QACa,eAAA;QACNN,MAAgB;QACb5yB,SAAAA;QACH,MAAArJ;QACAgK;IAAAA,CACN,GAAAnQ,CAAAA,CAAAA,GAAAA,GAAAoiC,mBAAApiC,CAAAA,CAAAA,GAAAA,GAAAwP,WAAAxP,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAmQ,MAAAnQ,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAAkE,EAAAA,CAAAA,KAAAA,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAfNC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAc,UAAA;QAAa,UAAA;QAAU,OAAAxD;QACpC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC8/B,OAAAA,EAAc;YAAA,SAAC;YAAO,KAAA;YACrBz+B,UAAAA;gBAAAA;gBAOAkC;aAAAA;QAOF,CAAA;IACF,CAAA,GAAMpG,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAA,OAAAvG,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CArBRE,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAC,wJAAA,EAAe;QAAA,WAAA;QAAclC;QAAY,OAAArD;QACxCC,UAAAA;YAAAA;YAGAoF;SAAAA;IAkBF,CAAA,GAAOrG,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAtBPuG;AAsBO;AC7EJ,SAAAq8B,YAAA7iC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAA8hC,MAAAA,EAAAA,GAAiBhiC,OACjB0P,qNAAiBC,QAAAA,CAAM;IAACpP,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA+hC,OAAAc,MAAAA,GAAAA,CAETviC,KAAAyhC,OAAMc,MAAAA,IAClB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAc,UAAA;QAAa,UAAC;QAC1Bd,UAAMc,OAAAA,MAAAA;IACT,CAAA,GACD7iC,CAAAA,CAAA,CAAA,CAAA,GAAA+hC,OAAAc,MAAAA,EAAA7iC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA6iC,SAAeviC,IAUmBM,KAAAmhC,OAAMe,eAAAA,KAA0B,CAAA,GAQrD9hC,KAAA+gC,OAAMvnB,KAAAA,KAAA7Q,KAAAA,IAAoB,IAAA83B,wBAAAA,CAAgCM,OAAMvnB,KAAA,CAAA;IAAOvZ,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA+hC,OAAAz3B,OAAAA,GAAAA,CAE9ErJ,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAa,SAAC;QAAG8gC,UAAMz3B,OAAAA,OAAAA;IAAS,CAAA,GAAMtK,CAAAA,CAAA,CAAA,CAAA,GAAA+hC,OAAAz3B,OAAAA,EAAAtK,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,OAAAA,CAAAA,CAAA,CAAA,CAAA,KAAA+hC,OAAAgB,MAAAA,IAAA/iC,CAAAA,CAAA,CAAA,CAAA,KAAA+hC,OAAAvT,OAAAA,IAAAxuB,CAAAA,CAAAyP,CAAAA,CAAAA,KAAAA,YAAAzP,CAAAA,CAAA6iC,CAAAA,CAAAA,KAAAA,UAAA7iC,CAAAA,CAAAY,CAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CAb3C4B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,yJAAC,uBAAA,EAA4B;QAAA,SAAA;QAC3B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAAmgC,0JAAAA,EAAA;YACC,SAAA,CAAA;YAC4B,4BAAApiC;YACpBiiC;YACA,QAAAd,OAAMgB,MAAAA;YACVtzB,IAAO;YAEF,SAAAsyB,OAAMvT,OAAAA;YAEC,gBAAAuT,OAAMvT,OAAAA;YACf,OAAAxtB;YAEPC,UAAAA;QAAAA,CACF;IAAA,CACF,GAAsBjB,CAAAA,CAAA,CAAA,CAAA,GAAA+hC,OAAAgB,MAAAA,EAAA/iC,CAAAA,CAAA,CAAA,CAAA,GAAA+hC,OAAAvT,OAAAA,EAAAxuB,CAAAA,CAAAA,EAAAA,GAAAyP,UAAAzP,CAAAA,CAAAA,EAAAA,GAAA6iC,QAAA7iC,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAftB6C;AAesB;AC5BnB,SAAAogC,cAAAljC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GAIL,EAAA8hC,MAAAA,EAAAC,gBAAAA,EAAAA,GAAmCjiC;IAAKO,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA+hC,SAAAA,CAI3BzhC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,sBAAA;QAA6ByhC;IAAAA,CAAU,GAAA/hC,CAAAA,CAAAA,EAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAA,OAAAZ,CAAAA,CAAAgiC,CAAAA,CAAAA,KAAAA,oBAAAhiC,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CADnDM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,UAAA,EAAA;QACU,SAAAN;QACWkhC,oBAA0BA;QAC9C,MAAG,CAAA;QACO,WAAA;QACV,QAAA,CAAA;QACA,iBAAA,CAAA;QACkBQ;IAClB,CAAA,GAAAhiC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EARFY;AAQE;AAQN,SAAAsiC,qBAAAnjC,KAAAA,EAAA;IAAAC,MAAAA,IAAAC,gMAAAA,EAAA,CAAA,GACE,EAAA8hC,MAAAA,EAAAA,GAAiBhiC,OACjB,EAAAuK,OAAAA,EAAAkkB,OAAAA,EAAAA,GAA2BuT,QAC3B,EAAAO,UAAAA,EAAqBC,wJAAAA,WAAAA,CACrBl+B,IAAAA,gNAAY2P,SAAAA,EAAA,IAAkC;IAAC1T,IAAAA;IAAAN,CAAAA,CAAAsiC,CAAAA,CAAAA,KAAAA,cAAAtiC,CAAAA,CAAAA,EAAAA,KAAAwuB,UAAAA,CAG7CluB,KAAAiR,CAAA,UAAA;QACMA,MAAKwF,GAAAA,KAAS,YAAYurB,cAAY9T,QAAQ;IAAA,GACnDxuB,CAAAA,CAAAA,EAAAA,GAAAsiC,YAAAtiC,CAAAA,CAAAA,EAAAA,GAAAwuB,SAAAxuB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,uJAIHwiC,mBAAAA,EAP4BliC,EAOQ;IAACM,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACOhC,KAAAA,IAAOyD;YAAAA,IAAG4P,OAAA;SAAA,EAASjU,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,uJAA/DyiC,uBAAAA,EAAqBH,cAAc9T,SAAS5tB,EAAmB;IAACI,IAAAA;IAAAhB,OAAAA,CAAAA,CAAAA,EAAAA,KAAAsK,UAAAA,CAEzDtJ,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;QAAUqD;QAAMiG,UAAQ;IAAA,CAAA,GAAMtK,CAAAA,CAAAA,EAAAA,GAAAsK,SAAAtK,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAA9BgB;AAA8B;ACjCvC,SAAAmiC,6BAAApjC,KAAAA,EAAA;IAAAC,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GACE,EAAA0G,QAAAA,EAAAA,GAAmB5G,OACnB,EAAAoR,OAAAA,EAAAkM,QAAAA,EAAAA,wJAA4BgjB,YAAAA,CAAU,IACtCQ,gBAAsBxjB,UAAAA,CAAQ4N,6BAAA,CAAA,IAAqC9Z;IAAO7Q,IAAAA;IAAA,OAAAN,CAAAA,CAAA2G,CAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAA,EAAAA,KAAA6gC,gBAAAA,CAEnEvgC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,kKAAA,EAAwBugC;QAAAA,SAAAA;QAAuB;IAAE,CAAA,GAAiB7gC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA6gC,eAAA7gC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAnEM;AAAmE;AAGrE,SAAA8iC,kBAAArjC,KAAAA,EAAA;IAAAC,MAAAA,+LAAAC,KAAAA,EAAA,EAAA,GACL,EAAA8hC,MAAAA,EAAAC,kBAAA1hC,EAAAA,EAAAA,GAA0CP,OAA3BiiC,mBAAA1hC,OAAuBqJ,KAAAA,IAAAA,OAAvBrJ,IACf+iC,oNAAgB3zB,QAAAA,CAAM;IAElBqyB,IAAAA,OAAM96B,IAAAA,KAAU,WAAS;QAAArG,IAAAA;QAAA,OAAAZ,CAAAA,CAAA+hC,CAAAA,CAAAA,KAAAA,UAAA/hC,CAAAA,CAAAA,EAAAA,KAAAgiC,mBAAAA,CACpBphC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,eAAsBmhC;YAAAA;YAA0BC;QAAoB,CAAA,GAAAhiC,CAAAA,CAAAA,EAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAArEY;IAAAA;IAGLmhC,IAAAA,OAAM96B,IAAAA,KAAU,WAAS;QAAArG,IAAAA;QAAA,OAAAZ,CAAAA,CAAA+hC,CAAAA,CAAAA,KAAAA,UAAA/hC,CAAAA,CAAAA,EAAAA,KAAAgiC,mBAAAA,CACpBphC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,eAAsBmhC;YAAAA;YAA0BC;QAAoB,CAAA,GAAAhiC,CAAAA,CAAAA,EAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAArEY;IAAAA;IAAqE,IAG1EmhC,OAAM96B,IAAAA,KAAU,YAAa86B,CAAAA,OAAM96B,IAAAA,EAAK;QAAArG,IAAAA;QAAAZ,OAAAA,CAAAA,CAAAA,EAAAA,KAAA+hC,SAAAA,CAExCnhC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8BAAA;YACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,aAAA;gBAAoBmhC;YACvB,CAAA;QAAA,CAAA,GAA+B/hC,CAAAA,CAAAA,EAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAF/BY;IAAAA;IAMAmhC,IAAAA,OAAM96B,IAAAA,KAAU,UAAQ;QACY,MAAArG,MAAAmhC,QAAMpS;QAAW3uB,IAAAA;QAAAhB,OAAAA,CAAAA,CAAAA,EAAAA,KAAAY,MAAAA,CAAhDI,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8BAAA;YAA8BJ,UAAAA;QAAAA,CAAkB,GAA+BZ,CAAAA,CAAAA,EAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAhFgB;IAAAA;IAIT,MAAAsiC,eAA0BvB;IAG1Bxc,QAAArK,IAAAA,CAAa,CAAA,uBAAA,EAA0BooB,aAAYr8B,IAAA,EAAO;IAACrG,IAAAA;IAAAZ,CAAAA,CAAAsjC,EAAAA,CAAAA,KAAAA,aAAAh5B,OAAAA,IAAAtK,CAAAA,CAAA,EAAA,CAAA,KAAAsjC,aAAAr8B,IAAAA,GAAAA,CAWtDrG,KAAA0iC,aAAYh5B,OAAAA,IAEV,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;QAAW,MAAC;QAAE,UAAA;YAAA;YACU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAgC,QAAzBg5B;gBAAAA,UAAAA,aAAYr8B,IAAAA;YAAM,CAAA;YAAO;SAAA;IACzD,CAAA,GACDjH,CAAAA,CAAA,EAAA,CAAA,GAAAsjC,aAAAh5B,OAAAA,EAAAtK,CAAAA,CAAA,EAAA,CAAA,GAAAsjC,aAAAr8B,IAAAA,EAAAjH,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAAhB,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAAqjC,WAAArjC,CAAAA,CAAA,EAAA,CAAA,KAAAY,MAAAZ,CAAAA,CAAA,EAAA,CAAA,KAAAsjC,aAAA9U,OAAAA,GAAAA,CAbHxtB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,SAAA,EACKqiC;QAAAA,IAAM;QAED,SAAAC,aAAY9U,OAAAA;QAEL,gBAAA8U,aAAY9U,OAAAA;QACrB,OAAA;QAEN5tB,UAAAA;IAMH,CAAA,GAASZ,CAAAA,CAAAA,GAAAA,GAAAqjC,SAAArjC,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAA,EAAA,CAAA,GAAAsjC,aAAA9U,OAAAA,EAAAxuB,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAdTgB;AAcS;ACjDAuiC,MAAAA,gOAAsBve,OAAAA,EAAK,SAAA1kB,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,CAAA,GAA6B,EAAAujC,YAAAA,EAAA78B,QAAAA,EAAAq7B,gBAAAA,EAAAA,GAAA1hC,IASnE,CAAAmjC,aAAAC,cAAA,CAAA,GAAsCzzB,qNAAAA,EAAAA,CAAAA,CAAW;IAACrP,IAAAA;IAAAA,KACd4iC,YAAAA,CAAaC,WAAW,CAAA;IAA5D,MAAAE,gBAAsB/iC;IAAqEI,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAE1D5B,KAAAua,CAAA,QAAA;QAC/BmoB,eAAenoB,GAAG;IAAA,GACnBvb,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAqlB,eAAqBrkB;IAEf,IAAAC,IAAA4B;IAAA7C,CAAAA,CAAAA,EAAAA,KAAA2G,WAAAA,CAEuB9D,KAAA8D,SAAQ;QAAA0e;IAAe,CAAA,GAACrlB,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAAxB4B;IAA7B,MAAA43B,SAAex5B;IAAiE6B,IAAAA;IAAA9C,CAAAA,CAAA2jC,CAAAA,CAAAA,KAAAA,iBAAA3jC,CAAAA,CAAAA,EAAAA,KAAAgiC,mBAAAA,CAI3El/B,KAAA6gC,iBAAiBA,cAAa5B,MAAAA,IAC7B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,8KAAA,EAAA;QAA4B,SAAA;QAC3B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,mBAA0B;YAAA,QAAA4B,cAAa5B,MAAAA;YAA2BC;QAAAA,CACrE;IAAA,CAAA,GACDhiC,CAAAA,CAAAA,EAAAA,GAAA2jC,eAAA3jC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAAkE,IAAAA;IAAAlE,OAAAA,CAAAA,CAAAy6B,CAAAA,CAAAA,KAAAA,UAAAz6B,CAAAA,CAAAA,EAAAA,KAAA8C,KAAAA,CALHoB,KACGpB,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,0NAAAA,WAAAA,EAAAA;QAAAA,UAAAA;YAAAA;YAAAA;;IAKM,CAAA,GACN9C,CAAAA,CAAAA,EAAAA,GAAAy6B,QAAAz6B,CAAAA,CAAAA,EAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,EAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,CAAA,CAAA,EAPHkE;AAOG,CAEN;AAKM,SAAA0/B,iBAAA7jC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAujC,YAAAA,EAAAtyB,QAAAA,EAAAA,GAAiCnR,OACjC8jC,qNAAiBn0B,QAAAA,CAAM,IAEvB,CAAAsyB,kBAAA8B,mBAAA,CAAA,GAAgD7zB,qNAAAA,EAAAA,IAAuC;IAAC,IAAA3P,IAAAM;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAG/EhC,KAAA;QAAA0V,WACM;QAASC,QAAA,CAAA;QAAAwtB,iBAAA,CAAA;IAAA,GAGrB/jC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAJMM;IADT,MAAAojC,eAAmC1jC,IASnC,EAAAI,CAAAA,EAAAA,GAAYC,6KAAAA,EAAAnB,wBAAuC;IAACwB,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAwjC,gBAAAxjC,CAAAA,CAAAkR,CAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAA6jC,CAAAA,CAAAA,KAAAA,YAAA7jC,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAIlDM,KAAAC,CAAAA,QAAA;QAAC,MAAA,EAAAokB,YAAAA,EAAAA,GAAApkB;QAAc,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLACZ,aAAA,EACK;YAAA,IAAA,GAAG4iC,QAAQ,CAAA,YAAA,CAAA;YAEb,QAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,oBAAA,EAAA;gBACa,cAAAnjC,EAAE,uCAAuC;gBAC3CwQ;gBACE,eAAA;gBACP,MAAA;gBACS,cAAA;oBAAA5G,SAAU5J,EAAE,oCAAoC;gBAAC;YAAA,CAChE;YAGD,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAc,SAAC;gBACb8iC,UAAYh6B,aAAAA,GAAAA,CAAA,CAAAy6B,aAAA1oB,MACX,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,oBACc0oB;wBAAAA;wBACH/yB;wBACHqK,OAAE;wBAGC8J,UAAAA;oBADL9J,GAAAA,GACiB,CAEzB;YAAA,CACH;YAEOyoB,SAAW;YACfF,KAAAA;QACL,CAAA;IAAA,GACH9jC,CAAAA,CAAAA,EAAAA,GAAAwjC,cAAAxjC,CAAAA,CAAAA,EAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,EAAAA,GAAA6jC,UAAA7jC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAhCH,MAAAkkC,qBAA2BljC;IAkC1BC,IAAAA;IAAA,OAAAjB,CAAAA,CAAAwjC,CAAAA,CAAAA,KAAAA,gBAAAxjC,CAAAA,CAAAA,EAAAA,KAAAgiC,oBAAAhiC,CAAAA,CAAA,CAAA,CAAA,KAAAkkC,qBAAAA,CAGCjjC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,qBAAkCuiC;QAAAA;QAAgCxB;QAAAA,UAEnE;IAAA,CAAA,GAAsBhiC,CAAAA,CAAAA,EAAAA,GAAAwjC,cAAAxjC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAAkkC,oBAAAlkC,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAFtBiB;AAEsB;AAWnB,SAAAkjC,mBAAApkC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAgkC,WAAAA,EAAA/yB,QAAAA,EAAAjH,KAAAA,EAAA0N,QAAAA,EAAAA,GAAiD5X,OACjD,EAAAqkC,QAAAA,EAAAA,GAAmBH;IAAW3jC,IAAAA;IAAAN,CAAAA,CAAAiK,CAAAA,CAAAA,KAAAA,SAAAjK,CAAAA,CAAAA,EAAAA,KAAA2X,YAAA3X,CAAAA,CAAA,CAAA,CAAA,KAAAokC,WAAAA,CAEE9jC,KAAAA,MAAA;QACrB2J,SAAAA,KAAK,GACVm6B,YAAUA,SAAS;IAAA,GACxBpkC,CAAAA,CAAAA,EAAAA,GAAAiK,OAAAjK,CAAAA,CAAAA,EAAAA,GAAA2X,UAAA3X,CAAAA,CAAAA,EAAAA,GAAAokC,UAAApkC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAA+X,cAAoBzX;IAGW,IAAAM,IAAAI;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAikC,YAAAriB,QAAAA,GAAAA,CAGtB5gB,KAAAijC,YAAWriB,QAAAA,GACdyiB,OAAOJ,YAAWriB,QAAS,EAACpK,KAAAA,CACnB,GAAG,EAAChO,GAAAA,CAAAO,OACyC,IAACJ,KAAAA,GAC9C3J,CAAAA,CAAA,CAAA,CAAA,GAAAikC,YAAAriB,QAAAA,EAAA5hB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAJbY,KAAOI;IADT,MAAAoa,UAAgBxa,IAUCK,KAAA,CAAA,OAAA,EAAUgjC,YAAWK,KAAAA,CAAAC,OAAAA,CAAe,KAAK,EAAE,CAAC,EAAA,EAC/C1hC,KAAAqO,YAAY3C,CAAAA,CAAQ01B,YAAW/yB,QAAAA;IAAUpO,IAAAA;IAAA9C,CAAAA,CAAAikC,CAAAA,CAAAA,KAAAA,YAAA/yB,QAAAA,IAAAlR,CAAAA,CAAA,CAAA,CAAA,KAAAikC,YAAA7iC,KAAAA,GAAAA,CAM9C0B,KAAAmhC,YAAW/yB,QAAAA,IAAA;QAAAszB,cAAA;YAAAl6B,SAAsC25B,YAAW7iC,KAAAA;QAAAA;IAAA,GAAQpB,CAAAA,CAAA,CAAA,CAAA,GAAAikC,YAAA/yB,QAAAA,EAAAlR,CAAAA,CAAA,CAAA,CAAA,GAAAikC,YAAA7iC,KAAAA,EAAApB,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAAkE,IAAAA;IAAAlE,OAAAA,CAAAA,CAAAikC,CAAAA,CAAAA,KAAAA,YAAAjhC,IAAAA,IAAAhD,CAAAA,CAAA,EAAA,CAAA,KAAAikC,YAAAK,KAAAA,IAAAtkC,CAAAA,CAAAikC,EAAAA,CAAAA,KAAAA,YAAA9zB,IAAAA,IAAAnQ,CAAAA,CAAA,EAAA,CAAA,KAAA+X,eAAA/X,CAAAA,CAAAob,EAAAA,CAAAA,KAAAA,WAAApb,CAAAA,CAAA,EAAA,CAAA,KAAAiB,MAAAjB,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,MAAA7C,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CAR3EoB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,6LAAA,EACc;QAAA,eAAAjD;QACH,UAAA4B;QACDuY;QACH,MAAA6oB,YAAWjhC,IAAAA;QACR+U,SAAAA;QACH,MAAAksB,YAAWK,KAAAA;QACX,MAAAL,YAAW9zB,IAAAA;QACZrN,GAAAA,EAAAA;IAAAA,CACL,GAAA9C,CAAAA,CAAA,CAAA,CAAA,GAAAikC,YAAAjhC,IAAAA,EAAAhD,CAAAA,CAAA,EAAA,CAAA,GAAAikC,YAAAK,KAAAA,EAAAtkC,CAAAA,CAAA,EAAA,CAAA,GAAAikC,YAAA9zB,IAAAA,EAAAnQ,CAAAA,CAAAA,GAAAA,GAAA+X,aAAA/X,CAAAA,CAAAA,GAAAA,GAAAob,SAAApb,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EATFkE;AASE;AA3BC,SAAA6F,QAAA06B,CAAAA,EAAA;IAaeA,OAAAA,EAAC//B,KAAAA,CAAA,GAAA,CAAW,EAACggC,WAAAA,KAAiBD,EAAC//B,KAAAA,CAAAA,CAAQ;AAAC;ACpH9D,MAAMigC,8BAA4B;IAChCC,mBAAmB;IACnBC,WAAW;AACb,GAGaC,eAAwCxkC,CAAA,OAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAC,EAAAqF,EAAAA,EAAA2B,IAAAA,EAAAtD,KAAAA,EAAAohC,UAAAA,EAAAA,GAAAzkC,IACpD,EAAA0kC,eAAAC,iBAAAA,EAAA,GAA2C3b,mBAC3C,EAAA3K,QAAAumB,QAAAA,EAAAA,OAA2BhR,+KAAAA,EAAqB5uB,IAAI2B,IAAI,GACxD,CAAAg5B,YAAA+E,aAAA,CAAA,6MAAoC/0B,WAAAA,EAAAA,CAAAA,CAAc,GAClD,CAAAk1B,qBAAAC,oBAAA,CAAA,GAAoDn1B,qNAAAA,EAAAA,CAAAA,CAAc,GAElE,EAAAvP,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAA+kC,aAAAA,CAEnBnkC,KAAAA,MAAA;+BACL,GAC1BmkC,WAAW;IAAC,GACb/kC,CAAAA,CAAAA,EAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAAqlC,eAAqBzkC;IAGLI,IAAAA;IAAAhB,CAAAA,CAAAklC,CAAAA,CAAAA,KAAAA,YAAAllC,CAAAA,CAAAA,EAAAA,KAAA+kC,cAAA/kC,CAAAA,CAAA,CAAA,CAAA,KAAAilC,oBAAAA,CAEkBjkC,KAAAA,MAAA;wBACd,GAClBokC,qBAAAA,CAAAA,CAA0B,GAC1BH,kBAAAA,CAAAA,CAAsB,GACtBC,SAAQ7Q,OAAAA,CAAS,GACjB0Q,WAAW;IAAA,GACZ/kC,CAAAA,CAAAA,EAAAA,GAAAklC,UAAAllC,CAAAA,CAAAA,EAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,EAAAA,GAAAilC,mBAAAjlC,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAND,MAAAslC,gBAAsBtkC;IAMuBC,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAElB3B,KAAAA,MAAA;QACzBmkC,qBAAAA,CAAAA,CAAyB;IAAA,GAC1BplC,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAulC,SAAetkC;IAET4B,IAAAA;IAAA7C,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,EAAAA,KAAAiH,OAAAA,CAEiEpE,KAAA;QAAAyC;QAAA2B;QAAAgd,YAGzD;IACbjkB,GAAAA,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,CAAA+/B,aAAAC,oBAAA,CAAA,+JAA4CwF,6BAAAA,EAA2B3iC,EAItE,GAEDwf,0KAAoBC,iBAAAA,CAAe;IAgDtBxf,IAAAA;IAAA,KAAA;QAAA,IA7CP,CAACk9B,wBAAyBD,CAAAA,aAAWpc,SAAS;YAAAzf,IAAAA;YAAAlE,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAKvCwD,MAAAxD,EAAE,qBAAqB,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,GAAAA,IAAAA,MAAAlE,CAAAA,CAAA,EAAA,CAAA;YAAAmG,IAAAA;YAAAnG,CAAAA,CAAAA,GAAAA,KAAAqiB,cAAAA,CAE7Blc,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,iCAAA,EAAA;gBAAuC,SAAA;gBAA+Bkc;YAAAA,CAAe,GAAAriB,CAAAA,CAAAA,GAAAA,GAAAqiB,aAAAriB,CAAAA,CAAAA,GAAAA,GAAAmG,GAAAA,IAAAA,MAAAnG,CAAAA,CAAA,EAAA,CAAA;YAAAoG,IAAAA;YAAApG,CAAAA,CAAAkE,EAAAA,CAAAA,KAAAA,OAAAlE,CAAAA,CAAAA,GAAAA,KAAAmG,MAAAA,CANnFC,MAAA;gBAAA+J,MACC;gBAAUnN,yJAAAyiC,YAAAA;gBAAAv0B,UAAA,CAAA;gBAAAozB,OAGTpgC;gBAAwB9C,OAE7B+E;YAAAA,GAEHnG,CAAAA,CAAAA,GAAAA,GAAAkE,KAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,KAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA,EARD8C,KAAOsD;YAQNoO,MAAAA;QAAAA;QAMS,MAAAtQ,KAAA+7B,cAAc1xB,CAAQ22B,CAAAA,SAAQh0B,QAAAA,IAAc8uB;QAAoB75B,IAAAA;QAAAnG,CAAAA,CAAAA,GAAAA,KAAAklC,SAAAh0B,QAAAA,IAAAlR,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACnEyF,KAAC++B,SAAQh0B,QAAAA,IAAaxQ,EAACikC,2BAAAA,CAA2BO,SAAQh0B,QAAA,CAAU,KAAM,IAAElR,CAAAA,CAAA,EAAA,CAAA,GAAAklC,SAAAh0B,QAAAA,EAAAlR,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;QAAAoG,IAAAA;QAAApG,CAAAA,CAAAigC,EAAAA,CAAAA,KAAAA,cAAAjgC,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAC5E0F,KAAa1F,EAAbu/B,aAAe,gCAAmC,qBAAN,GAA4BjgC,CAAAA,CAAAA,GAAAA,GAAAigC,YAAAjgC,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;QAAAqG,IAAAA;QAAArG,CAAAA,CAAA2D,EAAAA,CAAAA,KAAAA,OAAAH,OAAAxD,CAAAA,CAAA,EAAA,CAAA,KAAAqlC,gBAAArlC,CAAAA,CAAA,EAAA,CAAA,KAAAslC,iBAAAtlC,CAAAA,CAAAsF,EAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,GAAAA,KAAAmlC,uBAAAnlC,CAAAA,CAAA,EAAA,CAAA,KAAAiH,OAAAA,CAGvEZ,KAAA8+B,uBAAmB;YAAAl+B,MACnB;YAAQ0oB,WAEZ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAACrgB,8BAEQ;gBAAA,QAAA;gBACH,IAAA3L,OAAKH,OAAS8B;gBACZ2B;gBACIo+B,UAAAA;gBACCC,WAAAA;YAAa,CAAA;QAG7BtlC,GAAAA,CAAAA,CAAA,EAAA,CAAA,GAAA2D,OAAAH,KAAAxD,CAAAA,CAAAA,GAAAA,GAAAqlC,cAAArlC,CAAAA,CAAAA,GAAAA,GAAAslC,eAAAtlC,CAAAA,CAAAA,GAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAAmlC,qBAAAnlC,CAAAA,CAAAA,GAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;QAAAuG,IAAAA;QAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAAkE,MAAAlE,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAoG,EAAAA,CAAAA,KAAAA,MAAApG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CApBIE,MAAA;YAAA4J,MACC;YAAUnN,yJAAAyiC,YAAAA;YAAAv0B,UAENhN;YAAgE9C,OACnE+E;YAA4Em+B,OAC5El+B;YAAwEwb,UACrE;YAAYwiB,UACZmB;YAAMxD,QACR17B;QAYP,GACFrG,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EArBD8C,KAAOyD;IAAAA;IAbFzD,OAAAA;AAiDL;AAGJgiC,aAAa98B,MAAAA,GAAS;AACtB88B,aAAarvB,WAAAA,GAAc;AC7F3B,MAAMiwB,wBAAsB;IAC1BC,YAAY;IACZC,eAAe;IACff,WAAW;AACb,GAGagB,uBAAgDvlC,CAAA,OAAA;IAAAN,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAAC,EAAAqF,EAAAA,EAAA2B,IAAAA,EAAApD,SAAAA,EAAAoqB,QAAAA,EAAA8W,UAAAA,EAAAA,GAAAzkC,IAO5D,EAAAq7B,cAAAA,EAAAA,GAAyBzH,mLAAAA,EAAqB5uB,IAAI2B,IAAI,GACtD,CAAAk+B,qBAAAC,oBAAA,CAAA,6MAAoDn1B,WAAAA,EAAAA,CAAAA,CAAc;IAACrP,IAAAA;IAAAZ,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,EAAAA,KAAAiH,OAAAA,CACIrG,KAAA;QAAA0E;QAAA2B;QAAAgd,YAGzD;IACbjkB,GAAAA,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,CAAA+/B,aAAAC,oBAAA,CAAA,+JAA4CwF,6BAAAA,EAA2B5kC,EAItE,GACDyhB,eAAoBC,4KAAAA,KAEpB,EAAA5hB,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACwB,IAAAA;IAAAhB,CAAAA,CAAA27B,CAAAA,CAAAA,KAAAA,kBAAA37B,CAAAA,CAAAA,EAAAA,KAAA+kC,aAAAA,CAElB/jC,KAAAA,MAAA;QAClBqzB,eAAAA,OAAAA,IACd0Q,WAAW;IACZ/kC,GAAAA,CAAAA,CAAAA,EAAAA,GAAA27B,gBAAA37B,CAAAA,CAAAA,EAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAAslC,gBAAsBtkC;IAGUC,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEL3B,KAAAA,MAAA;QACzBmkC,qBAAAA,CAAAA,CAAyB;IAAA,GAC1BplC,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAulC,SAAetkC;IAET,IAAA4B,IAAAC;IAAA9C,CAAAA,CAAA,CAAA,CAAA,KAAAslC,iBAAAtlC,CAAAA,CAAAmlC,CAAAA,CAAAA,KAAAA,uBAAAnlC,CAAAA,CAAA+kC,CAAAA,CAAAA,KAAAA,cAAA/kC,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIFoC,KAAAqiC,uBAAmB;QAAAl+B,MACX;QAASkJ,MACT;QAAUZ,UACNw1B;QAAUv1B,WACT81B;QAAapkC,SACfR,EAAE,+DAA+D;IAAC,GAC5EV,CAAAA,CAAAA,EAAAA,GAAAslC,eAAAtlC,CAAAA,CAAAA,EAAAA,GAAAmlC,qBAAAnlC,CAAAA,CAAAA,EAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAA6C,KANDC;IAFJ,MAAAi/B,SAAkDl/B;IAUjDqB,IAAAA;IAAAlE,CAAAA,CAAA,EAAA,CAAA,KAAAqiB,eAAAriB,CAAAA,CAAA+hC,EAAAA,CAAAA,KAAAA,UAAA/hC,CAAAA,CAAAA,GAAAA,KAAA27B,eAAAzqB,QAAAA,IAAAlR,CAAAA,CAAAggC,EAAAA,CAAAA,KAAAA,wBAAAhgC,CAAAA,CAAAiuB,EAAAA,CAAAA,KAAAA,YAAAjuB,CAAAA,CAAAA,GAAAA,KAAA+/B,aAAApc,WAAA3jB,CAAAA,CAAA6D,EAAAA,CAAAA,KAAAA,aAAA7D,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAEcwD,KAAAA,IACT,CAACL,aAAaoqB,WAAQ,OAItB,CAAC+R,wBAAyBD,CAAAA,aAAWpc,UAAS;YAAAxT,MAExC;YAAUnN,yJAAA8iC,YAAAA;YAAA50B,UAAA,CAAA;YAAAozB,OAGT5jC,EAAE,8BAA8B;YAACU,OAEtC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,iCAAA,EAAuC;gBAAA,SAAA;gBAA+BihB;YAAW,CAAA;QAAA,IAAI;YAAAlS,MAMpF;YAAUnN,yJAAA8iC,YAAAA;YAAA50B,UAEN3C,CAAQotB,CAAAA,eAAczqB,QAAAA,IAAc8uB;YAAoB5+B,OAC1Du6B,eAAczqB,QAAAA,IAAAw0B,qBAAAA,CAAiC/J,eAAczqB,QAAA,CAAA,IAAe;YAAEozB,OAC/E5jC,EAAE,8BAA8B;YAAC0jC,UAC9BmB;YAAMxD;QAAAA,GAGnB/hC,CAAAA,CAAAA,GAAAA,GAAAqiB,aAAAriB,CAAAA,CAAAA,GAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAA,EAAA,CAAA,GAAA27B,eAAAzqB,QAAAA,EAAAlR,CAAAA,CAAAA,GAAAA,GAAAggC,sBAAAhgC,CAAAA,CAAAA,GAAAA,GAAAiuB,UAAAjuB,CAAAA,CAAA,EAAA,CAAA,GAAA+/B,aAAApc,SAAA3jB,CAAAA,CAAAA,GAAAA,GAAA6D,WAAA7D,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAOYmG,IAAAA;IAAA,OAAAnG,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CAjCNiC,KAAQjC,GAAAA,GAoCblE,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EApCKmG;AAoCL;AAGJ0/B,qBAAqB79B,MAAAA,GAAS;AAC9B69B,qBAAqBpwB,WAAAA,GAAc;ACrFnC,MAAMiwB,wBAAsB;IAC1BK,sBAAsB;IACtBlB,WAAW;AACb,GAGamB,kBAA2C1lC,CAAA,OAAA;IAAAN,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GAAC,EAAAqF,EAAAA,EAAA2B,IAAAA,EAAA89B,UAAAA,EAAAA,GAAAzkC,IACvDiN,4KAAsBU,mBAAAA,KACtB,EAAAg4B,SAAAA,EAAAA,IAAoB/R,kLAAAA,EAAqB5uB,IAAI2B,IAAI,GACjD,EAAAktB,cAAAA,EAAAA,gKAAyBC,YAAAA,CACzB,IAAA,CAAA8R,eAAAC,cAAA,CAAA,6MAAwCl2B,WAAAA,EAAAA,CAAAA,CAAc;IAACrP,IAAAA;IAAAZ,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,EAAAA,KAAAiH,OAAAA,CACgBrG,KAAA;QAAA0E;QAAA2B;QAAAgd,YAGzD;IACbjkB,GAAAA,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,CAAA+/B,aAAAC,oBAAA,CAAA,OAA4CwF,qLAAAA,EAA2B5kC,EAItE,GAED,EAAAF,CAAAA,EAAYC,+JAAAA,iBAAAA,EAAAnB,wBAAuC,GAEnD6iB,cAAoBC,6KAAAA,CAAe;IAACthB,IAAAA;IAAAhB,CAAAA,CAAAuN,CAAAA,CAAAA,KAAAA,cAAAmwB,IAAAA,IAAA19B,CAAAA,CAAA,CAAA,CAAA,KAAAimC,aAAAjmC,CAAAA,CAAA,CAAA,CAAA,KAAAsF,MAAAtF,CAAAA,CAAAm0B,CAAAA,CAAAA,KAAAA,kBAAAn0B,CAAAA,CAAAA,EAAAA,KAAA+kC,cAAA/kC,CAAAA,CAAA,CAAA,CAAA,KAAAiH,OAAAA,CAETjG,KAAAA,YAAA;QACzB,MAAAolC,sOAAeC,OAAAA,CAAK;QAEpBF,eAAAA,CAAAA,CAAmB;QAGnB,MAAAG,oKAAyBC,iBAAAA,EACvBh5B,cAAamwB,IAAAA,CAAA8I,eAAAA,CACMlhC,IAAI2B,IAAI,EAAC6D,IAAAA,kJACpBhB,SAAAA,EAAAC,OAA0D,CAAC,CACrE;QACAk8B,UAAS5R,OAAAA,CAAS+R,MAAM,GAAC,MAGnBE,kBACNnS,eAAe,QAAM;YAAA7uB,IAAO8gC;YAAMn/B;QAAO,CAAA,GAEzC89B,WAAW;IACZ/kC,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAAuN,cAAAmwB,IAAAA,EAAA19B,CAAAA,CAAAA,EAAAA,GAAAimC,WAAAjmC,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAm0B,gBAAAn0B,CAAAA,CAAAA,EAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAlBD,MAAAulC,SAAevkC;IA6CFC,IAAAA;IAAA,KAAA;QAAA,IAxBP,CAAC++B,wBAAyBD,CAAAA,aAAWpc,SAAS;YAAA9gB,IAAAA;YAAA7C,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIvCmC,MAAAnC,EAAE,wBAAwB,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA6C,GAAAA,IAAAA,MAAA7C,CAAAA,CAAA,EAAA,CAAA;YAAA8C,IAAAA;YAAA9C,CAAAA,CAAAA,GAAAA,KAAAqiB,cAAAA,CAEhCvf,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,iCAAA,EAAA;gBAAuC,SAAA;gBAAkCuf;YAAAA,CAAe,GAAAriB,CAAAA,CAAAA,GAAAA,GAAAqiB,aAAAriB,CAAAA,CAAAA,GAAAA,GAAA8C,GAAAA,IAAAA,MAAA9C,CAAAA,CAAA,EAAA,CAAA;YAAAkE,IAAAA;YAAAlE,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,OAAA7C,CAAAA,CAAAA,GAAAA,KAAA8C,MAAAA,CALtFoB,MAAA;gBAAAlB,yJAAAqH,WAAAA;gBAAA6G,UAAA,CAAA;gBAAAozB,OAGEzhC;gBAA2BzB,OAEhC0B;YAAAA,GAEH9C,CAAAA,CAAAA,GAAAA,GAAA6C,KAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,KAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,GAAAA,IAAAA,MAAAlE,CAAAA,CAAA,EAAA,CAAA,EAPDiB,KAAOiD;YAONsQ,MAAAA;QAAAA;QAKS,MAAA3R,KAAAqjC,iBAAiB33B,CAAQ03B,CAAAA,UAAS/0B,QAAAA,IAAc8uB;QAAoBl9B,IAAAA;QAAA9C,CAAAA,CAAAkmC,EAAAA,CAAAA,KAAAA,iBAAAlmC,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACvEoC,KAAgBpC,EAAhBwlC,gBAAkB,mCAAsC,wBAAN,GAA+BlmC,CAAAA,CAAAA,GAAAA,GAAAkmC,eAAAlmC,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;QAAAkE,IAAAA;QAAAlE,CAAAA,CAAAA,GAAAA,KAAAimC,UAAA/0B,QAAAA,IAAAlR,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACjFwD,KAAA+hC,UAAS/0B,QAAAA,GAAYxQ,EAACglC,qBAAAA,CAAqBO,UAAS/0B,QAAA,CAAU,IAAI,IAAElR,CAAAA,CAAA,EAAA,CAAA,GAAAimC,UAAA/0B,QAAAA,EAAAlR,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;QAAAmG,IAAAA;QAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAulC,UAAAvlC,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,MAAA7C,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CAJtEiC,KAAA;YAAAnD,MAAAqH,8JAAAA;YAAA6G,UAEKrO;YAAoEyhC,OACvExhC;YAAiF1B,OACjF8C;YAAoEkgC,UACjEmB;QAAM,GACjBvlC,CAAAA,CAAAA,GAAAA,GAAAulC,QAAAvlC,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EANDiB,KAAOkF;IAAAA;IAZFlF,OAAAA;AA2BL;AAGJ+kC,gBAAgBh+B,MAAAA,GAAS;AACzBg+B,gBAAgBvwB,WAAAA,GAAc;AAlE0B,SAAA1L,QAAAU,CAAAA,EAAA;IAAA,OAwB5BA,EAACgjB,EAAAA,KAAQ,eAAehjB,EAACxD,IAAAA,KAAU;AAAS;ACjCjE,MAAMw/B,uBAAgDnmC,CAAA,OAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAC,EAAAqF,EAAAA,EAAA2B,IAAAA,EAAAy/B,QAAAA,EAAA3B,UAAAA,EAAAA,GAAAzkC,IAC5D,EAAA2zB,OAAAA,EAAAA,+JAAkBC,uBAAAA,EAAqB5uB,IAAI2B,IAAI,GAC/CsK,oKAAc8b,4BAAAA,EAA0B/nB,IAAI2B,IAAI,GAChD,EAAAktB,cAAAA,EAAyBC,gKAAAA,YAAAA,CACzB9G,IAAAA,sNAAkBtZ,SAAAA,EAAOzC,KAAK,GAC9B,CAAA4zB,qBAAAC,oBAAA,CAAA,4MAAoDn1B,YAAAA,EAAAA,CAAAA,CAAc,GAClE,EAAAvP,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAA+kC,CAAAA,CAAAA,KAAAA,cAAA/kC,CAAAA,CAAAA,EAAAA,KAAAi0B,WAAAj0B,CAAAA,CAAA,CAAA,CAAA,KAAA0mC,WAAAA,CAElB9lC,KAAAA,MAAA;QACzByzB,QAAAA,OAAAA,CAASqS,QAAS,GACzB3B,WAAW;IAAA,GACZ/kC,CAAAA,CAAAA,EAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,EAAAA,GAAAi0B,SAAAj0B,CAAAA,CAAAA,EAAAA,GAAA0mC,UAAA1mC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAAslC,gBAAsB1kC;IAGa,IAAAI,IAAAC;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAAuR,SAAAvR,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAm0B,CAAAA,CAAAA,KAAAA,kBAAAn0B,CAAAA,CAAAA,EAAAA,KAAAiH,OAAAA,CAKzBjG,KAAAA,MAAA;QACJ,CAACuQ,SAASA,UAAU+b,UAASrZ,OAAAA,IAAAA,CAE7B1C,MAAKtK,IAAAA,KAAU,aAAasK,MAAKkc,EAAAA,KAAQ,aAC3C0G,eAAe,QAAM;YAAA7uB;YAAA2B;QAAAA,CAAY,GAGnCqmB,UAASrZ,OAAAA,GAAW1C,KAAAA;IAAAA,GACnBtQ,KAAAA;QAACsQ;QAAOjM;QAAI6uB;QAAgBltB,IAAI;KAAA,EAACjH,CAAAA,CAAAA,EAAAA,GAAAuR,OAAAvR,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAm0B,gBAAAn0B,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,CAAAD,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAAAjB,CAAAA,CAAA,CAAA,CAAA,6MARpC2Q,YAAAA,EAAU3P,IAQPC,EAAiC;IAAC4B,IAAAA;IAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEVC,KAAAA,MAAA;QACzBuiC,qBAAAA,CAAAA,CAAyB;IAAA,GAC1BplC,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAFD,MAAAulC,SAAe1iC;IAETC,IAAAA;IAAA,KAAA;QAAA,IAGAqiC,qBAAmB;YAAAjhC,IAAAA;YAAAlE,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAMVwD,MAAAxD,EAAE,gCAAgC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,GAAAA,IAAAA,MAAAlE,CAAAA,CAAA,EAAA,CAAA;YAAAmG,IAAAA;YAAAnG,CAAAA,CAAAslC,EAAAA,CAAAA,KAAAA,iBAAAtlC,CAAAA,CAAAA,GAAAA,KAAA+kC,cAAA/kC,CAAAA,CAAA,EAAA,CAAA,KAAAkE,MAAAA,CALvCiC,KAAA;gBAAAc,MACC;gBAASkJ,MACT;gBAAUZ,UACNw1B;gBAAUv1B,WACT81B;gBAAapkC,SACfgD;YAAAA,GACVlE,CAAAA,CAAAA,GAAAA,GAAAslC,eAAAtlC,CAAAA,CAAAA,GAAAA,GAAA+kC,YAAA/kC,CAAAA,CAAAA,GAAAA,GAAAkE,KAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAND8C,KAAOqD;YAMNqO,MAAAA;QAAAA;QAGH,KAAA;IAAA;IAXF,MAAAutB,SAAiDj/B,IAcjD6jC,oBAA0BD,aAAa,YACvCE,mBAAyBF,aAAQ/8B,KAAAA;IAAczF,IAAAA;IAAA,KAAA;QAAA,IAGzC0iC,kBAAgB;YAClB,KAAA;YAAWnyB,MAAAA;QAAAA;QAAAtO,IAAAA;QAAAnG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIJyF,KAAAzF,EAAE,sBAAsB,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;QAI9BoG,MAAAA,KAAAugC,oBACI,mDACA;QAAwBtgC,IAAAA;QAAArG,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAHvBC,KAAA3F,EACL0F,EAGF,GAACpG,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;QAAAuG,IAAAA;QAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAA+hC,UAAA/hC,CAAAA,CAAA2mC,EAAAA,CAAAA,KAAAA,qBAAA3mC,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CARIE,MAAA;YAAA+9B,OACEn+B;YAAyBgK,MAC1B;YAASi0B,UACLmB;YAAMnkC,OACTiF;YAINrD,yJAAA6jC,aAAAA;YAAA9E;YAAA7wB,UAGSy1B;QAAiB,GAC5B3mC,CAAAA,CAAAA,GAAAA,GAAA+hC,QAAA/hC,CAAAA,CAAAA,GAAAA,GAAA2mC,mBAAA3mC,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAZDkE,KAAOqC;IAAAA;IALFrC,OAAAA;AAkBqD;AAG9DuiC,qBAAqBz+B,MAAAA,GAAS;AAC9By+B,qBAAqBhxB,WAAAA,GAAc;ACtE5B,MAAMqxB,+LAAoBjS,cAAAA,EAAmC;IAClEntB,MAAM;IACNotB,SAAS;IACT7O,aAAa;AACf,CAAC,GCKK0e,4BAAyE;IAC7EoC,mBAAmB;IACnBC,mBAAmB;IACnBrB,YAAY;IACZd,WAAW;AACb;AAEA,SAAShqB,kBACPnO,MAAAA,EACAu6B,WAAAA,EACAvmC,CAAAA,EACA;IACIgM,OAAAA,WAAW,uBAAuBu6B,cAC5B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,kBAAA;QAAiB;IAAA,CAA4B,IAEhDvmC,EAAEikC,yBAAAA,CAA0Bj4B,MAAM,CAAC;AAC5C;AAEA,SAAAw6B,iBAAA5mC,EAAAA,EAAA;IAAAN,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GAA0B,EAAAgnC,WAAAA,EAAAA,GAAA3mC,IACxB,EAAAI,CAAAA,EAAAA,GAAYC,6KAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACIhC,KAAA;QAAAumC,mBAAA,CAAA;IAAA,GAAyBnnC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAjFonC,MAAAA,qBAA2BC,8KAAAA,EAAgBJ,aAAarmC,EAAyB;IAACI,IAAAA;IAAAhB,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAonC,qBAAAA,CACpEpmC,KAAAN,EAAE,4CAA0C;QAAA0mC;IAAAA,CAAsB,GAACpnC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAonC,oBAAApnC,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,OAAAA,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CAA1EC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAAA,QAAAA;QAAOD,UAAAA;IAAAA,CAAoE,GAAOhB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAAlFiB;AAAkF;AAKpF,MAAMqmC,gBAAyCvnC,CAAA,UAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACpD,EAAAqF,EAAAA,EAAA2B,IAAAA,EAAAgnB,QAAAA,EAAAtqB,KAAAA,EAAAE,SAAAA,EAAAA,GAA+C9D,OAC/C,CAAAwnC,cAAAC,eAAA,CAAA,6MAAwCv3B,WAAAA,EAAAA,IAAgD,GACxF,EAAAyrB,OAAAA,EAAkBxH,+JAAAA,uBAAAA,EAAqB5uB,IAAI2B,IAAI,GAC/CwgC,+KAAyBC,sBAAAA,EAAoBpiC,IAAI2B,IAAI,GACrD0gC,uKAAkBC,gBAAAA,EAAatiC,IAAI2B,IAAI,GACvC,EAAA4gC,WAAAA,EAAAjhC,UAAAA,EAAAC,YAAAA,EAAAA,GAA+DyiB,gBAAgB,GAC/EuD,aAAkBib,0KAAAA,EAAalhC,YAAYC,YAAY,GACvD,EAAAnG,CAAAA,EAAAA,GAAYC,6KAAAA,EAAAnB,wBAAuC;IAACc,IAAAA;IAAAN,CAAAA,CAAA6sB,CAAAA,CAAAA,KAAAA,WAAAlpB,SAAA3D,CAAAA,CAAA,CAAA,CAAA,KAAA6sB,WAAAhpB,YAAAA,CAElCvD,KAAAusB,WAASlpB,SAAWkpB,WAAShpB,aAAiB,CAAA7D,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAA6sB,WAAAlpB,OAAA3D,CAAAA,CAAA,CAAA,CAAA,GAAA6sB,WAAAhpB,WAAA7D,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAhE,MAAA0mC,WAAkBpmC,GAA8C09B,IAAAA;IAAMp9B,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAynC,iBAAA5K,UAAAA,GAAAA,CAE1Cj8B,KAAA6mC,iBAAgB5K,UAAAA,CAAAlwB,IAAAA,oJAAAo7B,0BAAwC,GAAC/nC,CAAAA,CAAA,CAAA,CAAA,GAAAynC,iBAAA5K,UAAAA,EAAA78B,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAArF,MAAAgoC,sBAA4BpnC,IAE5B,CAAAqnC,kBAAAC,mBAAA,CAAA,OAAgDj4B,iNAAAA,EAAAA,CAAAA,CAAuB,GACvEk4B,YAAkBR,UAASQ,SAAAA,EAC3BC,eAAqBX,iBAAgBW,YAAAA;IAAapnC,IAAAA;IAAAhB,CAAAA,CAAAsF,CAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAA,EAAAA,KAAAiH,OAAAA,CACqBjG,KAAA;QAAAsE;QAAA2B;QAAAgd,YAGzD;IACbjkB,GAAAA,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,CAAA+/B,aAAAC,oBAAA,CAAA,+JAA4CwF,6BAAAA,EAA2BxkC,EAItE,GAEDqhB,0KAAoBC,iBAAAA,CAAe;IAACrhB,IAAAA;IAAAjB,CAAAA,CAAAgoC,CAAAA,CAAAA,KAAAA,uBAAAhoC,CAAAA,CAAAA,EAAAA,KAAA07B,QAAAxqB,QAAAA,IAAAlR,CAAAA,CAAA6D,EAAAA,CAAAA,KAAAA,aAAA7D,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAGtBO,KAAAy6B,QAAOxqB,QAAAA,GACjB2J,kBAAkB6gB,QAAOxqB,QAAAA,EAAAA,CAAYrN,aAAe,CAAA,CAAA,EAAAwkC,UAAAA,EAAc3nC,CAAC,KAAK,KACxEsnC,sBACEtnC,EAAE,0CAA0C,IAC5C,IAAEV,CAAAA,CAAAA,EAAAA,GAAAgoC,qBAAAhoC,CAAAA,CAAA,CAAA,CAAA,GAAA07B,QAAAxqB,QAAAA,EAAAlR,CAAAA,CAAAA,GAAAA,GAAA6D,WAAA7D,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAJRoB,MAAAA,QAAcH,IAMdqnC,WAAiB/5B,CAAQ5K,CAAAA;IAAMd,IAAAA;IAAA7C,CAAAA,CAAAA,GAAAA,KAAA07B,UAAAA,CAED74B,KAAAA,MAAA;QACrBwxB,QAAAA,OAAAA,CAAAA,GACPmT,gBAAgB,YAAY;IAAC,GAC9BxnC,CAAAA,CAAAA,GAAAA,GAAA07B,SAAA17B,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAHD,MAAAuoC,YAAkB1lC;IAGLC,IAAAA;IAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAAuoC,aAAAvoC,CAAAA,CAAA,EAAA,CAAA,KAAAgoC,uBAAAhoC,CAAAA,CAAA,EAAA,CAAA,KAAAmoC,aAAAnoC,CAAAA,CAAAioC,EAAAA,CAAAA,KAAAA,oBAAAjoC,CAAAA,CAAA0mC,EAAAA,CAAAA,KAAAA,YAAA1mC,CAAAA,CAAAynC,EAAAA,CAAAA,KAAAA,iBAAAW,YAAAA,IAAApoC,CAAAA,CAAAynC,EAAAA,CAAAA,KAAAA,iBAAAf,QAAAA,GAAAA,CAEH5jC,KAAAA,MAAA;QAER,MAAA0lC,qBACEf,iBAAgBW,YAAAA,KAAuB,CAAA,KAAIX,iBAAgBf,QAAAA,KAAcA;QAEvE,CAACuB,oBAAoBE,aAAAA,CAAcK,sBAAAA,CAIlCR,uBACHO,aAEFL,oBAAAA,CAAAA,CAAyB,CAAA;IAAA,GAC1BloC,CAAAA,CAAAA,GAAAA,GAAAuoC,WAAAvoC,CAAAA,CAAAA,GAAAA,GAAAgoC,qBAAAhoC,CAAAA,CAAAA,GAAAA,GAAAmoC,WAAAnoC,CAAAA,CAAAA,GAAAA,GAAAioC,kBAAAjoC,CAAAA,CAAAA,GAAAA,GAAA0mC,UAAA1mC,CAAAA,CAAA,EAAA,CAAA,GAAAynC,iBAAAW,YAAAA,EAAApoC,CAAAA,CAAA,EAAA,CAAA,GAAAynC,iBAAAf,QAAAA,EAAA1mC,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAA,EAAA,CAAA,KAAAuoC,aAAAvoC,CAAAA,CAAAgoC,EAAAA,CAAAA,KAAAA,uBAAAhoC,CAAAA,CAAAA,GAAAA,KAAAmoC,aAAAnoC,CAAAA,CAAA,EAAA,CAAA,KAAAooC,gBAAApoC,CAAAA,CAAAioC,EAAAA,CAAAA,KAAAA,oBAAAjoC,CAAAA,CAAA0mC,EAAAA,CAAAA,KAAAA,YAAA1mC,CAAAA,CAAA,EAAA,CAAA,KAAAynC,iBAAAW,YAAAA,IAAApoC,CAAAA,CAAAynC,EAAAA,CAAAA,KAAAA,iBAAAf,QAAAA,GAAAA,CAAExiC,KAAAA;QACDikC;QACAI;QACAP;QACAC;QACAR,iBAAgBf,QAAAA;QAChBA;QACA0B;QACAX,iBAAgBW,YAAA;KAAA,EACjBpoC,CAAAA,CAAAA,GAAAA,GAAAuoC,WAAAvoC,CAAAA,CAAAA,GAAAA,GAAAgoC,qBAAAhoC,CAAAA,CAAAA,GAAAA,GAAAmoC,WAAAnoC,CAAAA,CAAAA,GAAAA,GAAAooC,cAAApoC,CAAAA,CAAAA,GAAAA,GAAAioC,kBAAAjoC,CAAAA,CAAAA,GAAAA,GAAA0mC,UAAA1mC,CAAAA,CAAA,EAAA,CAAA,GAAAynC,iBAAAW,YAAAA,EAAApoC,CAAAA,CAAA,EAAA,CAAA,GAAAynC,iBAAAf,QAAAA,EAAA1mC,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,4MAtBD2Q,YAAAA,EAAU7N,IAaPoB,EASF;IAACiC,IAAAA;IAAAnG,CAAAA,CAAAsoC,EAAAA,CAAAA,KAAAA,YAAAtoC,CAAAA,CAAAA,GAAAA,KAAAunC,eAAAA,CAEQphC,KAAAA,MAAA;QACRsiC,MAAAA,aAAmBlB,iBAAiB,gBAAA,CAAiBe,UAErD9hC,YAAkBiiC,aAAa,cAAkB,MAEjDr9B,SAAcqF,WAAA,MAAA;YACZ+2B,gBAAgBhhC,SAAS;QAAA,GAFbiiC,aAAuB,MAAA,GAG7B;QACK/3B,OAAAA,IAAAA,aAAatF,MAAK;IAChCpL,GAAAA,CAAAA,CAAAA,GAAAA,GAAAsoC,UAAAtoC,CAAAA,CAAAA,GAAAA,GAAAunC,cAAAvnC,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAA6nC,EAAAA,CAAAA,KAAAA,eAAA7nC,CAAAA,CAAAA,GAAAA,KAAAsoC,YAAAtoC,CAAAA,CAAA,EAAA,CAAA,KAAAunC,eAAAA,CAAEnhC,KAACyhC;QAAAA;QAAaN;QAAce,QAAQ;KAAA,EAACtoC,CAAAA,CAAAA,GAAAA,GAAA6nC,aAAA7nC,CAAAA,CAAAA,GAAAA,GAAAsoC,UAAAtoC,CAAAA,CAAAA,GAAAA,GAAAunC,cAAAvnC,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA,4MATxC2Q,YAAAA,EAAUxK,IASPC,EAAqC;IAExC,MAAAizB,YAAkBjE,mLAAAA,CAAa;IAAC/uB,IAAAA;IAAArG,CAAAA,CAAAuoC,EAAAA,CAAAA,KAAAA,aAAAvoC,CAAAA,CAAAA,GAAAA,KAAA2D,OAAA+8B,cAAA1gC,CAAAA,CAAA6D,EAAAA,CAAAA,KAAAA,aAAA7D,CAAAA,CAAA,EAAA,CAAA,KAAA0mC,YAAA1mC,CAAAA,CAAA2nC,EAAAA,CAAAA,KAAAA,UAAAQ,SAAAA,IAAAnoC,CAAAA,CAAA,EAAA,CAAA,KAAAq5B,aAAAr5B,CAAAA,CAAAynC,EAAAA,CAAAA,KAAAA,iBAAAW,YAAAA,IAAApoC,CAAAA,CAAAynC,EAAAA,CAAAA,KAAAA,iBAAAf,QAAAA,GAAAA,CAELrgC,KAAAA,MAAA;QACzBgzB,UAAS1C,GAAAA,CAAAmQ,mBAAA;YAAA4B,sBAAA,CACgB/kC,OAAK+8B;YAAAiI,qBACPp6B,CAAQ1K,CAAAA;QAC9B,CAAA,GAEC8jC,UAASQ,SAAAA,IACTV,iBAAgBW,YAAAA,IAChBX,iBAAgBf,QAAAA,KAAcA,WAE9BwB,oBAAAA,CAAAA,CAAwB,IAExBK,UAAU;IAAA,GAEbvoC,CAAAA,CAAAA,GAAAA,GAAAuoC,WAAAvoC,CAAAA,CAAA,EAAA,CAAA,GAAA2D,OAAA+8B,YAAA1gC,CAAAA,CAAAA,GAAAA,GAAA6D,WAAA7D,CAAAA,CAAAA,GAAAA,GAAA0mC,UAAA1mC,CAAAA,CAAA,EAAA,CAAA,GAAA2nC,UAAAQ,SAAAA,EAAAnoC,CAAAA,CAAAA,GAAAA,GAAAq5B,WAAAr5B,CAAAA,CAAA,EAAA,CAAA,GAAAynC,iBAAAW,YAAAA,EAAApoC,CAAAA,CAAA,EAAA,CAAA,GAAAynC,iBAAAf,QAAAA,EAAA1mC,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAdD,MAAAulC,SAAel/B;IAsFFE,IAAAA;IAAA,KAAA;QAAA,IA5DP0nB,UAAQ;YAAAxnB,IAAAA;YAAAzG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAID+F,OAAA/F,EAAE,gCAAgC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAyG,IAAAA,IAAAA,OAAAzG,CAAAA,CAAA,EAAA,CAAA;YAAA6I,IAAAA;YAAA7I,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACnCmI,OAAAnI,EAAE,kCAAkC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA6I,IAAAA,IAAAA,OAAA7I,CAAAA,CAAA,EAAA,CAAA;YAAAmJ,IAAAA;YAAAnJ,CAAAA,CAAAyG,EAAAA,CAAAA,KAAAA,QAAAzG,CAAAA,CAAAA,GAAAA,KAAA6I,OAAAA,CAJvCM,OAAA;gBAAAgH,MACC;gBAASnN,MAAA4lC,iKAAAA;gBAAAtE,OAER79B;gBAAmCrF,OACnCyH;gBAAqCqI,UAAA,CAAA;YAAA,GAE7ClR,CAAAA,CAAAA,GAAAA,GAAAyG,MAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,MAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,IAAAA,IAAAA,OAAAnJ,CAAAA,CAAA,EAAA,CAAA,EANDuG,MAAO4C;YAMNqL,MAAAA;QAAAA;QAAA,IAGC,CAACwrB,wBAAyBD,CAAAA,aAAWpc,SAAS;YAAAld,IAAAA;YAAAzG,CAAAA,CAAAA,GAAAA,KAAAqiB,cAAAA,CACzC5b,OAAA;gBAAA0J,MACC;gBAASnN,yJAAA4lC,cAAAA;gBAAAtE,OAER;gBAASljC,OAEd,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,iCAAA,EAAuC;oBAAA,SAAA;oBAAgCihB;gBAAAA,CAAe;gBAAAnR,UAAA,CAAA;YAG1FlR,GAAAA,CAAAA,CAAAA,GAAAA,GAAAqiB,aAAAriB,CAAAA,CAAAA,GAAAA,GAAAyG,IAAAA,IAAAA,OAAAzG,CAAAA,CAAA,EAAA,CAAA,EARDuG,MAAOE;YAQN+N,MAAAA;QAAAA;QAGH,MAAAtD,WAAiB3C,CAAAA,CAAAA,CACf05B,oBACEpb,WAAS2Q,qBAAAtkB,WACTquB,iBAAiB,gBACjBA,iBAAiB,eACjBS,uBACAtM,QAAOxqB,QAAAA,GAICzK,MAAAyK,YAAY8uB;QAAoBn3B,IAAAA;QAAA7I,CAAAA,CAAAioC,EAAAA,CAAAA,KAAAA,oBAAAjoC,CAAAA,CAAAA,GAAAA,KAAAunC,gBAAAvnC,CAAAA,CAAA,EAAA,CAAA,KAAAU,IAAAA,CAIxCmI,MACInI,EADJ6mC,iBAAiB,cACX,mCACFU,oBAAoBV,iBAAiB,eACjC,iCACA,4BAH8B,GAGDvnC,CAAAA,CAAAA,GAAAA,GAAAioC,kBAAAjoC,CAAAA,CAAAA,GAAAA,GAAAunC,cAAAvnC,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;QAAAmJ,IAAAA;QAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAAioC,oBAAAjoC,CAAAA,CAAAunC,EAAAA,CAAAA,KAAAA,gBAAAvnC,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CAKhC+H,MAAA8+B,mBACHvnC,EAAE,wBAAwB,IAC1B6mC,iBAAiB,eAAeA,iBAAiB,eAAA,OAE/CnmC,OAAKpB,CAAAA,CAAAA,GAAAA,GAAAioC,kBAAAjoC,CAAAA,CAAAA,GAAAA,GAAAunC,cAAAvnC,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;QACDoJ,MAAAA,MAAA8H,YAAY+2B,mBAAAA,OAA0B;QAAY5+B,IAAAA;QAAArJ,CAAAA,CAAAulC,EAAAA,CAAAA,KAAAA,UAAAvlC,CAAAA,CAAA,EAAA,CAAA,KAAAyG,OAAAzG,CAAAA,CAAA6I,EAAAA,CAAAA,KAAAA,OAAA7I,CAAAA,CAAA,EAAA,CAAA,KAAAmJ,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAAoJ,MAAAA,CAnBvDC,MAAA;YAAA6H,UACKzK;YAAgC0J,MACpC;YAASm0B,OAGbz7B;YAIqC7F,yJAAA4lC,cAAAA;YAAAxnC,OAKhC+H;YAIIyY,UACDxY;YAAkDg7B,UAClDmB;QACXvlC,GAAAA,CAAAA,CAAAA,GAAAA,GAAAulC,QAAAvlC,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA,EArBDuG,MAAO8C;IAAAA;IAhCF9C,OAAAA;AAmEL;AAGJ+gC,cAAct/B,MAAAA,GAAS;AACvBs/B,cAAc7xB,WAAAA,GAAc;AC7M5B,MAAMiwB,sBAAsB;IAC1BE,eAAe;IACff,WAAW;IACXkC,mBAAmB;AACrB,GAGa8B,kBAA2CA,CAAC,EACvDvjC,EAAAA,EACA2B,IAAAA,EACAtD,KAAAA,EACAohC,UAAAA,EACA9W,QAAAA,EACF,KAAM;IACE,MAAA,EAAC6a,SAAAA,EAAAA,OAAa5U,+KAAAA,EAAqB5uB,IAAI2B,IAAI,GAC3C,CAACk+B,qBAAqBC,oBAAoB,CAAA,6MAAIn1B,WAAAA,EAAS,CAAA,CAAK,GAC5D,CAAC8vB,aAAaC,oBAAoB,CAAA,+JAAIwF,6BAAAA,EAA2B;QACrElgC;QACA2B;QACAgd,YAAY;IAAA,CACb,GACK5B,0KAAcC,iBAAAA,KACd,EAAC5hB,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAenB,wBAAwB,GAE7C6lC,wNAAe/f,eAAAA,EAAY,MAAM;QAChB,qBAAA,CAAA,CAAK,GAC1Byf,WAAW;IAAA,GACV;QAACA,UAAU;KAAC,GAETO,0NAAgBhgB,cAAAA,EAAY,MAAM;QACtC8f,qBAAqB,CAAA,CAAK,GAC1B0D,UAAUzU,OAAAA,CAAAA,GACV0Q,WAAW;IAAA,GACV;QAACA;QAAY+D,SAAS;KAAC,GAEpB/G,mNAAgDrc,UAAAA,EAAQ,IACxDyf,sBACK;YACLl+B,MAAM;YACNunB,SAASuW;YACTz6B,SACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAACgF,8BAAA;gBACC,IAAI3L,OAAOH,OAAO8B;gBAClB;gBAEA,QAAO;gBACP,UAAU+/B;gBACV,WAAWC;YAAAA;QAAc,IAM1B,MACN;QAAC3hC;QAAO2B;QAAI+/B;QAAcC;QAAeH;QAAqBJ;QAAY99B,IAAI;KAAC;IAE3Eye,WAAAA,gNAAAA,EAAQ,IACTuI,WACK,OAGL,CAAC+R,wBAAwB,CAACD,aAAapc,UAClC;YACLxT,MAAM;YACNnN,yJAAM+lC,gBAAAA;YACNzE,OAAO;YACPljC,OACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,iCAAA,EAA+B;gBAAA,SAAQ;gBAAqB;YAAA,CAC9D;YACD8P,UAAU,CAAA;QAAA,IAIP;YACLf,MAAM;YACNnN,yJAAM+lC,gBAAAA;YACN73B,UAAU3C,CAAQu6B,CAAAA,UAAU53B,QAAAA,IAAa8uB;YACzCsE,OAAO5jC,EAAE,wBAAwB;YACjCU,OAAO0nC,UAAU53B,QAAAA,GAAWxQ,EAAEglC,mBAAAA,CAAoBoD,UAAU53B,QAAQ,CAAC,IAAI;YACzEkzB,UAAUA,IAAMgB,qBAAqB,CAAA,CAAI;YACzCrD;QACF,GACC;QACD1f;QACA0f;QACA/B;QACA/R;QACA8R,aAAapc;QACbjjB;QACAooC,UAAU53B,QAAQ;KACnB;AACH;AAEA23B,gBAAgB7gC,MAAAA,GAAS;AACzB6gC,gBAAgBpzB,WAAAA,GAAc;ACrF9B,MAAMuzB,oCAAgChkB,6MAAAA,EAAK,SAAAjlB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GAGzC,EAAAiR,QAAAA,EAAA+3B,QAAAA,EAAAC,MAAAA,EAAAA,GAAqCnpC,OACrC,EAAAopC,gBAAAA,EAAAA,GAA2B7f,gBAAgB;IAAC,IAAA8f,kBAAAC;IAAArpC,CAAAA,CAAAA,EAAAA,KAAAkpC,SAAAA,CAC5C,CAAAE,kBAAA,GAAAC,gBAAA,CAAA,GAAgDH,QAAMlpC,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,EAAAA,GAAAopC,kBAAAppC,CAAAA,CAAAA,EAAAA,GAAAqpC,gBAAAA,IAAAA,CAAAD,mBAAAppC,CAAAA,CAAA,CAAA,CAAA,EAAAqpC,mBAAArpC,CAAAA,CAAA,CAAA,CAAA;IACtD,MAAA,CAAAspC,eAAAC,gBAAA,CAAA,6MAA0Ct5B,WAAAA,EAAAA,IAAuC;IAAC3P,IAAAA;IAAA,KAAA;QAAA,IAI5E,CAAC8oC,oBAAqB,CAACA,iBAAgBhoC,KAAAA,IAAA,CAAWgoC,iBAAgBxnB,QAAAA,EAAU;YAAE,KAAA;YAAWpN,MAAAA;QAAAA;QAAA5T,IAAAA;QAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAG9EhC,MAAA;YAAAiS,UAAA;QAAA,GAAe7S,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA;QAAAgB,IAAAA;QAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAopC,iBAAAhoC,KAAAA,GAAAA,CACzBJ,MAAAooC,iBAAgBhoC,KAAAA,IAAU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAW;YAAA,MAAC;YAAGgoC,UAAAA,iBAAgBhoC,KAAAA;QAAO,CAAA,GAAOpB,CAAAA,CAAA,CAAA,CAAA,GAAAopC,iBAAAhoC,KAAAA,EAAApB,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA;QAAAiB,IAAAA;QAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAAopC,iBAAAxnB,QAAAA,GAAAA,CACxE3gB,MAAAmoC,iBAAgBxnB,QAAAA,IACf,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,UAAA,EACa;YAAA,eAAA;YACF,UAAC;YACJ,OAAA;gBAAAgF,WAAA,CAAA;gBAAAD,cAAA,CAAA;YAAA;YACD,MAAA0d,OAAO+E,iBAAgBxnB,QAAS,EAACpK,KAAAA,CAC9B,GAAG,EAAChO,GAAAA,CAAAO,OACuD;QAEvE,CAAA,GAAA/J,CAAAA,CAAA,CAAA,CAAA,GAAAopC,iBAAAxnB,QAAAA,EAAA5hB,CAAAA,CAAAA,EAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA;QAAA6C,IAAAA;QAAA7C,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,OAAAhB,CAAAA,CAAAA,EAAAA,KAAAiB,MAAAA,CAXH4B,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAA;YAAY,OAAAjC;YAAuB,OAAA;YAAc,KAAC;YAChDI,UAAAA;gBAAAA;gBACAC;aAAAA;QAUH,CAAA,GAAOjB,CAAAA,CAAAA,EAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,KAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,GAAAA,IAAAA,MAAA7C,CAAAA,CAAA,EAAA,CAAA,EAbTM,KACEuC;IAAAA;IAJJ,MAAAwU,iBAAuB/W,IAsBlBM,KAAAuoC,oBAAoBA,iBAAgBK,YAAAA;IAAaxoC,IAAAA;IAAAhB,CAAAA,CAAAkR,EAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAAA,GAAAA,KAAAopC,oBAAAppC,CAAAA,CAAA,EAAA,CAAA,KAAAqX,iBAAAA,CACjDrW,KAAAooC,oBACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iKAAA,EAAA;QAAuB,SAAE;QACxB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,UAAA,EAAkB;YAAA,UAAA,CAAC/xB;YAAyBA,SAAa;YAAa,WAAA;YACrE,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,QAAA,EACC;gBAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACc;oBAAA,eAAA,CAAA,OAAA,EAAUrB,oBAAoBozB,iBAAgB9E,KAAM,CAAC,EAAA;oBACxD,UAAApzB,YAAY3C,CAAAA,CAAQ66B,iBAAgBl4B,QAAAA;oBACxC,MAAAk4B,iBAAgBpmC,IAAAA;oBAEb,SAAAomC,iBAAgBhF,QAAAA;oBACpBmF,KAAe;oBACf,MAAA;oBACC,MAAAH,iBAAgB9E,KAAAA;oBAChB,MAAA8E,iBAAgBj5B,IAAAA,IAAS;gBAAA,CAAS;YAE5C,CAAA;QACF,CAAA;IACF,CAAA,GACDnQ,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAAopC,kBAAAppC,CAAAA,CAAAA,GAAAA,GAAAqX,gBAAArX,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAkR,EAAAA,CAAAA,KAAAA,YAAAlR,CAAAA,CAAAA,GAAAA,KAAAqpC,oBAAArpC,CAAAA,CAAA,EAAA,CAAA,KAAAipC,WAAAA,CACAhoC,KAAAgoC,YAAYI,iBAAgB5mC,MAAAA,GAAA,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAC1B,kBAA+B4mC;QAAAA,cAAAA;QAA4Bn4B;IAC7D,CAAA,GAAAlR,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAAqpC,kBAAArpC,CAAAA,CAAAA,GAAAA,GAAAipC,UAAAjpC,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAspC,EAAAA,CAAAA,KAAAA,iBAAAtpC,CAAAA,CAAAA,GAAAA,KAAAopC,mBAAAA,CACAvmC,KAAAumC,oBAAoBA,iBAAgBrH,MAAAA,IAClC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;QAA0B,QAAAqH,iBAAgBrH,MAAAA;QAA2BuH,kBAAY;IACnF,CAAA,GAAAtpC,CAAAA,CAAAA,GAAAA,GAAAspC,eAAAtpC,CAAAA,CAAAA,GAAAA,GAAAopC,kBAAAppC,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAAY,MAAAZ,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CA1BHC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,mJAAC,OAAA,EAAW;QAAA,OAAA;QAAc,KAAA;QACvBlC,UAAAA;YAAAA;YACAI;YAmBAC;YAGA4B;SAGH;IAAA,CAAA,GAAO7C,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EA3BP8C;AA2BO,CAEV,GAEY2mC,2BAA2BzkB,iNAAAA,EAAK,WAAA;IAAAhlB,MAAAA,oMAAAC,EAAA,EAAA,GAC3C,EAAA0Z,SAAA+vB,UAAAA,EAAA9f,eAAAA,EAAAhjB,UAAAA,EAAAimB,SAAAA,EAAAA,GAAsEvD,gBAAgB;IAAC,IAAAhpB,IAAAM;IAAAZ,CAAAA,CAAAA,EAAAA,KAAA0pC,aAAAA,CAS9E9oC,KAAA8oC,cAAgB,CAAA1pC,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,GAAA0pC,YAAA1pC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CAAjBI,KAACJ,GAAgBkJ,MAAAA,CAAA4E,QAA6C,GAAC1O,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAA/DU;IADR,MAAA2Y,UAAgBrZ;IAGfW,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2Z,QAAAlX,MAAAA,IAAAzC,CAAAA,CAAA,CAAA,CAAA,KAAA4pB,mBAAA5pB,CAAAA,CAAA,CAAA,CAAA,KAAA4G,aAAAA,CAKC3F,KAAA4B,CAAAA,QAAA;QAAC,MAAA,EAAAqmC,MAAAA,EAAAA,GAAArmC;QACC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,+BACW;YAAA,UAAA+mB,oBAAoB;YAIpB,UAAAjQ,QAAOlX,MAAAA,GAAA;YACTymC;QAAAA,GAEHtiC,UACL;IAAA,GACH5G,CAAAA,CAAA,CAAA,CAAA,GAAA2Z,QAAAlX,MAAAA,EAAAzC,CAAAA,CAAAA,EAAAA,GAAA4pB,iBAAA5pB,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAdH,MAAA2pC,iCAAuC1oC;IAkBnC0Y,IAAAA,QAAOlX,MAAAA,KAAA,KAAA,CAAkBoqB,WAAS,OAAA;IAAAhqB,IAAAA;IAAA,OAAA7C,CAAAA,CAAA2Z,CAAAA,CAAAA,KAAAA,WAAA3Z,CAAAA,CAAAA,EAAAA,KAAA6sB,aAAA7sB,CAAAA,CAAA,EAAA,CAAA,KAAA2pC,iCAAAA,CAKpC9mC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,6BAAA;QAGU8W;QACIkT,aAAAA;QACP,OAAA;QAEwB,UAChC;IAAA,CAAA,GAA8B7sB,CAAAA,CAAAA,EAAAA,GAAA2Z,SAAA3Z,CAAAA,CAAAA,EAAAA,GAAA6sB,WAAA7sB,CAAAA,CAAAA,GAAAA,GAAA2pC,gCAAA3pC,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAR9B6C;AAQ8B,CAEjC,GAEY+mC,oOAA0B5kB,OAAAA,EAAK,WAAA;IAAAhlB,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GAC1C,EAAA0Z,OAAAA,EAAAiQ,eAAAA,EAAAiD,SAAAA,EAAAsT,aAAAA,EAAAA,GAA6D7W,gBAAgB,GAK7Eod,uKAFgBvF,sBAAAA,EAAoBhB,eAAaxxB,QAA0B,GAEnDrJ,MAAQ,IAChC4L,WAAAA,CAAkB2b,WAASlpB,SAAWkpB,WAAShpB,aAAW,CAAA,CAAA,EAAMm6B,IAAAA,KAAW0I;IAAQ,IAAApmC,IAAAM;IAAAZ,CAAAA,CAAAA,EAAAA,KAAA6sB,YAAAA,CAC3CjsB,KAAAisB,aAAe,CAAA7sB,GAAAA,CAAAA,CAAAA,EAAAA,GAAA6sB,WAAA7sB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAA0mC,CAAAA,CAAAA,KAAAA,YAAA1mC,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CAApBI,KAAA;QAAA,GAAKJ,EAAAA;QAAe8lC;IAAAA,GAAY1mC,CAAAA,CAAAA,EAAAA,GAAA0mC,UAAA1mC,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAhCU;IAAnC,MAAAumB,cAAoBjnB;IAAwE,IAAAW,IAAA4B;IAAA7C,CAAAA,CAAAA,EAAAA,KAAA2Z,UAAAA,CAGtD9W,KAAA8W,WAAa,CAAA3Z,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,GAAA2Z,SAAA3Z,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAAA,EAAAA,KAAA6C,KAAAA,CAAdC,KAACD,GAAaiH,MAAAA,CAAA+/B,eAAwB,EAACnlC,KAAAA,CAAA,CAAA,CAAS,GAAC1E,CAAAA,CAAAA,EAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAAjD6B;IAArC,MAAAgnC,iBAAuB7oC;IAA2EiD,IAAAA;IAAAlE,CAAAA,CAAA4pB,CAAAA,CAAAA,KAAAA,mBAAA5pB,CAAAA,CAAAA,GAAAA,KAAAkR,WAAAA,CAKhGhN,KAAAiC,CAAAA,QAAA;QAAC,MAAA,EAAA+iC,MAAAA,EAAAA,GAAA/iC;QACC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,+BAAA;YACW,UAAAyjB,oBAAoB,eAAerb,CAAQ2C,CAAAA;YAC3C,UAAI,CAAA;YACNg4B;QACR,CAAA;IACHlpC,GAAAA,CAAAA,CAAAA,EAAAA,GAAA4pB,iBAAA5pB,CAAAA,CAAAA,GAAAA,GAAAkR,UAAAlR,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IATH2pC,MAAAA,iCAAuCzlC,IAgBtBiC,KAAAohB;IAAkBnhB,IAAAA;IAAA,OAAApG,CAAAA,CAAA8pC,EAAAA,CAAAA,KAAAA,kBAAA9pC,CAAAA,CAAAA,GAAAA,KAAA2pC,kCAAA3pC,CAAAA,CAAA,EAAA,CAAA,KAAAmG,KAAAA,CAFjCC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,6BAAA;QACU0jC,SAAa;QACT,aAAA3jC;QACP,OAAA;QAEwB,UAChC;IAAA,CAAA,GAA8BnG,CAAAA,CAAAA,GAAAA,GAAA8pC,gBAAA9pC,CAAAA,CAAAA,GAAAA,GAAA2pC,gCAAA3pC,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA,EAN9BoG;AAM8B,CAEjC;AAEM,SAASyjC,gBACd7hC,MAAAA,EACyD;IAClDA,OAAAA,OAAOA,MAAAA,KAAWy+B,qBAAqBz+B,MAAAA;AAChD;AAvJ2C,SAAA+B,QAAA06B,CAAAA,EAAA;IAsBjBA,OAAAA,EAAC//B,KAAAA,CAAAA,GAAAA,CAAW,EAACggC,WAAAA,CAAa,IAAID,EAAC//B,KAAAA,CAAA,CAAQ,EAACqlC,WAAAA,CAAa;AAAC;AAuCnC,SAAAr7B,SAAA1G,MAAAA,EAAA;IAUI6hC,OAAAA,CAAAA,gBAAgB7hC,MAAM;AAAC;AAuC5B,SAAA2G,SAAA/J,MAAAA,EAAA;IAAA,OAIoBA,OAAKolC,OAAAA;AAAA;ACnI9D,SAAAC,qBAAA;IAAAjqC,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GACL,EAAA4/B,YAAAA,EAAAhY,OAAAA,EAAAiY,OAAAA,MAAAA,EAAuCxW,GAAAA,gBAAAA,GACvC4gB,aAAmB,GAAGriB,OAAO,CAAA,QAAA,CAAA;IAAUvnB,IAAAA;IAAA,IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA6/B,gBAAA7/B,CAAAA,CAAA6nB,CAAAA,CAAAA,KAAAA,WAAA7nB,CAAAA,CAAAkqC,CAAAA,CAAAA,KAAAA,cAAAlqC,CAAAA,CAAAA,EAAAA,KAAA8/B,QAAA;QAAAl/B,IAAAA;QAAAZ,CAAAA,CAAA6/B,CAAAA,CAAAA,KAAAA,gBAAA7/B,CAAAA,CAAAA,EAAAA,KAAA6nB,WAAA7nB,CAAAA,CAAA,CAAA,CAAA,KAAAkqC,aAAAA,CAIxBtpC,MAAAA,CAAAggC,MAAA32B,QACR,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;gBACO,MAAA22B,KAAI59B,IAAAA;gBACN,IAAA,GAAG6kB,OAAO,CAAA,IAAA,EAAO+Y,KAAIt7B,EAAA,EAAA;gBACf,UAAAu6B,iBAAiBe,KAAIt7B,EAAAA;gBAExB,OAAAs7B,KAAIx/B,KAAAA;gBACC8oC;gBACJ,QAAAjgC,UAAK,IAAA,OAAiB22B,KAAIt7B,EAAAA,IAAA;YAH7Bs7B,GAAAA,KAAIt7B,EAIT,GACHtF,CAAAA,CAAAA,EAAAA,GAAA6/B,cAAA7/B,CAAAA,CAAAA,EAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,EAAAA,GAAAkqC,YAAAlqC,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAVAM,KAAAw/B,OAAKt2B,GAAAA,CAAK5I,GAUV,GAACZ,CAAAA,CAAAA,EAAAA,GAAA6/B,cAAA7/B,CAAAA,CAAAA,EAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,EAAAA,GAAAkqC,YAAAlqC,CAAAA,CAAAA,EAAAA,GAAA8/B,QAAA9/B,CAAAA,CAAAA,EAAAA,GAAAM;IAAA,OAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,OAAAA,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAXJM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,UAAA,EAAA;QAAe,OAAA;QACbN,UAWH;IAAA,CAAA,GAAUN,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA,EAZVY;AAYU;AAId,SAAAupC,kBAAApqC,KAAAA,EAAA;IAAAC,MAAAA,KAAAC,+LAAAA,EAAA,EAAA;IAAA,IAAA+C,MAAAsC,IAAA8kC,UAAA9F,OAAAj/B,MAAA6kC,YAAAG;IAAArqC,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAQE,EAAAiD,IAAAA,EAAAsC,EAAAA,EAAA8kC,QAAAA,EAAA9F,KAAAA,EAAA4F,UAAAA,EAAAG,MAAAA,EAAA,GAAAhlC,MAAiEtF,GAAAA,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAgD,MAAAhD,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAAoqC,UAAApqC,CAAAA,CAAAA,EAAAA,GAAAskC,OAAAtkC,CAAAA,CAAAA,EAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,EAAAA,GAAAkqC,YAAAlqC,CAAAA,CAAAA,EAAAA,GAAAqqC,MAAAA,IAAAA,CAAArnC,OAAAhD,CAAAA,CAAA,CAAA,CAAA,EAAAsF,KAAAtF,CAAAA,CAAA,CAAA,CAAA,EAAAoqC,WAAApqC,CAAAA,CAAA,CAAA,CAAA,EAAAskC,QAAAtkC,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA,EAAAkqC,aAAAlqC,CAAAA,CAAA,CAAA,CAAA,EAAAqqC,SAAArqC,CAAAA,CAAA,CAAA,CAAA;IACtE,MAAA,EAAAsQ,KAAAA,EAAAuc,SAAAA,EAAA,GAA2BvD,mBAC3B,EAAAghB,OAAAA,EAAAA,GAAkBpjC,cAAc;IAAC5G,IAAAA;IAAAN,CAAAA,CAAAsqC,CAAAA,CAAAA,KAAAA,WAAAtqC,CAAAA,CAAAA,EAAAA,KAAAqqC,SAAAA,CACD/pC,KAAAA,IAAMgqC,QAAQD,MAAM,GAACrqC,CAAAA,CAAAA,EAAAA,GAAAsqC,SAAAtqC,CAAAA,CAAAA,EAAAA,GAAAqqC,QAAArqC,CAAAA,CAAAA,GAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,EAAA,CAAA;IAArD+X,MAAAA,cAAoBzX,IAMNM,KAAC0P,CAAAA,SAAUuc,CAAAA,WAASlpB,SAAO,CAAKkpB,WAAShpB;IAAW7C,IAAAA;IAAA,OAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAA+X,eAAA/X,CAAAA,CAAA,EAAA,CAAA,KAAAgD,QAAAhD,CAAAA,CAAA,EAAA,CAAA,KAAAsF,MAAAtF,CAAAA,CAAAoqC,EAAAA,CAAAA,KAAAA,YAAApqC,CAAAA,CAAAskC,EAAAA,CAAAA,KAAAA,SAAAtkC,CAAAA,CAAAqF,EAAAA,CAAAA,KAAAA,QAAArF,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAAkqC,aAAAA,CAHhElpC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,MAAA,EAAA;QAAG,GACEqE,IAAAA;QACW6kC,iBAAS;QACd,UAAAtpC;QACJoC;QACFsC;QACGg/B;QACEvsB,SAAAA;QACCqyB,UAAAA;IACV,CAAA,GAAApqC,CAAAA,CAAAA,GAAAA,GAAA+X,aAAA/X,CAAAA,CAAAA,GAAAA,GAAAgD,MAAAhD,CAAAA,CAAAA,GAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAAoqC,UAAApqC,CAAAA,CAAAA,GAAAA,GAAAskC,OAAAtkC,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAkqC,YAAAlqC,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EATFgB;AASE;AC7CC,SAAAupC,sBAAA;IAAAvqC,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GACL,EAAA2pB,eAAAA,EAAAnpB,UAAAA,EAAAW,KAAAA,EAAAyrB,SAAAA,EAAAA,GAAwDvD,mBACxDnpB,gBAAsB0sB,WAASlpB,SAAWkpB,WAAShpB,WACnDipB,aAAmBve,CAAQpO,CAAAA;IAAcG,IAAAA;IAAAN,CAAAA,CAAAG,CAAAA,CAAAA,KAAAA,iBAAAH,CAAAA,CAAAA,EAAAA,KAAAS,cAAAT,CAAAA,CAAA,CAAA,CAAA,KAAA8sB,aAAAA,CAEFxsB,KAAA;QAAA4Y,SAC5B4T;QAAUrsB;QAAAI,OAEZV;IAAAA,GACRH,CAAAA,CAAAA,EAAAA,GAAAG,eAAAH,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAA8sB,YAAA9sB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAJD,MAAA,EAAAc,KAAAA,EAAAD,KAAAA,EAAAA,+JAAuBE,2BAAAA,EAAgBT,EAItC,GACD,EAAAI,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAE/CoqB,IAAAA,oBAAoB,gBAAY,CAAKkD,YAAU;QAAAlsB,IAAAA;QAAA,OAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAC1ChC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA,CAAA,CAAA,GAAKZ,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAALY;IAAAA;IAAK,IAGVQ,OAAK;QAAAR,IAAAA;QAAA,OAAAZ,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CACAR,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA;YAAA,UAAA;QAAA,CAAQ,GAAIZ,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAZY;IAAAA;IAAY,IAAA,CAGhBT,eAAa;QAIES,MAAAA,MAAAH,YAAUW,SAAWX,YAAUiH;QAAM1G,IAAAA;QAAAhB,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAY,MAAAA,CADlDI,MAAAN,EAAE,wCAAsC;YAAAD,YAC3BG;QAAAA,CACb,GAACZ,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA;QAAAiB,IAAAA;QAAAjB,OAAAA,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAA,CAHJC,KACGD,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0NAAAA,WAAAA,EAAAA;YAAAA,UAAAA;QAAAA,CAEC,GACDhB,CAAAA,CAAAA,GAAAA,GAAAgB,KAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAJHiB;IAAAA;IAIG,IAIHH,OAAK;QAAAF,IAAAA;QAAAZ,CAAAA,CAAAA,GAAAA,KAAAc,MAAAI,OAAAA,IAAAlB,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACGE,MAAAF,EAAE,0CAAwC;YAAAI,OAAUA,MAAKI,OAAAA;QAAAA,CAAS,GAAClB,CAAAA,CAAA,EAAA,CAAA,GAAAc,MAAAI,OAAAA,EAAAlB,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,EAAA,CAAA;QAAAgB,IAAAA;QAAAhB,OAAAA,CAAAA,CAAAA,GAAAA,KAAAY,MAAAA,CAAtEI,MAAGJ,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0NAAAA,WAAAA,EAAAA;YAAAA,UAAAA;QAAAA,CAAmE,GAAIZ,CAAAA,CAAAA,GAAAA,GAAAY,KAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,EAAA,CAAA,EAA1EgB;IAAAA;IAA0EJ,IAAAA;IAAAZ,CAAAA,CAAAA,GAAAA,KAAAU,KAAAV,CAAAA,CAAAa,EAAAA,CAAAA,KAAAA,OAAAO,QAAAA,CAK9ER,KAAAC,OAAKO,SACJ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAEO,QAAA;QAFM,OAAA;YAAAC,OAAQ;QAAA;QAClBX,UAAAA,EAAE,2CAA2C;IAAA,CAChD,GACDV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAA,EAAA,CAAA,GAAAa,OAAAO,OAAApB,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAA,OAAAhB,CAAAA,CAAAA,GAAAA,KAAAY,KAAAA,CALHI,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA;QACGJ,UAAAA;IAAAA,CAIA,GACAZ,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EANHgB;AAMG;ACRA,MAAMwpC,sBAAsBxlB,iNAAAA,4MACjC5gB,aAAAA,EAAW,SACTqmC,MAAAA,EACApmC,GAAAA,EACA;IACM,MAAA,EAAC6c,SAAAA,EAAAA,GAAaupB,QACd,EACJ9wB,SAAS+vB,UAAAA,EACT7c,SAAAA,EACA6d,YAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAzpB,cAAAA,EACA1gB,UAAAA,EACAmpB,eAAAA,EACAkW,OAAAA,MAAAA,EACA+K,uBAAAA,EACF,GAAIvhB,mBACE,EAACmG,QAAAA,EAAQ,GAAIvE,oBACb,EAACjhB,KAAAA,EAAO9F,UAAAA,SAAAA,EAAU2mC,gBAAAA,EAAgB,GAAI5jC,iBACtC,EAACyS,SAASsH,YAAAA,EAAgB8pB,+JAAAA,kBAAAA,CAC1B,IAAA,CAAC/I,kBAAkB8B,mBAAmB,CAAA,GAAI7zB,qNAAAA,EAA6B,IAAI,GAI3E0J,oNAAU+L,UAAAA,EACd,IAAA,CAAOgkB,cAAc,CAAA,CAAA,EAAI5/B,MAAAA,CAAQ9B,CAAW,SAAA,CAAC6hC,gBAAgB7hC,MAAM,CAAC,GACpE;QAAC0hC,UAAU;KACb,GAEMjkB,sNAAYC,UAAAA,EAChB,IACE1E,iBAAiB;YAACa,eAAe6oB;YAAczpB;YAAcC;YAAWC;QAAe,CAAA,GACzF;QAACupB;QAAczpB;QAAcE;QAAgBD,SAAS;KACxD,GAEM8pB,2NAAkBtlB,WAAAA,EAAQ,IAAMD,UAAU3b,MAAAA,CAAO8W,gBAAgB,GAAG;QAAC6E,SAAS;KAAC,GAC/EG,6NAAmBF,UAAAA,EAAQ,IAAMD,UAAU3b,MAAAA,CAAOgX,mBAAmB,GAAG;QAAC2E,SAAS;KAAC,GACnFwlB,WAAWnL,OAAMr9B,MAAAA,GAAS,GAE1B,EAAC0Q,SAAAA,EAAWU,MAAAA,EAAU6B,GAAAA,QAAAA,GAEtBwE,WAAWrG,UAAU,CAACV,YAAY,CAAA,IAAK,GAUvC+3B,sBAAsBzb,SAAS0b,UAAAA,IAAcP,eAAe9K,OAAMr9B,MAAAA,GAAS,GAI3E2oC,2BAA2BF,uBAAuBJ,kBAIlDO,iBAAiB5b,SAAS7V,UAAAA,IAAc3P,QAAQ,GAOhDqhC,2BAA2B,CAACF,4BAA4B,CAACC,kBAAkB,CAAC,CAAClnC,WAE7E,EAACzD,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAenB,wBAAwB,GAE7C+rC,8NAAoBjmB,cAAAA,EAGxB,CAAC,EAAC4jB,MAAAA,EAAM,GACL,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,yCAAA;YACC;YACA;YACA;YACA;QAAA,CAAe,GAGnB;QAACtjB;QAAkBoc,gBAAgB;KACrC;IAEA,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLACG,4BAAA,EACC;QAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAACtoB,cACC;YAAA,QAAM,CAAA;YACN;YACA,SAASkQ,oBAAoB,gBAAgB,CAACiD,WAAWlpB,SAAS,CAACkpB,WAAWhpB;YAC9E,OAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,qBAAA,CAAmB,CAAA;YAC3B,MAAMonC,YAAa,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,oBAAA,CAAqB,CAAA;YACxC;YACA,YACEI,kBACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACC;gBAAA,IAAIlnC;gBACJ,WAAQ;gBACR,MAAMqnC,mKAAAA;gBACN,MAAK;gBACL,cAAc;oBAAClhC,SAAS5J,EAAE,8BAA8B;gBAAA;YAAA,CAG9D;YACA,SACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;gBAAK,OAAM;gBAAS,KAAK;gBACvBmqC,UAAAA;oBAAwBpoC,wBAAAA,MAAAA,GAAS,KAE7BooC,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0NAAAA,WAAAA,EAAAA;wBAAAA,UAAAA,wBAAwBrhC,GAAAA,CAAI,CAACiiC,yBAAyBlwB,gNAC9CqU,gBAAAA,EAAc6b,yBAAyB;gCAAA,oDAAA;gCAE5C10B,KAAK,CAAA,gBAAA,EAAmBwE,GAAG,EAAA;gCAC3B9a;4BACD,CAAA,CACF;oBACH,CAAA;oBAGDuqC,gBAAgBxhC,GAAAA,CAAKlB,CACpB,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,wBAAA;4BAAsC,MAAMA;wBAAAA,GAAhBA,KAAKyO,GAAgB,CACnD;oBACA8V,aAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACE,6BACC;wBAAA;wBACA,aAAaA;wBACb,OAAM;wBAEL0e,UACH;oBAAA,CAAA;oBAGDL,uBACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACC;wBAAA,cAAYxqC,EAAE,sCAAsC;wBACpD,yJAAMgrC,oBAAAA;wBAEN,MAAK;wBACL,SAASd;wBACT,cAAc;4BAACtgC,SAAS5J,EAAE,mCAAmC;wBAAA;oBAAA,GAHzD,mBAKP;oBAEA0qC,4BAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACE,2LAAA,EACC;wBAAA,yJAAM3c,YAAAA;wBAEN,MAAK;wBACL,SAASkc;wBACT,cAAc;4BAACrgC,SAAS5J,EAAE,uCAAuC;wBAAA;oBAAA,GAH7D,mBAKP;oBAEA4qC,4BACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,2LAAA,EAAA;wBACC,yJAAM7c,YAAAA;wBAEN,MAAK;wBACL,cAAc;4BAACnkB,SAAS5J,EAAE,6CAA6C;wBAAA;wBACvE,IAAIyD;oBAAAA,GAHA,mBAKP;iBAAA;YACH,CAAA;QACD,CAAA;IAAA,CAEL;AAEJ,CAAC,CACH,GAEMwnC,oPAA0C3mB,OAAAA,EAC9C,SAAAjlB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GAME,EAAA6jC,mBAAAA,EAAA9B,gBAAAA,EAAApc,gBAAAA,EAAkE7lB,GAAAA,OAKlEmpC,mNAAe0C,mBAAAA,EAAiB7rC,MAAKmpC,MAAO;IAAC5oC,IAAAA;IAAAN,OAAAA,CAAAA,CAAA,CAAA,CAAA,KAAA4lB,oBAAA5lB,CAAAA,CAAAgiC,CAAAA,CAAAA,KAAAA,oBAAAhiC,CAAAA,CAAA8jC,CAAAA,CAAAA,KAAAA,uBAAA9jC,CAAAA,CAAAA,EAAAA,KAAAkpC,SAAAA,CAG3C5oC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iCAAA;QACsBwjC;QACH9B;QACApc;QACVsjB;IAAAA,CACR,GAAAlpC,CAAAA,CAAAA,EAAAA,GAAA4lB,kBAAA5lB,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAA8jC,qBAAA9jC,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EALFM;AAKE,CAGR,GAEMurC,4OAAkC7mB,OAAAA,EAAK,SAAAjlB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,CAAA,GAM3C,EAAAipC,MAAAA,EAAApF,mBAAAA,EAAAle,gBAAAA,EAAAoc,gBAAAA,EAAAA,GAA0EjiC;IAAKO,IAAAA;IAAAN,CAAAA,CAAA4lB,CAAAA,CAAAA,KAAAA,oBAAA5lB,CAAAA,CAAAA,EAAAA,KAAA8jC,uBAAA9jC,CAAAA,CAAA,CAAA,CAAA,KAAAkpC,SAAAA,CAK7E5oC,KAAAM,CAAAA,QAAA;QAAC,MAAA,EAAAykB,YAAAA,EAAAA,GAAAzkB;QAAc,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;YACHkjC,KAAAA;YACR,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,uBACQle;gBAAAA,OAAAA;gBAGL,cAAAsjB,OAAMzmC,MAAAA,GAAAA,IACFymC,OAAM1/B,GAAAA,CAAAA,CAAAy6B,aAAAR,cACH,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,oBAAA;wBAEcQ;wBACH,UAAA11B,CAAQ01B,CAAAA,YAAW/yB,QAAAA;wBACtBuyB,OAAU;wBACPpe,UAAW;oBAAA,GAJhB4e,YAAWK,KAAAA,CAMnB,IAAC36B,KAAAA;YAAAA,GAXJ,cAYW;QAAA,CAGnB;IAAA,GACD3J,CAAAA,CAAAA,EAAAA,GAAA4lB,kBAAA5lB,CAAAA,CAAAA,EAAAA,GAAA8jC,qBAAA9jC,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAvBH,MAAAkkC,qBAA2B5jC;IAyB1BM,IAAAA;IAAA,OAAAZ,CAAAA,CAAAgiC,CAAAA,CAAAA,KAAAA,oBAAAhiC,CAAAA,CAAAA,EAAAA,KAAAkkC,sBAAAlkC,CAAAA,CAAA,CAAA,CAAA,KAAAkpC,SAAAA,CAGCtoC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,qBAAkCsoC;QAAAA,cAAAA;QAA0BlH;QAAAA,UAAAA;IAE7D,CAAA,GAAsBhiC,CAAAA,CAAAA,EAAAA,GAAAgiC,kBAAAhiC,CAAAA,CAAAA,EAAAA,GAAAkkC,oBAAAlkC,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAFtBY;AAEsB,CAEzB;ACjQM,SAAAkrC,aAAAxrC,EAAAA,EAAA;IAAAN,MAAAA,KAAAC,+LAAAA,EAAA,CAAA,GAAsB,EAAA8rC,IAAAA,EAAAA,GAAAzrC;IAAyBM,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAMzChC,KAAA;QAAAorC,eACU;QAAMC,YACT;QAAQzxB,OAAA;IAAA,GAErBxa,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAA,OAAAhB,CAAAA,CAAAA,EAAAA,KAAA+rC,OAAAA,CARH/qC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2LAAA,EACC;QAAA,eAAU,CAAA;QACV,UAAA,CAAA;QACM+qC;QACC,OAAAnrC;QAKF,MAAA;IACL,CAAA,GAAAZ,CAAAA,CAAAA,EAAAA,GAAA+rC,MAAA/rC,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAVFgB;AAUE;ACjBN,MAAMkrC,cAAqD;IACzDC,SAAS;IACTC,SAAS;IACTC,SAAS;IACTC,QAAQ;AACV,GAEMC,gOAAsBvnB,OAAAA,EAAK,SAAA1kB,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,CAAA,GAA6B,EAAAipC,MAAAA,EAAAA,GAAA5oC;IAAkC,IAC1F4oC,OAAMzmC,MAAAA,KAAa,GAAA,OAAA;IAAA7B,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAkpC,SAAAA,CAKlBtoC,KAAAsoC,OAAM1/B,GAAAA,CAAAO,OAoBN,GAAC/J,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,OAAAA,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CArBJI,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,SAAA,EAAA;QAAc,OAAA;QACZJ,UAqBH;IAAA,CAAA,GAASZ,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAtBTgB;AAsBS,CAEZ,GAEKwrC,mOAAyBxnB,OAAAA,EAAK,SAAAjlB,KAAAA,EAAA;IAAA,MAAAC,IAAAC,gMAAAA,EAAA,CAAA,GAOlCipC,mNAAe0C,mBAAAA,EAAiB7rC,MAAKmpC,MAAO;IAAC5oC,IAAAA;IAAAN,OAAAA,CAAAA,CAAAA,EAAAA,KAAAkpC,SAAAA,CACtC5oC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,qBAAA;QAA4B4oC;IAAAA,CAAU,GAAAlpC,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAvCM;AAAuC,CAC/C;AAEM,SAAAmsC,iBAAA;IAAAzsC,MAAAA,oMAAAC,EAAA,CAAA,GACL,EAAAynB,MAAAA,EAAAmF,SAAAA,EAAAA,GAA4BvD,gBAAgB,GAE5CojB,uBAAAh+B;IAII,IAAA,CAACme,aAAS,CAAKnF,QAAM,OAAA;IAAApnB,IAAAA;IAAA,OAAAN,CAAAA,CAAA0nB,CAAAA,CAAAA,KAAAA,UAAA1nB,CAAAA,CAAAA,EAAAA,KAAA6sB,YAAAA,CAGvBvsB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,4BAAmConB;QAAAA;QAAoBmF,YAAAA;QAAAA,UAAAA;IAExD,CAAA,GAA6B7sB,CAAAA,CAAAA,EAAAA,GAAA0nB,QAAA1nB,CAAAA,CAAAA,EAAAA,GAAA6sB,WAAA7sB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAF7BM;AAE6B;AAZ1B,SAAAoO,SAAApO,EAAAA,EAAA;IAKF,MAAA,EAAA4oC,MAAAA,EAAAA,GAAA5oC;IAAa,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,wBAAA;QAA+B4oC;IAAAA,CAAU;AAAA;AA/C3B,SAAAn/B,QAAA4iC,KAAAA,EAAA1iC,KAAAA,EAAA;IAAA,OAOxB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mLAAA,WAAA,EAAA;QACU,SAAA0iC,MAAKvrC,KAAAA;QACJ,UAACurC,CAAAA,MAAKvrC,KAAAA;QAEN,WAAA;QACV,QAAA,CAAA;QAEA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,yJAAA,EACW;YAAA,UAAC;YACN,MAAA;YACK,UAAC;YACD,UAAA;YACF,QAAC;YACH,MAAAurC,MAAKtrC,KAAAA,GAAA6qC,WAAAA,CAAqBS,MAAKtrC,KAAA,CAAA,GAAAsI,KAAAA;YAC9B,OAAA;gBAAAijC,YAAa;YAAQ;YAE3BD,UAAAA,MAAKrI,KAAAA;QACR,CAAA;IAAA,GAdQqI,GAAAA,MAAKrI,KAAA,CAAA,CAAA,EAAUr6B,KAAK,EAe9B;AAAU;ACxClB,MAAM4iC,mMAAmBtrC,SAAAA,uMAAOurC,SAAAA,CAAO/vB,IAAI,CAAA,CAAA;;AAAA,CAAA,EAOrCgwB,SAAUhtC,CACd,QAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,uMAAC,SAAA,CAAO,MAAA,EAAP;QAAc,MAAK;QAAO,GAAE;QAAI,IAAG;QAAO,IAAG;QAAO,aAAY;QAAUA,GAAAA,KAAAA;IAAAA,CAC5E,GACKitC,SAAUjtC,CACd,QAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,kBAAA;QACC,MAAK;QACL,GAAE;QACEA,GAAAA,KAAAA;IAAAA,CAEP,GACKktC,YAAaltC,CAAAA,QAChB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8MAAA,CAAO,IAAA,EAAP;QAAY,GAAE;QAAsCA,GAAAA,KAAAA;IAAAA,CACtD,GAEKmtC,8LAAkBC,YAAAA,CAAAA;;;;;;;AAAAA,CAAAA,EAQlBC,0LAAc7rC,SAAAA,CAAOigB,CAAAA,CAAAA;;;;eAAAA,EAIV0rB,eAAe,CAAA;;AAAA,CAAA,EAI1BG,OAAO;IACXC,SAAS;QACPC,OAAO;QACPC,YAAY;YACV3f,UAAU;QAAA;IAEd;IACA4f,OAAO;QACLF,OAAO;YAAC;YAAG;YAAK;YAAK;YAAK;YAAK;YAAM;YAAM;YAAM,CAAC;SAAA;QAClDC,YAAY;YACV3f,UAAU;YACVvF,OAAO;QAAA;IAEX;IACAolB,SAAS;QAACF,YAAY;YAAC3f,UAAU;QAAA;IAAC;AACpC,GAEM8f,SAAS;IACbL,SAAS;QACPM,iBAAiB;QACjBC,kBAAkB;QAClB3mB,SAAS;QACTsmB,YAAY;YACV3f,UAAU;QAAA;IAEd;IACA4f,OAAO;QACLG,iBAAiB;QACjBC,kBAAkB;QAClB3mB,SAAS;QACTsmB,YAAY;YACV3f,UAAU;QAAA;IAEd;IACA6f,SAAS;QACPE,iBAAiB;QACjBC,kBAAkB;QAClB3mB,SAAS;QACTsmB,YAAY;YACV3f,UAAU;QAAA;IACZ;AAEJ,GAEMigB,SAAS;IACbR,SAAS;QACPpmB,SAAS;QACTsmB,YAAY;YACV3f,UAAU;QAAA;IAEd;IACA4f,OAAO;QACLvmB,SAAS;QACTsmB,YAAY;YACV3f,UAAU;QAAA;IAEd;IACA6f,SAAS;QACPxmB,SAAS;IAAA;AAEb,GAEM6mB,YAAY;IAChBT,SAAS;QACPU,YAAY;QACZR,YAAY;YAAC3f,UAAU;QAAA;IACzB;IACA4f,OAAO;QACLO,YAAY;QACZR,YAAY;YACVllB,OAAO;YACPuF,UAAU;QAAA;IAEd;IACA6f,SAAS;QACPM,YAAY;QACZR,YAAY;YACV3f,UAAU;QAAA;IACZ;AAEJ;AAMO,SAAAogB,mBAAAluC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAA8D,MAAAA,EAAAA,GAAiBhE;IAAK,IAAA,CAEjBgE,QAAM,OAAA;IAeqBzD,MAAAA,KAAAyD,WAAW,YAAS4F,KAAAA,IAAe;IAAE,IAAA/I,IAAAI;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA+D,SAAAA,CAC7DnD,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,QAAA;QAAiBktC,UAAAA;QAAiB/pC,SAAAA;QAAiBA,SAAAA;IAAU,CAAA,GAC9D/C,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,QAAiB2sC;QAAAA,UAAAA;QAAiB5pC,SAAAA;QAAiBA,SAAAA;IAAAA,CAAU,GAAA/D,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,CAAAJ,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAM,CAAAA,CAAAA,KAAAA,MAAAN,CAAAA,CAAAA,EAAAA,KAAAY,MAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAgB,KAAAA,CAFhEC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,aAAA;QAAyB,eAAAX;QACxBM,UAAAA;YAAAA;YACAI;SAAAA;IAAAA,CACF,GAAchB,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAA+D,SAAAA,CACdlB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,WAAoBkrC;QAAAA,UAAAA;QAAoBhqC,SAAAA;QAAiBA,SAAAA;IAAAA,CAAU,GAAA/D,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAA+D,CAAAA,CAAAA,KAAAA,UAAA/D,CAAAA,CAAAA,GAAAA,KAAAiB,MAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAA6C,KAAAA,CAdxEC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAA,OACQ;QAAA,OAAA;QACC,QAAA;QACC,SAAA;QACH,MAAA;QACE,QAAA;QACK,aAAA;QACK,oBAAA;QAEjB,UAAoBuqC,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,uMAAAA,SAAAA,CAAAA,CAAAA,EAAAA;YAAAA,UAAAA;YAAetpC,SAAAA;YAAiBA,SAAAA;YAClD9C,UAAAA;gBAAAA;gBAIA4B;aAAAA;QAAAA,CACF;IAAA,CACF,GAAM7C,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAhBN8C;AAgBM;AC5IV,MAAMorC,oBAA6E;IACjFT,OAAO;QACLU,SAAS;QACTh+B,MAAM;IACR;IACAm9B,SAAS;QACPa,SAAS;QACTh+B,MAAM;IAAA;AAEV,GAEai+B,sBAAsBruC,CAAA,UAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACjC,EAAA8D,MAAAA,EAAAA,GAAiBhE,OACjB,EAAAW,CAAAA,EAAAA,GAAYC,6KAAAA,EAAAnB,wBAAuC;IAE/CuE,IAAAA,WAAW,WAAWA,WAAW,WAAS,OAAA;IAI9CsqC,MAAAA,gBAAAH,iBAAAA,CAAwCnqC,MAAM,CAAA;IAACzD,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA+D,SAAAA,CAKzCzD,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,oBAAA;QAA2ByD;IAAAA,CAAU,GAAA/D,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAquC,cAAAl+B,IAAAA,IAAAnQ,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CADxCM,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA;QAAmB,MAAC;QAAQ,MAAAytC,cAAal+B,IAAAA;QACxC7P,UACF;IAAA,CAAA,GAAeN,CAAAA,CAAA,CAAA,CAAA,GAAAquC,cAAAl+B,IAAAA,EAAAnQ,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAquC,cAAAF,OAAAA,IAAAnuC,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAGZM,KAAAN,EAAE2tC,cAAaF,OAAQ,GAACnuC,CAAAA,CAAA,CAAA,CAAA,GAAAquC,cAAAF,OAAAA,EAAAnuC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CAD3BC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAK,OAAA,CAAA;QAAY,MAAA;QACfD,UAAAA;IAAAA,CACH,GAAOhB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA,OAAA7C,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CAPT4B,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;QAAW,OAAA;QAAc,KAAC;QAAc,eAAA;QACvCjC,UAAAA;YAAAA;YAIAK;SAAAA;IAGF,CAAA,GAAOjB,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EARP6C;AAQO,GCjCLyrC,kBAAkB,KAClBC,gBAAgB;AAMf,SAAAC,mBAAAluC,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAA4B,EAAAwuC,UAAAA,EAAAA,GAAAnuC,IACjC,EAAAsG,UAAAA,EAAAC,YAAAA,EAAAgmB,SAAAA,EAAAhsB,KAAAA,EAAAA,GAAqDyoB,gBAAgB,GAErE,CAAAvlB,QAAA2qC,SAAA,CAAA,6MAA4Bz+B,WAAAA,EAAAA,IAAyC,GAErE03B,wKAAkBC,eAAAA,EAAahhC,YAAYC,YAAY,GAEvD8nC,cAAoB9tC,OAAKwnC;IAAYznC,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAA+D,UAAA/D,CAAAA,CAAA2nC,CAAAA,CAAAA,KAAAA,UAAAQ,SAAAA,GAAAA,CAG3BvnC,KAAAA,MAAA;QAAA,IAGJmD,WAAW,aAAc4jC,CAAAA,UAASQ,SAAAA,EAAU;YAC9C,MAAAyG,UAAgBn+B,WAAiBi+B,IAAAA,UAAU,OAAO,GAACJ,eAAiB;YACvD59B,OAAAA,IAAAA,aAAak+B,OAAO;QAAA;QAAC,IAGhC7qC,WAAW,SAAO;YACpB,MAAA8qC,YAAgBp+B,WAAA,IAAiBi+B,UAAc,IAAA,GAACH,aAAe;YAClD79B,OAAAA,IAAAA,aAAak+B,SAAO;QAAA;IAAC,GAErC5uC,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAA,CAAA,CAAA,GAAA2nC,UAAAQ,SAAAA,EAAAnoC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2uC,eAAA3uC,CAAAA,CAAA,CAAA,CAAA,KAAA+D,UAAA/D,CAAAA,CAAA,CAAA,CAAA,KAAA2nC,UAAAQ,SAAAA,GAAAA,CAAEnnC,KAAAA;QAAC+C;QAAQ4qC;QAAahH,UAASQ,SAAA;KAAA,EAAWnoC,CAAAA,CAAAA,EAAAA,GAAA2uC,aAAA3uC,CAAAA,CAAAA,EAAAA,GAAA+D,QAAA/D,CAAAA,CAAA,CAAA,CAAA,GAAA2nC,UAAAQ,SAAAA,EAAAnoC,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,4MAZ7C2Q,YAAAA,EAAU/P,IAYPI,EAA0C;IAACC,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAG9B3B,KAAAA,MAAA;QACdytC,UAAAA,IAAc;IAAA,GACf1uC,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAA4G,aAAAA,CAAE/D,KAAAA;QAAC+D,UAAU;KAAA,EAAC5G,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,4MAFfqqB,kBAAAA,EAAgBppB,IAEb4B,EAAY;IAACC,IAAAA;IAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAA2nC,UAAAQ,SAAAA,GAAAA,CAGArlC,KAAAA,MAAA;QACV6kC,UAASQ,SAAAA,IACXuG,UAAU,SAAS;IAEtB1uC,GAAAA,CAAAA,CAAA,EAAA,CAAA,GAAA2nC,UAAAQ,SAAAA,EAAAnoC,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAqC,IAArClE,CAAAA,CAAAA,GAAAA,KAAA2uC,eAAA3uC,CAAAA,CAAA2nC,EAAAA,CAAAA,KAAAA,UAAAQ,SAAAA,GAAAA,CAAEjkC,KAACyjC;QAAAA,UAASQ,SAAAA;QAAYwG,WAAW;KAAA,EAAC3uC,CAAAA,CAAAA,GAAAA,GAAA2uC,aAAA3uC,CAAAA,CAAA,EAAA,CAAA,GAAA2nC,UAAAQ,SAAAA,EAAAnoC,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,4MAJrCqqB,kBAAAA,EAAgBvnB,IAIboB,EAAkC,GAEjCH,QAAM;QAC4B,MAAAoC,MAAApC,UAAM4F,KAAAA;QAAavD,IAAAA;QAAApG,OAAAA,CAAAA,CAAAA,GAAAA,KAAAmG,MAAAA,CAAhDC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,qBAAA;YAA4B,QAAAD;QAAAA,CAAuB,GAAAnG,CAAAA,CAAAA,GAAAA,GAAAmG,KAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA,EAApDoG;IAAAA;IAMiC,MAAAD,KAAA0mB,WAASlpB,OAAoByC,KAAAymB,WAAShpB;IAAWwC,IAAAA;IAAArG,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAArFC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,iBAAA,EAAA;QAAe,cAAA,CAAA;QAAoB,OAAAF;QAA6B,WAAAC;IAAwB,CAAA,GAAApG,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAKzD,MAAAuG,MAAAsmB,WAASlpB,OAAoB8C,MAAAomB,WAAShpB;IAAWgF,IAAAA;IAAA7I,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAyG,MAAAA,CAAjFoC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,0BAAA,EAA+B;QAAA,OAAAtC;QAA6B,WAAAE;IAAAA,CAAwB,GAAAzG,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAE5E,MAAAmJ,MAAA0jB,WAASlpB,OACLyF,MAAAyjB,WAAShpB;IAAWwF,IAAAA;IAAArJ,CAAAA,CAAAyuC,EAAAA,CAAAA,KAAAA,cAAAzuC,CAAAA,CAAAA,GAAAA,KAAAmJ,OAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAAoJ,MAAAA,CAFjCC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,iBAAA,EACQ;QAAA,OAAAF;QACI,WAAAC;QACCqlC;IACZ,CAAA,GAAAzuC,CAAAA,CAAAA,GAAAA,GAAAyuC,YAAAzuC,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAAAsJ,IAAAA;IAAAtJ,CAAAA,CAAA6I,EAAAA,CAAAA,KAAAA,OAAA7I,CAAAA,CAAAA,GAAAA,KAAAqJ,MAAAA,CANJC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;QAAW,OAAA;QAAc,KAAA;QACxBT,UAAAA;YAAAA;YACAQ;SAAAA;IAKF,CAAA,GAAOrJ,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAAAgK,IAAAA;IAAA,OAAAhK,CAAAA,CAAAsJ,EAAAA,CAAAA,KAAAA,OAAAtJ,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAbT2D,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,UAAA,EAAA;QAEG,SAAA3D;QAEQ,WAAA;QAEViD,UAAAA;IAAAA,CAQF,GAAUtJ,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA,EAdVgK;AAcU;AC7DD8kC,MAAAA,6LAAavtC,SAAAA,mJAAO+X,OAAI,CAAA,CAAA;;;;;;;;AAAA,CAAA;AAU9B,SAAAy1B,qBAAA;IAAA/uC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAo7B,SAAAA,EAAA,GAAoB/R,mBACpB,EAAA5oB,CAAAA,EAAAA,+JAAYC,iBAAAA,CAAe,IAC3BquC,OAAa3T,WAASgN,cAAgBhN,WAASqF;IAAYpgC,IAAAA;IAAAN,CAAAA,CAAAgvC,CAAAA,CAAAA,KAAAA,QAAAhvC,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAKnDJ,KAAA0uC,OACH,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,YAAA,EAAA;QACItuC;QACK,SAAA;QACA,QAAA;YAAAsuC,qMACAC,SAAAA,EAAA,IAAA7W,KAAgB4W,IAAI,GAAG,oBAAoB;QAAA;IAAA,KAG/C,MAAAhvC,CAAAA,CAAAA,EAAAA,GAAAgvC,MAAAhvC,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAA0I,IAAAA,IAAAC,IAAAC,IAAA1H,SAAAN,IAAAI,IAAAC,IAAA4B,IAAAC,IAAAoB;IAAAlE,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAXVY,UAAA;QAAAwG,MACQ;QAAU1E,yJAAAksC,cAAAA;QAAAt/B,MAEVtP;QAQE6P,MACF;IAAS,GAKZvH,sJAAAxG,OAAAA,EAAWS,KAAA,GAAQC,KAAA,GAAYoB,KAAA,GAC7ByE,sJAAAnH,MAAAA,EAASP,KAAM,QACbyH,KAAA4Q,wJAAAA,EAAW1Y,KAAA,GAAII,+MAAA4uB,gBAAAA,EAAc1uB,QAAO8B,IAAK,GAAChD,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAA0I,IAAA1I,CAAAA,CAAAA,EAAAA,GAAA2I,IAAA3I,CAAAA,CAAAA,EAAAA,GAAA4I,IAAA5I,CAAAA,CAAAA,EAAAA,GAAAkB,SAAAlB,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,CAAAwE,KAAA1I,CAAAA,CAAA,CAAA,CAAA,EAAA2I,KAAA3I,CAAAA,CAAA,CAAA,CAAA,EAAA4I,KAAA5I,CAAAA,CAAA,CAAA,CAAA,EAAAkB,UAAAlB,CAAAA,CAAA,CAAA,CAAA,EAAAY,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAAA6C,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAAA8C,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAAAkE,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAA0I,EAAAA,CAAAA,KAAAA,MAAA1I,CAAAA,CAAAA,GAAAA,KAAAY,MAAAZ,CAAAA,CAAA,EAAA,CAAA,KAAAgB,KAAAA,CAA3CmF,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,IAAA;QAAW,MAAAvF;QAAII,UAAAA;IAA4B,CAAA,GAAOhB,CAAAA,CAAAA,GAAAA,GAAA0I,IAAA1I,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAA2I,EAAAA,CAAAA,KAAAA,MAAA3I,CAAAA,CAAAA,GAAAA,KAAAiB,MAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAAmG,KAAAA,CADrDC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,IAAA;QAAS,MAAAnF;QACRkF,UAAAA;IACF,CAAA,GAAMnG,CAAAA,CAAAA,GAAAA,GAAA2I,IAAA3I,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAA,EAAA,CAAA,KAAAkB,QAAA0O,IAAAA,GAAAA,CACNvJ,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAU,MAAA;QACT,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,YAAA;YAAiB,MAAC;YAAe,cAAA;YAC/BnF,UAAAA,QAAO0O,IAAAA;QACV,CAAA;IAAA,CACF,GAAM5P,CAAAA,CAAA,EAAA,CAAA,GAAAkB,QAAA0O,IAAAA,EAAA5P,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAA4I,MAAA5I,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,MAAA7C,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAAkE,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAoG,MAAApG,CAAAA,CAAA,EAAA,CAAA,KAAAqG,KAAAA,CATVE,MACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0NAAA,WAAA,EAAA;QAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,IAAA;YAAW,MAAA1D;YAAQ,KAAAC;YAAY,SAAAoB;YAC9BkC,UAAAA;gBAAAA;gBAGAC;aAAAA;QAKF,CAAA;IAAO,CAAA,GACNrG,CAAAA,CAAAA,GAAAA,GAAA4I,IAAA5I,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAXHuG;AAWG;AChDA,SAAA4oC,kBAAA7uC,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,CAAA,GAA2B,EAAAkR,OAAAA,EAAAyd,QAAAA,EAAAA,GAAAtuB;IAMjC,IAAAM,IAAAI;IAAAhB,CAAAA,CAAAmR,CAAAA,CAAAA,KAAAA,WAAAnR,CAAAA,CAAAA,EAAAA,KAAA4uB,WAAAA,CACiBhuB,KAAAA,IAAAA,CACVuQ,WACFi+B,yKAAAA,CAAAC,OAAAA,CAAuBl+B,SAASyd,QAAQ,GAAC,MAAA;YAIrCzd,mKACFi+B,iBAAAA,CAAAE,SAAAA,CAAyBn+B,OAAO;QAGnCnQ,CAAAA,GAAAA,KAAA;QAACmQ;QAASyd,QAAQ;KAAA,EAAC5uB,CAAAA,CAAAA,EAAAA,GAAAmR,SAAAnR,CAAAA,CAAAA,EAAAA,GAAA4uB,UAAA5uB,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,CAAAJ,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KAAAhB,CAAAA,CAAA,CAAA,CAAA,6MAVtBqqB,kBAAAA,EAAgBzpB,IAUbI,EAAmB;AAAC;ACIzB,MAAMuuC,uBAAuB;AAEtB,SAAAC,kBAAAzvC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAwvC,aAAAA,EAAAC,kBAAAA,EAAAA,GAA4C3vC,OAC5C,EAAA8sB,SAAAA,EAAAsT,aAAAA,EAAAtN,UAAA8c,gBAAAA,EAAA,GAA+DrmB,mBAC/D,EAAAloB,KAAAA,EAAAA,GAAgBwrB,iBAAiB,GAEjCgjB,0BAA4BC,gLAAAA,IAAuBC,UAAAA,EAAAC,uBAGnDC,8KAAwB7O,sBAAAA,EAAoBhB,eAAap2B,OAAkC,GAE3F,CAAAoJ,WAAA88B,YAAA,CAAA,6MAAkChgC,WAAAA,EAAAA,IAA6B,GAC/D,CAAA+C,aAAAC,cAAA,CAAA,6MAAsChD,WAAAA,EAAAA,IAAoC;IAAC3P,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAE1CtC,KAAAiR,CAAA,UAAA;QAClBA,aAAAA,MAAK2+B,WAAAA,CAAA11B,KAAAA,GAAA+0B,oBAAyC;IAAA,GAC5DvvC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAsvB,eAAqBhvB;IAEfM,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAgT,cAAAA,CAEYpS,KAAA;QAAAuQ,SAAU6B;QAAW4b,UAAYU;IAAatvB,GAAAA,CAAAA,CAAAA,EAAAA,GAAAgT,aAAAhT,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAhEmvC,kBAAkBvuC,EAA8C;IAEhE,MAAAuvC,eAAqBtjB,WAASvc,SAAW,OAAO6C,aAAc;IAE9DwG,IAAAA;IAAsC,IAClC+1B,kLAAsBU,uBAAAA,EAAqBV,kBAAkB,KAAKE,qBAAmB;QAAA5uC,IAAAA;QAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA4vC,uBAAA5vC,CAAAA,CAAA0vC,CAAAA,CAAAA,KAAAA,sBAAA1vC,CAAAA,CAAA2vC,CAAAA,CAAAA,KAAAA,oBAAA3vC,CAAAA,CAAAA,EAAAA,KAAAoB,QAAAA,CAErFJ,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,qBAAA;YACW0uC,UAAiB;YACLzkB,sBAAAA;YACJ0kB;YACHvuC,eAAI;QACnB,CAAA,GAAApB,CAAAA,CAAAA,EAAAA,GAAA4vC,qBAAA5vC,CAAAA,CAAAA,EAAAA,GAAA0vC,oBAAA1vC,CAAAA,CAAAA,EAAAA,GAAA2vC,kBAAA3vC,CAAAA,CAAAA,EAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EANJ2Z,UACEA;IAAAA,OAAAA,IAOOq2B,iBAAe;QAAAhvC,IAAAA;QAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACd5B,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,yBAAA,CAA0B,CAAA,GAAAhB,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAArC2Z,UAAUA;IAAAA,OAAH;QAAA3Y,IAAAA;QAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEG5B,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,0BAAA,CAA2B,CAAA,GAAAhB,CAAAA,CAAAA,EAAAA,GAAAgB,GAAAA,IAAAA,MAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAtC2Z,UAAUA;IAAAA;IAIE3Y,MAAAA,KAAAgvC,kBAAkB,YAASrmC,KAAAA;IAAY1I,IAAAA;IAAAjB,CAAAA,CAAA2Z,EAAAA,CAAAA,KAAAA,WAAA3Z,CAAAA,CAAA,EAAA,CAAA,KAAAyvC,iBAAAzvC,CAAAA,CAAAmT,EAAAA,CAAAA,KAAAA,aAAAnT,CAAAA,CAAA,EAAA,CAAA,KAAAmwC,gBAAAnwC,CAAAA,CAAAA,GAAAA,KAAAgwC,kBAAAA,CAE9C/uC,KAAAkvC,gBACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,wJAAA,EAAA;QACO,OAAA;QACD,KAAA;QACG,SAAA;QACE,UAAC;QACE,aAAAH,kBAAsB,IAAA;QACrB,cAAAA,kBAAsB,IAAA;QAEpC,UAAA;YAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAW;gBAAA,OAAA;gBAAe,MAAC;gBAAO,KAAA78B,YAAgB,IAAA;gBAAQ,MAAA;gBAAqB,cAAC;gBAC/E,UAAA;oBAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;wBAAW,OAAA;wBACT68B,UAAAA;4BAAAA,kBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACE,oBAAqB,CAAA,CAAA,IAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAErB,oBAA+B;gCAAA,YAAA,CAAC78B;4BAAAA,CACnC;4BACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,cAAkB;gCAAA,MAAA;4BAAO,CAAA;yBAAA;oBAAA,CAC5B;oBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACC,gBAAc,CAAA,CAAA;iBAAA;YAAA,CACjB;YAEA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;gBACO,OAAA;gBACE,SAAA;gBACHs8B,KAAY;gBACV,OAAA;oBAAAY,YAAA;oBAAAC,YAA4B;gBAEnC;gBAAA,UAAA;oBAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,cAAA;wBAAkB,MAAA;oBAClB32B,CAAAA;oBAAAA;iBAAAA;YACH,CAAA;SACF;IAAA,CAAA,GACD3Z,CAAAA,CAAAA,GAAAA,GAAA2Z,SAAA3Z,CAAAA,CAAAA,GAAAA,GAAAyvC,eAAAzvC,CAAAA,CAAAA,GAAAA,GAAAmT,WAAAnT,CAAAA,CAAAA,GAAAA,GAAAmwC,cAAAnwC,CAAAA,CAAAA,GAAAA,GAAAgwC,iBAAAhwC,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CAhCH4B,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,wJAAA,EAAe;QAAA,WAAA;QAAcoQ,KAAAA;QAAuB,QAAA;QAClDhS,UAgCH;IAAA,CAAA,GAAOjB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAlCTC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAW;QAAA,MAAA9B;QACV6B,UAkCF;IAAA,CAAA,GAAO7C,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAnCP8C;AAmCO;AAzEJ,SAAAiH,QAAAnF,MAAAA,EAAA;IAAA,OAQiEA,OAAK2rC,eAAAA;AAAA;ACJ7E,MAAMC,sOAA4BxrB,OAAAA,EAAK,SAAAjlB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA;IAAAwwC,IAAAA,mBAAAC,aAAA/pC,UAAArB,IAAAqrC,eAAAC,WAAAvrC,MAAAwrC,SAAA3H,QAAA5oC;IAAAN,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAGrC,EAAA0wC,iBAAAA,EAAAC,WAAAA,EAAA76B,IAAAvV,EAAAA,EAAAqG,QAAAA,EAAArB,EAAAA,EAAAqrC,aAAAA,EAAAC,SAAAA,EAAAC,OAAAA,EAAA3H,MAAAA,EAAA,GAAA7jC,MAAAA,GAWItF,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAywC,mBAAAzwC,CAAAA,CAAAA,EAAAA,GAAA0wC,aAAA1wC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,EAAAA,GAAA2wC,eAAA3wC,CAAAA,CAAAA,EAAAA,GAAA4wC,WAAA5wC,CAAAA,CAAAA,EAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,EAAAA,GAAA6wC,SAAA7wC,CAAAA,CAAAA,EAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,GAAAA,GAAAM,EAAAA,IAAAA,CAAAmwC,oBAAAzwC,CAAAA,CAAA,CAAA,CAAA,EAAA0wC,cAAA1wC,CAAAA,CAAA,CAAA,CAAA,EAAA2G,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAAsF,KAAAtF,CAAAA,CAAA,CAAA,CAAA,EAAA2wC,gBAAA3wC,CAAAA,CAAA,CAAA,CAAA,EAAA4wC,YAAA5wC,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA,EAAA6wC,UAAA7wC,CAAAA,CAAA,CAAA,CAAA,EAAAkpC,SAAAlpC,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAAN,CAAAA,CAAA,EAAA,CAAA;IARP,MAAA6V,KAAAvV,OAAUqJ,KAAAA,IAAL,QAALrJ,IAUFwwC,eAAqB5H,MAAAA,CAAOwH,WAAW,CAAA;IAAC9vC,IAAAA;IAAAZ,CAAAA,CAAA2wC,EAAAA,CAAAA,KAAAA,iBAAA3wC,CAAAA,CAAAA,GAAAA,KAAA4wC,aAAA5wC,CAAAA,CAAA,EAAA,CAAA,KAAAkpC,SAAAA,CAGtCtoC,KAAA2Q,CAAA,UAAA;QACE,MAAAw/B,iBAAuB7H,OAAMp/B,MAAAA,CAAAlF,CAAAA,SAChBA,OAAKgd,QAAAA,6JAAaovB,WAAAA,EAASpsC,OAAKgd,QAAAA,EAAWrQ,KAAK,CAC7D,GAEA0/B,gBAAsBF,cAAAA,CAAc,CAAA,CAAA;QAMjC,IAJCA,eAActuC,MAAAA,GAAW,KAE3B8iB,QAAArK,IAAAA,CACE,CAAA,gFAAA,EAAmF+1B,cAAarvB,QAAA,CAAA,CAAA,CAClG,GAGEqvB,iBAAAA,CAAkBA,cAAa//B,QAAAA,IAAa+/B,cAAa7M,QAAAA,EAAS;YAC/D5yB,MAAAA,cAAAA,IACLy/B,cAAa7M,QAAAA,CAAAA,GACbuM,cAAczH,OAAMx1B,OAAAA,CAASu9B,aAAa,CAAC;YAAC;QAAA;QAI1CL,aACFA,UAAUr/B,KAAK;IAAA,GAElBvR,CAAAA,CAAAA,GAAAA,GAAA2wC,eAAA3wC,CAAAA,CAAAA,GAAAA,GAAA4wC,WAAA5wC,CAAAA,CAAAA,GAAAA,GAAAkpC,QAAAlpC,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAzBH,MAAAkxC,gBAAsBtwC;IA2BrBI,IAAAA;IAAA,IAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAAywC,qBAAAzwC,CAAAA,CAAA,EAAA,CAAA,KAAA8wC,gBAAA9wC,CAAAA,CAAA,EAAA,CAAA,KAAA6V,MAAA7V,CAAAA,CAAA2G,EAAAA,CAAAA,KAAAA,YAAA3G,CAAAA,CAAAkxC,EAAAA,CAAAA,KAAAA,iBAAAlxC,CAAAA,CAAAsF,EAAAA,CAAAA,KAAAA,MAAAtF,CAAAA,CAAAqF,EAAAA,CAAAA,KAAAA,QAAArF,CAAAA,CAAAA,GAAAA,KAAA6wC,SAAA;QAAA5vC,IAAAA;QAAAjB,CAAAA,CAAAywC,EAAAA,CAAAA,KAAAA,qBAAAzwC,CAAAA,CAAAA,GAAAA,KAAA8wC,eAAAA,CAaG7vC,KAAA6vC,gBAAgBA,aAAY/O,MAAAA,IAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACzB,8KAAA,EAA4B;YAAA,SAAA;YAC3B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;gBAA0B,QAAA+O,aAAY/O,MAAAA;gBAA2B0O,kBAAgB;YAAA,CACpF;QAAA,CAAA,GACDzwC,CAAAA,CAAAA,GAAAA,GAAAywC,mBAAAzwC,CAAAA,CAAAA,GAAAA,GAAA8wC,cAAA9wC,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAfEgB,+MAAA4uB,gBAAAA,EACL/Z,IAAE;YAAAvQ;YAAAsrC,WAGWM;YAAah3B,UAAA,CAAA;YAAA,GAErB7U,IAAAA;YAAIhB,KACFwsC;QAAAA,GAAO;YAGZlqC;YACA1F,EAIC;SAEL,GAACjB,CAAAA,CAAAA,GAAAA,GAAAywC,mBAAAzwC,CAAAA,CAAAA,GAAAA,GAAA8wC,cAAA9wC,CAAAA,CAAAA,GAAAA,GAAA6V,IAAA7V,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAAkxC,eAAAlxC,CAAAA,CAAAA,GAAAA,GAAAsF,IAAAtF,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAA6wC,SAAA7wC,CAAAA,CAAAA,GAAAA,GAAAgB;IAAA,OAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAjBMgB,OAAAA;AAiBN,CACF,GAaYmwC,0BAA0BnsB,iNAAAA,EACrCjlB,CAAA,UAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA;IAAAwwC,IAAAA,mBAAA9pC,UAAAtB,MAAA/E;IAAAN,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CACE,EAAA0wC,iBAAAA,EAAA56B,IAAAvV,EAAAA,EAAAqG,QAAAA,EAAA,GAAAtB,MAAAA,GAA2DtF,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAywC,mBAAAzwC,CAAAA,CAAAA,EAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,EAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,CAAAmwC,oBAAAzwC,CAAAA,CAAA,CAAA,CAAA,EAAA2G,WAAA3G,CAAAA,CAAA,CAAA,CAAA,EAAAqF,OAAArF,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAtC,MAAA6V,KAAAvV,OAAUqJ,KAAAA,IAAL,QAALrJ,IAC1B,EAAAqZ,OAAAA,EAAAkT,SAAAA,EAAAA,GAA6BvD,gBAC7B,GAAA,CAAAonB,aAAAU,cAAA,CAAA,IAAsCnhC,oNAAAA,EAAAA,CAAAA,CAAW;IAACrP,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEhBhC,KAAA2a,CAAA,QAAA;QAChC61B,eAAe71B,GAAG;IAAA,GACnBvb,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAA2wC,gBAAsB/vC;IAEhB,IAAAI,IAAAC;IAAAjB,CAAAA,CAAAA,EAAAA,KAAA6sB,YAAAA,CAIF5rB,KAAA4rB,aAAS;QAAA,GACJA,SAAAA;QAASkY,YAAAh7B;QAAA28B,UAAA/8B,KAAAA;IAOb3J,GAAAA,CAAAA,CAAAA,EAAAA,GAAA6sB,WAAA7sB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAAAgB,KARDC;IAFJ,MAAAsmB,cAAgDvmB;IAY/C6B,IAAAA;IAAA7C,CAAAA,CAAAywC,CAAAA,CAAAA,KAAAA,qBAAAzwC,CAAAA,CAAA,CAAA,CAAA,KAAA0wC,eAAA1wC,CAAAA,CAAA6V,EAAAA,CAAAA,KAAAA,MAAA7V,CAAAA,CAAA,EAAA,CAAA,KAAA2G,YAAA3G,CAAAA,CAAAA,GAAAA,KAAAqF,OAAAA,CAKCxC,KAAAC,CAAAA,QAAA;QAAC,MAAA,EAAAomC,MAAAA,EAAAA,GAAApmC;QACC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2BAAA;YACKuC,GAAAA,IAAAA;YACSqrC;YACMD;YACf56B;YACW86B;YACPzH;YAEPviC;QACH,CAAA;IAA4B,GAC7B3G,CAAAA,CAAAA,EAAAA,GAAAywC,mBAAAzwC,CAAAA,CAAAA,EAAAA,GAAA0wC,aAAA1wC,CAAAA,CAAAA,GAAAA,GAAA6V,IAAA7V,CAAAA,CAAAA,GAAAA,GAAA2G,UAAA3G,CAAAA,CAAAA,GAAAA,GAAAqF,MAAArF,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAdH,MAAAqxC,gCAAsCxuC;IAkBlC,IAAA,CAAC0kB,eAAW,CAAK5N,SAAO,OAAA;IAAA7W,IAAAA;IAAA,OAAA9C,CAAAA,CAAAunB,EAAAA,CAAAA,KAAAA,eAAAvnB,CAAAA,CAAAA,GAAAA,KAAA2Z,WAAA3Z,CAAAA,CAAA,EAAA,CAAA,KAAAqxC,gCAAAA,CAG1BvuC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,6BAAyCykB;QAAAA;QAAsB5N;QAAAA,UAEhE;IAAA,CAAA,GAA8B3Z,CAAAA,CAAAA,GAAAA,GAAAunB,aAAAvnB,CAAAA,CAAAA,GAAAA,GAAA2Z,SAAA3Z,CAAAA,CAAAA,GAAAA,GAAAqxC,+BAAArxC,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAF9B8C;AAE8B,CAGpC;AAEAquC,wBAAwB17B,WAAAA,GAAc;AAnDpC,SAAA1L,UAAA,CAAA;AC7FF,SAASunC,kBAAkB,EACzBC,gBAAAA,EACAC,QAAAA,EACA1lB,YAAAA,WAAAA,EACA2lB,kBAAAA,EACkB,EAAmB;IACrC,OAAO3lB,YACJtiB,GAAAA,CAAI,CAACsgB,WAAW7f,UAAU;QACnB0iB,MAAAA,WAAW8kB,kBAAAA,CAAmBxnC,KAAK,CAAA;QAEzC,OAAI,CAAC0iB,YAAYA,SAASjY,MAAAA,GAAe,OAElC;YACL1M,QAAQ,GAAGyjB,qBAAqB,GAAG3B,UAAUpiB,IAAI,EAAA;YACjDia,OAAOgL,SAAS7K,YAAAA,GAAenY,KAAAA,IAAY;YAC3C3G,MAAM2pB,SAAS3pB,IAAAA;YACfgY,YAAY,CAACw2B;YACb1+B,UAAUy+B,kBAAkB7pC,SAASoiB,UAAUpiB,IAAAA;YAC/Cka,UAAU+K,SAASvR,OAAAA,EAASnS,KAAK,GAAG;YACpC6Y,cAAc6K,SAAS7K,YAAAA;YACvB1gB,OAAOurB,SAASvrB,KAAAA;YAChB+O,MAAMwc,SAASxc,IAAAA;QACjB;IAAA,CACD,EACArG,MAAAA,CAAOyE,OAAO;AACnB;AAEA,SAASmjC,eAAe,EAACF,QAAAA,EAAU9wC,CAAAA,EAAqB,EAAiB;IAChE,OAAA;QACLsH,QAAQ;QACR2Z,OAAO;QACPvgB,OAAOV,EAAE,oCAAoC;QAC7CsC,yJAAM2uC,WAAAA;QACN32B,YAAY,CAACw2B;QACb5vB,UAAU;IACZ;AACF;AAEO,SAASgwB,yBAAyB,EAACC,UAAAA,EAAYnxC,CAAAA,EAAqB,EAAwB;IACjG,OAAKmxC,aAEE;QACL7pC,QAAQ;QACR2Z,OAAO;QACPvgB,OAAOV,EAAE,oCAAoC;QAC7CsC,MAAM8uC,uKAAAA;QACNlwB,UAAU;IAAA,IAPY;AAS1B;AAEO,SAASmwB,aAAaxsC,MAAAA,EAA4C;IACvE,MAAMysC,iBAAiBV,kBAAkB/rC,MAAM,GACzC0sC,QAAQ;QAAA,8BAAA;QAEZL,yBAAyBrsC,MAAM;KAAA,CAC/BuE,MAAAA,CAAOyE,OAAO;IAET,OAAA;QAAA,qEAAA;QAEL;YACEvG,QAAQ;YACR8Z,cAAc,CAAA;YACd1gB,OAAOmE,OAAO7E,CAAAA,CAAE,gCAAgC;YAChDsC,yJAAMkvC,WAAAA;QACR;WACGF;QAAAA,+CAAAA;QAGHN,eAAensC,MAAM;WAElB0sC;KAAK;AAEZ;ACjFA,MAAMjrB,mBAAoBnmB,CACxBsC,oKAAAA,WAAAA,EAAStC,KAAK,KAAK,OAAOA,MAAM2C,GAAAA,IAAQ,YAAY,OAAO3C,MAAMN,KAAAA,IAAU;AAEtE,SAAA4xC,cAAAtxC,KAAAA,EAAA;IAAAb,MAAAA,oMAAAC,EAAA,CAAA,GACL,EAAAmyC,oBAAAA,EAAAA,+JAA+BC,YAAAA,CAAWnyC,GAAAA,QAAAA;IAAS,IAAAI,IAAAM;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAE3ChC,KAAA,iJAAA0xC,kBAAAA,CAAA3oC,KAAAA,CAAA,GAAmE3J,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAnEM;IADR,MAAA2xC,UAAgBjyC;IAGf,IAAAU,IAAAC;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAa,QAAAA,CAESG,KAAAA,MAAA;QACRuxC,QAAOjmB,IAAAA,CAAMzrB,KAAK;IACjBI,GAAAA,KAAA;QAACsxC;QAAS1xC,KAAK;KAAA,EAACb,CAAAA,CAAAA,EAAAA,GAAAa,OAAAb,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,CAAAD,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAiB,KAAAjB,CAAAA,CAAA,CAAA,CAAA,OAFnB2Q,kNAAAA,EAAU3P,IAEPC,EAAgB;IAAC,IAAA4B,IAAAC;IAAA9C,OAAAA,CAAAA,CAAAA,EAAAA,KAAAoyC,uBAAAA,CAGXtvC,KAAAyvC,QAAOC,YAAAA,GAAe1nC,IAAAA,+JAE3BG,uBAAAA,CAAAA,kKACAuvB,eAAAA,EAAgB,GAAA,iKAChBtvB,YAAAA,EAAAhL,CAAAA,YACE8mB,iBAAiB9mB,SAAQ,qJAAImO,OAAAA,EAAK+jC,qBAAoB;YAAAlyC,UAAAA;QAAW,CAAA,CAAC,qJAAI4M,KAAAA,EAAAnD,KAAAA,CAAY,CACpF,iKACAsB,uBAAAA,CACAkC,kKAAAA,aAAAA,EAAApD,OAIC,CACH,GAAC/J,CAAAA,CAAAA,EAAAA,GAAAoyC,sBAAApyC,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA,EAbD6C,KAAOC,qJAgBFgB,gBAAAA,EAjBuBjB,EAiBY;AAAC;AA5BtC,SAAAkH,QAAA8sB,GAAAA,EAAA;IAqBC31B,MAAAA,qKACEiC,YAAAA,EAAS0zB,GAAG,KAAK,OAAOA,IAAG31B,OAAAA,IAAa,WAAW21B,IAAG31B,OAAAA,GAAW;IAAe,MAAA,IAAA8D,MAClE,CAAA,0DAAA,EAA6D9D,OAAO,EAAE;AAAA;ACpBvF,SAAAuxC,oBAAA1yC,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAA4G,YAAAA,EAAAhG,KAAAA,EAAA6R,eAAAA,EAAAmV,OAAAA,EAAAhe,QAAAA,EAAAA,GAAkE9J,OAClE,EAAAW,CAAAA,EAAAA,+JAAYC,iBAAAA,CAAe;IAACL,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA6G,eAAAA,CAYZvG,KAAA;QAAAuG;IAAA,GAAc7G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAHxBM,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAC,YAAA,EACIF;QAAAA;QACK,SAAA;QACA,QAAAJ;IACR,CAAA,GAAAN,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAA6G,CAAAA,CAAAA,KAAAA,gBAAA7G,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAKDM,KAAA6F,gBACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAQ,IAAA;QACP,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EAAA;YACInG;YACK,SAAA;YACA,QAAA;gBAAAmG;YAAAA;QAAc,CAAA;IAE1B,CAAA,GACD7G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAA6G,CAAAA,CAAAA,KAAAA,gBAAA7G,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAEAO,KAAAA,CAAC4F,gBACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAQ,IAAA;QAAKnG,UAAAA,EAAE,+DAA+D;IAAA,CAAE,GAClFV,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,GAAAA,KAAAa,QAAAA,CAEAgC,6JAAAolB,QAAAA,IAASpnB,SAGN,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0NAAA,WAAA,EAAA;QAAA,UAAA;YAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAA,QAAA,EAAA;gBAAQ,IAAA;gBAAI,UAAgD;YAAA,CAAA;YAE5D,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAc,SAAC;gBAAW,UAAA;gBAAe,QAAA;gBAAW,QAAA;gBAAQ,MAAA;gBAC3D,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;oBAAc,UAAA;oBAAa,MAAA;wBAAA;wBAAA;wBAAA,CAAA;qBAAA;oBACzB+jB,UAAAC,KAAAA,SAAAA,CAAehkB,OAAK,MAAA,CAAS;gBAChC,CAAA;YACF,CAAA;SAAO;IAAA,CAAA,GAGVb,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAAiB,MAAAjB,CAAAA,CAAA,EAAA,CAAA,KAAA6C,KAAAA,CA3BHC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,kJAAA,SAAA,EAAA;QAAa,OAAA;QACX9B,UAAAA;YAAAA;YAUAC;YAIA4B;SAAAA;IAAAA,CAaH,GAAQ7C,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAA,OAAAlE,CAAAA,CAAA0S,EAAAA,CAAAA,KAAAA,mBAAA1S,CAAAA,CAAA,EAAA,CAAA,KAAA6J,YAAA7J,CAAAA,CAAA6nB,EAAAA,CAAAA,KAAAA,WAAA7nB,CAAAA,CAAA,EAAA,CAAA,KAAAY,MAAAZ,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CA1CVoB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,WACkBwO;QAAAA;QACX,MAAA;QACI7I;QACDge;QAEP,OAAAjnB;QAMG,MAAA;QAELkC,UA6BF;IAAA,CAAA,GAAY9C,CAAAA,CAAAA,GAAAA,GAAA0S,iBAAA1S,CAAAA,CAAAA,GAAAA,GAAA6J,UAAA7J,CAAAA,CAAAA,GAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA,EA3CZkE;AA2CY;ACbhB,MAAMiD,cAAkB,CAAE,CAAA,EAEpBurC,2BAA4D;IAAA,8FAAA;IAEhE;IACA;IAAA,+EAAA;IAEA;CAAU,EAGNC,4BAA4BpxC,yLAAAA,0JAAOqxC,sBAAmB,CAAA,CAAA;;;;;;AAAA,CAAA;AAQrD,SAASC,iBAAiB;IACzB,MAAA,EACJhL,WAAAA,EACAjhC,UAAAA,EACAC,YAAAA,EACAoa,YAAAA,EACAqd,SAAAA,EACAwU,WAAAA,EACAhpB,SAAAA,EACAgC,YAAAA,WAAAA,EACAiR,OAAAA,EACAgW,aAAAA,EACArI,YAAAA,EACA7gB,UAAAA,EACAhC,OAAAA,EACApnB,UAAAA,EACAI,KAAAA,EACF,GAAIyoB,mBACE,EAAC/jB,QAAQytC,UAAAA,EAAU,GAAI9rC,iBACvB,EAACuoB,QAAAA,EAAQ,GAAIvE,oBACb,EAACxqB,CAAAA,EAAAA,wKAAKC,iBAAAA,EAAenB,wBAAwB,GAC7C,EAAC2T,WAAWC,eAAAA,EAAAA,GAAmBvO,cAAc,GAE7CouC,uKAAWxd,YAAAA,KACXoc,aAAaM,cAActxC,KAAK,GAEhC6uC,iLAAqBwD,8BAAAA,EAA4BryC,KAAK,GACtDsyC,wLAA4BtD,wBAAAA,CAAsB,GAAEC,UAAAA,EAAYsD,6BAEhE,CAACpgC,aAAaC,cAAc,CAAA,GAAIhD,qNAAAA,EAAgC,IAAI,GACpE,CAACojC,eAAeC,gBAAgB,CAAA,6MAAIrjC,WAAAA,EAAgC,IAAI,GACxE,CAACsjC,eAAeC,gBAAgB,CAAA,6MAAIvjC,WAAAA,EAAgC,IAAI,GAExE,CAACwgC,mBAAmBgD,oBAAoB,CAAA,6MAAIxjC,WAAAA,EAAgC,IAAI,GAChF,CAACyjC,4BAA4B9T,6BAA6B,CAAA,6MAAI3vB,WAAAA,EAClE,IACF;IAEiC,CAAA,GAAA,uJAAA,CAAA,mCAAA,EAAA;QAC/BkB,SAAS6B;QACTsrB;QACAz9B;IAAAA,CACD;IAED,MAAM,CAAC4wC,oBAAoBkC,qBAAqB,CAAA,OAAI1jC,iNAAAA,EAAsC,CAAA,CAAE,GACtF,CAAC2jC,sBAAsBC,uBAAuB,CAAA,6MAAI5jC,WAAAA,EAAoC,CAAA,CAAE,GAExF6jC,kKAAaz5B,iBAAAA,EAAeg5B,aAAa,GACzCU,iBAAa15B,kKAAAA,EAAek5B,aAAa,GACzC9T,eAAeqU,YAAYx5B,QAC3BolB,eAAeqU,YAAYz5B,QAC3B5H,kBACJ4Y,mCAAAA,CAAoCxB,YAAYyB,+BAA+B,CAAA,GAC3E1hB,WAAWwhB,2BAAAA,CAA4BvB,YAAYyB,+BAA+B,CAAA,GAElFgmB,6NAAmB7rB,UAAAA,EACvB,IAAMoG,aAAYrY,KAAMqK,CAAAA,IAAMA,EAAEpW,IAAAA,KAASoiB,WAAWpiB,IAAI,GACxD;QAACokB;QAAYhC,WAAWpiB,IAAI;KAC9B,GAEM8pC,WAAWjjC,CAAQ1N,CAAAA,OAEnBqgB,sNAAYwE,UAAAA,EAChB,IACEqsB,aAAa;YACXR;YACA9hB;YACA+hB;YACAC;YACA3lB,YAAAA;YACA+lB;YACAnxC;QACD,CAAA,GACH;QAAC6wC;QAAkB9hB;QAAU+hB;QAAUC;QAAoB3lB;QAAY+lB;QAAYnxC,CAAC;KACtF,GAEMszC,wNAAc1uB,cAAAA,EACjB/T,CAA+C,UAAA;QAC9C,KAAA,MAAWjJ,QAAQ4Y,UACjB,IAAI5Y,KAAKsZ,QAAAA,QACHovB,gKAAAA,EAAS1oC,KAAKsZ,QAAAA,EAAUrQ,KAAK,GAAG;YAClCA,MAAMC,cAAAA,IACND,MAAM0iC,eAAAA,CAAgB,GACtBvJ,aAAapiC,IAAI;YACjB;QAAA;IACF,GAIN;QAACoiC;QAAcxpB,SAAS;KAC1B,GAEMgzB,gOAAsB5uB,cAAAA,EACzBvI,CAAe,SAAA;QACHA,WAAAA,IAAI,GACfggB,QAAQhgB,IAAI;IAAA,GAEd;QAAC8M;QAAYkT,OAAO;KACtB;IAEKt8B,OAAAA,aAaF,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0JAAA,uBAAA,EAAA;QAAqB;QACnBqrB,UAAAA;YAAWrpB,YAAAA,MAAAA,GAAS,KAClB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,oCAAA;gBACC;gBACA;gBACA,YAAAqpB;gBACA,aAAa6nB;YAEhB,CAAA;YAEA1yB,aAAaxe,MAAAA,GAAS,KAAKhC,cAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JACzB,uBAAA,EACC;gBAAA,SAASwgB;gBACT;gBACA;gBACA,WAAW4yB;gBACX,MAAM1sC;gBACN;YAAA,CAEH;YAED,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,uBAAA,EAAA;gBAAqB,SAASysC;gBAAsB,MAAMzsC;gBACzD,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,yBACC;oBAAA;oBACA,IAAIgL;oBACJ;oBACA,eAAY;oBACZ,MAAM;oBACN,IAAI0V;oBACJ;oBACA,SAASmsB;oBACT,SAAS/gC;oBAET,UAAA;wBAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,qBAAA;4BAAoB,KAAKugC;4BAAkB;wBAAqB,CAAA;wBAEhE9D,kLACCU,uBAAAA,EAAqBV,kBAAkB,KACvCyD,6BACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,kBAAA;4BACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA;gCACC,MAAK;gCACL,gBAAa;gCACb,SAAS,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2BAAA;oCAA0B,UAAUzD;gCAAAA,CAAmB;4BAAI,CAAA;wBAAA,CAEzE;wBAGJ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,iBAAA,EAAA;4BAAe,UAAUgD;4BAA0B,SAASO,SAASkB,UAAAA;4BACpE,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAK;gCAAA,WAAU;gCAAS,MAAM;gCAAG,QAAQ/gC,kBAAkBzJ,KAAAA,IAAY;gCACtE,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,2BAAA;oCACC,eAAY;oCACZ,qBAAqBk+B,eAAemL,YAAYoB,wBAAwB;oCACxE,qBAAqBrB;oCACrB,YAAYmB;oCAEZ,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA;wCACC,cAAczU,gBAAgB;wCAC9B,cAAcC,gBAAgB;wCAC9B,eAAeoT;wCACf;wCACA;oCAA6D,CAAA;gCAAA,CAEjE;4BAAA,CACF;wBACF,CAAA;wBAIA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAC,kBAAA,EAAA;4BACC,qBAAqB;gCAAC,CAAC7nB,6BAA6B,CAAA,EAAGyoB;4BAA0B;4BAEjF,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,kKAAA,EAAe;gCAAA,UAAUhB;gCAA0B,SAASO,SAAS18B,MAAAA;gCACpE,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,YAAW;oCAAA,KAAK+8B;oCACf,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8MAAA,EAAA;wCACC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,mBACC;4CAAA,eAAeG;4CACf;wCAAuC,CAAA;oCAAA,CAE3C;gCACF,CAAA;4BAAA,CACF;wBACF,CAAA;wBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACC,0BAAwB,CAAA,CAAA;qBAAA;gBAAA,CAC3B;YACF,CAAA;SAAA;IAAA,CACF,IAhGG,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,qBAAA;QACC;QACA;QACA;QACA;QACA;IAAA,CACA;AA4FR;AAMA,SAAAY,iBAAAt0C,KAAAA,EAAA;IACE,MAAA,EAAAoT,SAAAA,EAAAA,GAAoBuC,QAAQ;IACrBvC,OAAAA,YAAS,OAAUpT,MAAK4G,QAAAA;AAAS;AC7Q1C,SAAS2tC,KAAKC,MAAAA,EAAuB;IAC5BA,OAAAA,OAAOr0C,QAAAA,EAAU4vC,YAAY0E;AAGtC;AAMO,SAAAC,6BAAA;IAAAz0C,MAAAA,oMAAAC,EAAA,CAAA;IAAAK,IAAAA;IAAA,OAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAG0BtC,KAAA;QAAAg0C;QAAAI,kBAAA7B;IAAAA,GAG9B7yC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,MAHM20C,kLAAAA,EAAwBr0C,EAG9B;AAAC;AChBG,MAAMs0C,+LAAoB/f,cAAAA,EAAY;IAC3CntB,MAAM;IACNotB,SAAS;IACT7O,aAAa;AACf,CAAC,GAMY4uB,eAAehgB,yLAAAA,EAAY;IACtCntB,MAAM;IACNotB,SAAS;IACT7O,aAAa;AACf,CAAC;ACNe6uB,SAAAA,4BACdryB,SAAAA,EACAsyB,IAAAA,EACiE;IACjE,MAAMvvC,UAAUuvC,KAAKC,WAAAA,IAAe,CAAA,GAC9BC,wBAAwBF,KAAKG,YAAAA;IAE/BH,KAAKI,WAAAA,IAAeF,yBAAyBA,0BAA0BF,KAAKI,WAAAA,IAE9E5vB,QAAQrK,IAAAA,CACN,CAAA,iCAAA,EAAoC65B,KAAKI,WAAW,CAAA,wBAAA,EAA2BF,qBAAqB,CAAA,UAAA,EAAaA,qBAAqB,CAAA,EAAA,CACxI;IAGF,MAAMluC,WAAWkuC,yBAAyBF,KAAKI,WAAAA,EACzCC,gBAAgB3yB,UAAU3Y,MAAAA,CAAQpJ,CAAAA,IAAMA,EAAED,UAAAA,KAAes0C,KAAKluC,YAAY,GAE1Emf,iBAAiB;QACrB,GAAG+uB,KAAK/uB,cAAAA;QACR,GAAI,OAAOxgB,WAAY,WAAWA,WAAW,CAAA,IAAK,CAAA,CAAA;IACpD;IAEA,IAAI0vC,eAAenuC;IAIf,OAAA,CAACA,YAAYquC,cAAc3yC,MAAAA,KAAW,KAAA,CACxCyyC,eAAeE,aAAAA,CAAc,CAAC,CAAA,CAAE9vC,EAAAA,GAG3B;QAAC4vC;QAA6BlvB;IAAc;AACrD;ACuBaqvB,MAAAA,iOAAuBrwB,OAAAA,EAAMjlB,CAAqC,UAAA;IACvE,MAAA,EAAC4G,QAAAA,EAAUsD,KAAAA,EAAOnF,MAAAA,KAAAA,EAAM+iB,OAAAA,EAASytB,WAAAA,EAAAA,GAAev1C,OAChDK,qKAASC,YAAAA,CACToiB,IAAAA,wKAAYQ,eAAAA,KACZ,EAACsyB,eAAAA,EAAe,+JAAIC,eAAAA,KACpB,EACJrM,gBAAAA,EACAjpC,UAAU,EACRyZ,SAAS87B,gBAAAA,EACT/tB,QAAQguB,eAAAA,EACRC,uBAAuBC,oBAAAA,EACvB/K,yBAAyBgL,sBAAAA,EACzB/pB,YAAYgqB,kBAAAA,EAAAA,EACd,+JACEzD,YAAAA,CAAU,IACR0D,4KAAgBC,mBAAAA,CAChBzoB,IAAAA,aAAarmB,iBACb+uC,gBAAgB1oB,WAAWvD,SAAAA,EAC3B,EAACyF,QAAAA,EAAQ,GAAIvE,oBACb,EAAC9gB,MAAM6iB,SAAAA,EAAS,GAAI5kB,gKAAAA,KACpB,EACJuW,OAAAA,EACAuC,iBAAiBuK,wBAAAA,EACjBtqB,QAAQ,IAAA,EACR0+B,OAAOoW,YAAY,CAAA,CAAA,EACrB,GAAIpxC,OACEqxC,cAActwC,wKAAAA,EAAU+Y,OAAO,GAC/Bw3B,gBAAgBD,YAAY7wC,EAAAA,EAC5BsB,yKAAaU,iBAAAA,EAAe8uC,aAAa,GACzCvvC,eAAe+X,QAAQ3X,IAAAA,EACvB1B,aAASM,oKAAAA,EAAU0nB,WAAWhoB,MAAM,KAAKwlB,gBACzCiqB,0KAAcnvC,YAAAA,EAAU0nB,WAAW/nB,OAAO,GAC1C,EAAC0vC,YAAAA,EAAclvB,cAAAA,EAAAA,OAAkBN,gNAAAA,EACrC,IACEovB,4BAA4BryB,WAAW;YACrC5b;YACAquC,cAAciB,YAAYpvC,QAAAA;YAC1Bif,gBAAgBmwB,YAAYE,kBAAAA;YAC5BrB;YACAG,aAAa5vC,OAAOwB,QAAAA;QAAAA,CACrB,GACH;QAACF;QAAcsvC;QAAa5wC;QAAQyvC;QAAavyB,SAAS;KAC5D,GACM6zB,8KAAkBC,kBAAAA,EAAgB;QACtC3vC;QACAC;QACAquC;QACAlvB;IACD,CAAA,GACKwwB,gBAAe3wC,uKAAAA,EAAUywC,eAAe,GACxC,EAACxX,KAAAA,EAAAA,+JAAS5K,uBAAAA,EAAqBttB,YAAYC,YAAY,GACvDgmB,wKAAYib,eAAAA,EAAalhC,YAAYC,YAAY,GACjD,EAACg2B,YAAY4Z,aAAAA,EAAiB/O,+JAAAA,sBAAAA,EAAoB9gC,YAAYC,YAAY,GAC1E+iB,8KAAkB8sB,qBAAAA,EAAmB9vC,YAAYC,YAAY,GAC7DpG,aAAaL,OAAOI,GAAAA,CAAIqG,YAAY,GACpChG,QAA4BgsB,WAAWlpB,SAASkpB,WAAWhpB,aAAa2yC,aAAa31C,KAAAA,EACrF,CAACo/B,YAAY+E,aAAa,CAAA,6MAAI/0B,WAAAA,EAAS,CAAA,CAAK,GAG5C0J,cAAU+L,gNAAAA,EACd,IAAM+vB,iBAAgB;YAACh1C,YAAYoG;YAAcD;QAAAA,CAAW,GAC5D;QAAC6uC;QAAiB7uC;QAAYC,YAAY;KAC5C,GAGM6gB,UAAShC,mNAAAA,EACb,IAAMgwB,gBAAe;YAACj1C,YAAYoG;YAAcD;QAAAA,CAAW,GAC3D;QAAC8uC;QAAgB9uC;QAAYC,YAAY;KAC3C,GAGM8vC,2NAAiBjxB,UAAAA,EACrB,IAAMmwB,uBAAuB;YAACp1C,YAAYoG;YAAcD;QAAW,CAAA,GACnE;QAACA;QAAYC;QAAcgvC,sBAAsB;KACnD,GAEMhZ,yKAAah3B,YAAAA,EAAU4wC,aAAa,GACpC3W,SAAQj6B,wKAAAA,EAAUqwC,SAAS,GAE3B,CAAC5X,WAAWsY,YAAY,CAAA,6MAAI3mC,WAAAA,EAAe,IAC/C1K,OAAOwX,IAAAA,yJAAOkd,aAAAA,EAAe10B,OAAOwX,IAAI,4JAAI5V,cAC9C,GACM0vC,mBAAe7iC,+MAAAA,EAAa,CAAA,CAAE,GAC9B6rB,eAAet6B,OAAOq7B,IAAAA,IAASd,MAAAA,CAAM,CAAC,CAAA,IAAKA,MAAAA,CAAM,CAAC,CAAA,CAAEx6B,EAAAA,IAAO,MAC3D,CAACwxC,cAAcC,eAAe,CAAA,6MAAI9mC,WAAAA,EAAqC,QAAQ,GAE/E,CAAC+mC,eAAeC,gBAAgB,CAAA,6MAAIhnC,WAAAA,EAAuB,IAAI,GAO/DkwB,4KAAgB+W,mBAAAA,EAAiB;QACrCtwC;QACAC;QACAswC,SAASF;QACTjd,KAAKz0B,OAAOy0B,GAAAA;QACZod,OAAO7xC,OAAO6xC,KAAAA;IAAAA,CACf,GAGK7G,mBAAkBpP,iLAAAA,EAAoBhB,eAAgBv7B,CAAAA,SAAUA,OAAM2rC,eAAe,GACrFvG,WAAU7I,iLAAAA,EAAoBhB,eAAgBv7B,CAAAA,UAAUA,QAAMolC,OAAO,GACrEqN,8KAAkBlW,sBAAAA,EAAoBhB,eAAgBv7B,CAAAA,UAAUA,QAAMyyC,eAAe,GACrFC,gLAAoBnW,sBAAAA,EAAoBhB,eAAgBv7B,CAAUA,UAAAA,QAAM0yC,iBAAiB,GACzFC,4KAAgBpW,sBAAAA,EAAoBhB,eAAgBv7B,CAAUA,UAAAA,QAAM2yC,aAAa,GACjFC,aAAarW,kLAAAA,EAAoBhB,eAAgBv7B,CAAAA,UAAUA,QAAM4yC,UAAU,GAc3EtX,sNAAYxa,UAAAA,EAAQ,IACnB6xB,gBAGU,CAAC1qB,WAAWlpB,SAAS,CAACkpB,WAAWhpB,aAAc,CAAC2zC,aAFtD,CAAA,GAGR;QAAC3qB,WAAWlpB;QAAOkpB,WAAWhpB;QAAW2zC;QAAYD,aAAa;KAAC,GAIhE1F,aAAaM,cAActxC,KAAK,GAEhC,CAACqC,UAAUu0C,WAAW,CAAA,6MAAIxnC,WAAAA,EAA6B,EAAE;IAC/DU,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACd,MAAM+mC,eAAe3B,cAAcxuC,gBAAAA,CAAiBX,UAAU,EAAE8Y,SAAAA,CAAWi4B,CAAiB,iBAAA;YAC1FF,YAAYE,YAAY;QAAA,CACzB;QACD,OAAO,MAAM;YACXD,aAAa3uB,WAAAA,CAAY;QAC3B;IAAA,GACC;QAACniB;QAAYmvC,aAAa;KAAC;IAExBjqB,MAAAA,wNAAkCpG,UAAAA,EACtC,IAAMowB,mBAAmB;YAAClvC;YAAYC;QAAAA,CAAa,GACnD;QAACD;QAAYC;QAAcivC,kBAAkB;KAC/C,GAEM,CAAC8B,eAAeC,gBAAgB,CAAA,6MAAI5nC,WAAAA,EAAwB,IAAM1K,OAAOglB,OAAAA,IAAW,IAAI,GAGxFutB,kBAAkB9jC,mNAAAA,EAA2BzO,OAAOglB,OAAO;IACjE5Z,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACVmnC,gBAAgB7jC,OAAAA,KAAY1O,OAAOglB,OAAAA,IAAAA,CACrCutB,gBAAgB7jC,OAAAA,GAAU1O,OAAOglB,OAAAA,EACjCstB,iBAAiBtyC,OAAOglB,OAAAA,IAAW,IAAI,CAAA;IAAA,GAExC;QAAChlB,OAAOglB,OAAO;KAAC;IAEnB,MAAMgnB,mBAAmBzlB,aAAYrY,KAAMqK,CAAAA,IAAMA,EAAEpW,IAAAA,KAASkwC,aAAa,GACnEG,2BAA2BjsB,YAAWrY,IAAAA,CAAMqK,CAAAA,MAAMA,IAAEpW,IAAAA,KAASikB,sBAAsB,GAEnFkc,cAAc0J,kBAAkB7pC,SAASikB,wBAEzC,EAACjrB,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAenB,wBAAwB,GAE7CszC,cAAcvtC,OAAOglB,OAAAA,KAAY,MACjCytB,eAA+CnQ,cACjDwP,kBACAxqB,WAAWhpB,aAAa,MAEtBod,yNAAsCyE,UAAAA,EAC1C,IAAOjlB,aAAam1C,qBAAqB;YAAChvC;YAAYC;YAAcpG;QAAW,CAAA,IAAI,CACnF,CAAA,EAAA;QAACmG;QAAYC;QAAc+uC;QAAsBn1C,UAAU;KAC7D,GAcM6P,QACJsZ,oBAAoB,eACpBiD,UAAUvc,KAAAA,IAAAA,CACT,CAAC/K,OAAOy0B,GAAAA,IAAOud,iBAAiB,CAAC,CAACP,aAAAA,GAE/B3b,sNAAiD3V,UAAAA,EACrD,IAAO6qB,kBAAkB+G,qBAAqB;YAAC9zC,KAAK3C,MAAM2C,GAAAA;YAAKjD,OAAOM,MAAMN,KAAAA;QAASM,IAAAA,OACrF;QAAC0vC;QAAiB+G;QAAmBz2C,KAAK;KAC5C,GAEMo3C,mBAAmB3yB,wNAAAA,EACvB,CAAC4yB,UAAkBC,WAA0B;QAC7B,cAAA;YACZ,GAAG5yC,MAAAA;YACH6xC,OAAOc;YACPle,KAAKme,UAAUxuC,KAAAA;QAAAA,CAChB;IAAA,GAEH;QAACpE;QAAQ0wC,aAAa;KACxB,GAEMmC,uNAAa9yB,cAAAA,EAChB+yB,CAAsB,gBAAA;QACjBC,eAAerkC,OAAAA,IAAAA,CAInB2iC,qKAAazvC,cAAW,GAEpB0vC,aAAa5iC,OAAAA,4JAAY9M,eAAAA,IAAAA,CAC3B0vC,aAAa5iC,OAAAA,2JAAU9M,cAAAA,EACvBmuC,sKAAcnuC,cAAW,CAAA,CAAA;IAAA,GAM7B;QAACmuC;QAAasB,YAAY;KAC5B,GAEM2B,qNAAWvkC,SAAAA,EAAoC,MAAM;QACnD,MAAA,IAAIhP,MAAM,MAAM;IAAA,CACvB;IAEDuzC,SAAStkC,OAAAA,GAAW1C,CAAsB,UAAA;QAEpC,CAACsb,UAAUlpB,KAAAA,IAAS,CAACkpB,UAAUhpB,SAAAA,IACjCw1B,UAAU1C,GAAAA,CAAIke,YAAY,GAE5B/V,MAAMzK,OAAAA,6JAAQmkB,oBAAAA,EAAkBjnC,MAAM0sB,OAAO,GAAGuY,aAAa31C,KAAK;IACpE;IAEA,MAAMkyB,yNAAezN,cAAAA,EAAa/T,CAAsBgnC,UAAAA,SAAStkC,OAAAA,CAAQ1C,OAAK,GAAG,CAAE,CAAA,GAE7Eie,qBAAiBlK,oNAAAA,EACpBmzB,CAAgC,uBAAA;QAE/B,MAAM3uB,YAAY2uB,sBAAsB3sB,YAAWrY,IAAAA,CAAMqK,CAAMA,MAAAA,IAAEpW,IAAAA,KAAS+wC,kBAAkB;QAExFA,IAAAA,sBAAsB,CAAC3uB,WAAW;YAC5B5O,QAAAA,IAAAA,CAAK,CAAA,oBAAA,EAAuBu9B,kBAAkB,CAAA,CAAA,CAAG;YACzD;QAAA;QAGF,IAAKlH,kBAIL;YAAA,IAAIznB,WAAW;gBACP2Q,MAAAA,SAAS3Q,UAAU0E,OAAAA,GAAU;oBAACjpB;gBAAAA,CAAO,KAAK;oBAACA;gBAAM;gBAEvDsyC,iBAAiB,IAAI,GACrBC,gBAAgB7jC,OAAAA,GAAUtK,KAAAA,GAE1BssC,cAAc;oBAAC,GAAGxb,OAAOl1B,MAAAA;oBAAQglB,SAAS5gB,KAAAA;gBAAAA,CAAU;gBAEpD;YAAA;YAGF,IAAI4nC,kBAAkB;gBACd9W,MAAAA,WAAS8W,iBAAiB/iB,OAAAA,GAAU;oBAACjpB;gBAAAA,CAAO,KAAK;oBAACA;gBAAM;gBAE9DsyC,iBAAiB,IAAI,GACrBC,gBAAgB7jC,OAAAA,GAAUtK,KAAAA,GAE1BssC,cAAc;oBAAC,GAAGxb,SAAOl1B,MAAAA;oBAAQglB,SAAS5gB,KAAAA;gBAAAA,CAAU;YAAA;QACtD;IAEF,GAAA;QAAC4nC;QAAkBzlB;QAAYvmB;QAAQ0wC,aAAa;KACtD,GAEMlsB,0NAAgBzE,cAAAA,EACpB,CAACozB,mBAA2B1F,eAAwC;QAClE,MAAM2F,gBAAgB7sB,YAAWrY,IAAAA,CAAMqK,CAAMA,MAAAA,IAAEpW,IAAAA,KAASgxC,iBAAiB;QAEzE,IAAI,CAACC,eAAe;YACVz9B,QAAAA,IAAAA,CAAK,CAAA,oBAAA,EAAuBw9B,iBAAiB,CAAA,CAAA,CAAG;YACxD;QAAA;QAIEnH,IAAAA,kBAAkB7pC,SAASixC,cAAcjxC,IAAAA,EAAM;YACnC,cAAA;gBAAC,GAAGnC,MAAAA;gBAAQ,GAAGytC,UAAAA;gBAAYzoB,SAASouB,cAAcjxC,IAAAA;YAAAA,CAAK;YACrE;QAAA;QAGF,IAAIkxC,gBAAgBrzC;QAEhBgsC,oBAAAA,CAKFqH,gBAAAA,CAJoBD,cAAcnqB,OAAAA,GAAU;YAACjpB,QAAQqzC;QAAAA,CAAc,KAAK;YACtErzC,QAAQqzC;QAGkBrzC,CAAAA,EAAAA,MAAAA;QAGxBk1B,MAAAA,WAASke,cAAcE,MAAAA,GAAS;YAACtzC,QAAQqzC;QAAAA,CAAc,KAAK;YAACrzC,QAAQqzC;QAAa;QAExFf,iBAAiBc,cAAcjxC,IAAI,GACnCowC,gBAAgB7jC,OAAAA,GAAU0kC,cAAcjxC,IAAAA,EAExCuuC,cAAc;YAAC,GAAGxb,SAAOl1B,MAAAA;YAAQ,GAAGytC,UAAAA;YAAYzoB,SAASouB,cAAcjxC,IAAAA;QAAAA,CAAK;IAAA,GAE9E;QAAC6pC;QAAkBzlB;QAAYvmB;QAAQ0wC,aAAa;KACtD,GAEM6C,+NAAqBxzB,cAAAA,EAAY,MAAM;QACvCyyB,4BACFvoB,eAAeuoB,yBAAyBrwC,IAAI;IAAA,GAE7C;QAAC8nB;QAAgBuoB,wBAAwB;KAAC,GAEvCgB,oBAAoBzzB,wNAAAA,EAAY,MAAM;QACrCmK,SAASupB,aAAAA,IAIVjB,4BACFhuB,cAAcguB,yBAAyBrwC,IAAAA,EAAM;YAAC0sC,qBAAqB;QAAA,CAAS;IAE7E,GAAA;QAAC3kB,SAASupB,aAAAA;QAAejvB;QAAeguB,wBAAwB;KAAC,GAE9DkB,4NAAkB3zB,cAAAA,EAAY,IAAMiI,WAAW2rB,YAAAA,CAAAA,GAAgB;QAAC3rB,UAAU;KAAC,GAE3E4rB,4NAAkB7zB,cAAAA,EAAY,IAAMiI,WAAW6rB,gBAAAA,CAAoB,GAAA;QAAC7rB,UAAU;KAAC,GAE/E8rB,gOAAsB/zB,cAAAA,EAC1B,CAACg0B,SAAS,CAACxG,WAAAA,KAAgB;QAEvBmD,cADEqD,SACY;YAAC,GAAG/zC,MAAAA;YAAQglB,SAAS;QAAA,QAErBgvB,yIAAAA,EAAKh0C,QAAQ,SAAS,CAFI;IAK5C,GAAA;QAACutC;QAAavtC;QAAQ0wC,aAAa;KACrC,GAEM5c,gLAAYjE,eAAAA,KAEZokB,6NAAmBl0B,cAAAA,EACtBhd,CAAuB,SAAA;QAClBA,IAAAA,KAAKN,MAAAA,KAAW,wBAAwB6pC,YACnC4H,OAAAA,OAAAA,IAAAA,CAAK5H,UAAU,GACf,CAAA;QAGLvpC,IAAAA,KAAKN,MAAAA,KAAW,uBAAuB0xC,WAC/B/iB,OAAAA,UAAAA,GAAAA,CAAIie,iBAAiB,GAK/B8E,UAAUC,SAAAA,CAAUC,SAAAA,CAAU7nC,OAAO0Y,QAAAA,CAASovB,QAAAA,CAAU,CAAA,GACxD5sB,UAAU;YACR3nB,IAAI;YACJvB,QAAQ;YACR3C,OAAOV,EAAE,6DAA6D;QACvE,CAAA,GACM,CAAA;QAGT,IAAI4H,KAAKN,MAAAA,KAAW,WAClBqxC,OAAAA,oBAAoB,CAAA,CAAI,GACjB,CAAA;QAGT,IAAI/wC,KAAKN,MAAAA,KAAW,iBAClB+wC,OAAAA,kBACO,GAAA,CAAA;QAGL,IAAA,OAAOzwC,KAAKN,MAAAA,IAAW,YAAYM,KAAKN,MAAAA,CAAO8xC,UAAAA,CAAWruB,qBAAqB,GAAG;YACpF,MAAMitB,sBAAoBpwC,KAAKN,MAAAA,CAAOtD,KAAAA,CAAM+mB,sBAAsBhpB,MAAM,GAClEk2C,kBAAgB7sB,YAAWrY,IAAAA,CAAMqK,CAAMA,MAAAA,IAAEpW,IAAAA,KAASgxC,mBAAiB;YAErEC,IAAAA,iBACEA,OAAAA,gBAAcjxC,IAAAA,KAASkwC,gBACzBpoB,eAAempB,gBAAcjxC,IAAI,IAEjCqiB,cAAc4uB,gBAAcjxC,IAAI,GAE3B,CAAA;QAAA;QAIJ,OAAA,CAAA;IAAA,GAET;QACEhH;QACA8uB;QACAupB;QACAnB;QACA9rB;QACA/B;QACA8nB;QACAwH;QACApsB;QACAoM,SAAS;KAEb,GAEM0gB,qOAA2Bz0B,cAAAA,EAC/B,IAAM+zB,oBAAoB,CAAA,CAAK,GAC/B;QAACA,mBAAmB;KACtB,GAEM,CAACjc,UAAU4c,aAAa,CAAA,6MAAI/pC,WAAAA,EAAe,EAAE,GAC7C,CAACgqC,iBAAiBC,oBAAoB,CAAA,6MAAIjqC,WAAAA,CAAAA,IAC1C,CAAC2sB,gBAAgBK,kBAAkB,CAAA,6MAAIhtB,WAAAA,KACvC,CAAC0sB,oBAAoBwd,uBAAuB,CAAA,6MAAIlqC,WAAAA,KAEhDmqC,qOAA2B90B,cAAAA,EAAY,CAACvI,MAAY5J,cAAuB;QAC/E8pB,mBAAoBod,CAAcC,wKAAAA,YAAAA,EAAUD,WAAWt9B,MAAM5J,SAAS,CAAC;IAAA,GACtE,CAAA,CAAE,GAEConC,+BAA+Bj1B,wNAAAA,EAAY,CAACvI,QAAY5J,gBAAuB;QACnFgnC,wBAAyBE,CAAcC,0KAAAA,YAAAA,EAAUD,aAAWt9B,QAAM5J,WAAS,CAAC;IAAA,GAC3E,CAAA,CAAE,GAECqnC,4BAA4Bl1B,wNAAAA,EAChC,CAACvI,QAAY09B,YACXP,qBAAsBG,CAAAA,0KAAcC,YAAAA,EAAUD,aAAWt9B,QAAM09B,SAAS,CAAC,GAC3E,CAAA,CACF,GAEMjiB,qBAAqB33B,MAAM6/B,UAAAA,GAAa,WAAW,UACnDzS,WAAW1f,CAAQ9N,CAAAA,YAAYwtB,UAC/BysB,QAAQ75C,MAAM2C,GAAAA,GAAM3C,MAAM2C,GAAAA,GAAM,YAChCm3C,gOAAsBj1B,UAAAA,EAAQ,IAAA,CAC3B;YACL,GAAG7kB,KAAAA;YACH2C,KAAKyqB,uKAAW3mB,iBAAAA,EAAeozC,KAAK,gKAAI9uC,aAAAA,EAAW8uC,KAAK;QAAA,CAAA,GAEzD;QAACzsB;QAAUptB;QAAO65C,KAAK;KAAC,GAErB,CAAC3a,aAAaC,oBAAoB,CAAA,+JAAI4a,8BAAAA,EAA4B;QACtE16C,UAAUy6C;QACV12B,YAAYuU;IACb,CAAA,GAEKqiB,6KAAiBC,+BAAAA,EAA6Bj6C,KAAK,GACnDk6C,gBAAgB,CAACl6C,OAAO2C,KAExBm7B,WAAWjZ,oNAAAA,EAAQ,MAAM;QAC7B,MAAMs1B,kBAAkB,CAAChb,wBAAwB,CAACD,aAAapc,SACzDs3B,uBAAuB,EAACC,6LAAAA,EAAgBz6C,YAAa,QAAQ,GAC7D06C,uBAAuBJ,iBAAiB,6KAACG,kBAAAA,EAAgBz6C,YAAa,QAAQ,GAC9E26C,eAAexxB,oBAAoB,gBACnC2T,WAAW1Q,UAAU2Q,mBAAAA,EAAqBtkB,SAG1CmiC,qBAAqB9sC,CAAAA,CAAAA,CAAQ0f,YAAYpB,UAAUlpB,KAAAA;QAGvD,OAAA,CAAC2M,SACD05B,YAAY,QACZgR,mBACAC,wBACAE,wBACAC,gBACA7d,YACA0C,cACAC,aACAmb,sBACAR;IAAAA,GAED;QACD7a;QACAD,aAAapc;QACbljB;QACAs6C;QACAnxB;QACAiD,UAAU2Q,mBAAAA,EAAqBtkB;QAC/B2T,UAAUlpB,KAAAA;QACVsqB;QACA3d;QACA05B;QACA/J;QACAC;QACA2a,cAAc;KACf,GAEK/d,wKAAYwe,eAAAA,EAAa;QAC7B76C;QACAN,eAAek7B;QACfsD;QACA4c,iBAAiBvD;QACjB1Z;QACAlB;QACAR;QACA15B;QACA25B;QACAF;QACAsd;QACApS;IAAAA,CACD;IAEDl3B,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACE,gBAAA;YACd/J;YACAC;YACApG;YACAoyB,UAAUE;QAAAA,CACX;IAAA,GACA;QAACnsB;QAAYC;QAAcpG;QAAYsyB;QAAcwiB,eAAe;KAAC;IAElEiG,MAAAA,yNAAexnC,SAAAA,EAAO8oB,SAAS;IACrC0e,aAAavnC,OAAAA,GAAU6oB;IAEjB2e,MAAAA,cAAcn2B,wNAAAA,EACjBvI,CAAe,WAAA;QACF2+B,CAAAA,GAAAA,uJAAAA,CAAAA,sBAAAA,EAAoBF,aAAavnC,OAAAA,EAAU8I,MAAI,EACvD4+B,OAAAA,CAASluB,CAAO,OAAA;YACdA,GAAGxmB,IAAAA,KAAS,gBACdg2B,mBAAoBod,CAAAA,0KAAcC,YAAAA,EAAUD,aAAW5sB,GAAG1Q,IAAAA,EAAM,CAAA,CAAK,CAAC,GAEpE0Q,GAAGxmB,IAAAA,KAAS,oBACdkzC,wBAAyBE,CAAAA,0KAAcC,YAAAA,EAAUD,aAAW5sB,GAAG1Q,IAAAA,EAAM,CAAA,CAAK,CAAC,GAEzE0Q,GAAGxmB,IAAAA,KAAS,sBACdizC,qBAAsBG,CAAAA,0KAAcC,YAAAA,EAAUD,aAAW5sB,GAAG1Q,IAAAA,EAAM0Q,GAAGgtB,SAAS,CAAC;QAAA,CAElF,GACDT,cAAcj9B,MAAI;IAAA,GAEpB;QAACy+B,YAAY;KACf,GAEMI,2NAAiBt2B,cAAAA,EACrB,CAACu2B,eAAqBr2C,YAAiC;QACrDuwC,cAAc+F,WAAAA,CAAY;YACxB;gBACE70C,MAAM;gBACNL;gBACAmW,MAAM8+B;gBACNE,cAAAA,AAAc,aAAA,GAAA,IAAI3jB,KAAK,EAAE4jB,WAAAA,CAAY;gBACrCC,WAAWz2C,SAASy2C;YAAAA,CACrB;SACF;IAAA,GAEH;QAACr1C;QAAYmvC,aAAa;KAC5B,GAEMmG,oOAA0Bx2B,UAAAA,EAC9B,IAAMy2B,iJAAAA,EAASP,gBAAgB,KAAM;YAACQ,SAAS,CAAA;YAAMC,UAAU,CAAA;QAAA,CAAK,GACpE;QAACT,cAAc;KACjB,GAEMU,wNAAch3B,cAAAA,EAClB,CAACi3B,gBAAsB/2C,cAAiC;QAChDq2C,MAAAA,wKAAgBW,UAAAA,EAAQD,cAAc;QACxCV,oBAAkBhF,aAAa5iC,OAAAA,IAAAA,CACjC2iC,aAAa4F,gKAAAA,EAAQX,eAAa,CAAC,GACnCJ,kKAAYe,UAAAA,EAAQX,gBAAcn3C,KAAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAC,GAC/CmyC,aAAa5iC,OAAAA,GAAU4nC,iBACvBvG,cAAcuG,eAAa,CAAA,GAE7BK,wBAAwBL,iBAAer2C,SAAO;IAAA,GAEhD;QAAC8vC;QAAamG;QAAaS,uBAAuB;KACpD,GAEM3yB,yNAAyC7D,UAAAA,EAC7C,IAAA,CAAO;YACL/L;YACAkmB;YACAnY;YACAmgB;YACArY;YACAmN;YACAC;YACAob;YACApuB;YACAyR;YACAz0B;YACAwvC;YACAvvC;YACAgmB;YACA5L;YACAqd;YACAxU,WAAWynB,oBAAoB;YAC/BzlB,YAAAA;YACAqd;YACAnM,QAAQob;YACRvlB,UAAUE;YACVgK,SAASuf;YACTzyB,YAAY4xB;YACZgB,gBAAgB3D;YAChB/F,eAAegG;YACf7lB,gBAAgB6mB;YAChBrP,cAAc8O;YACd7O,aAAasO;YACbrO,aAAauO;YACbhc,uBAAuBqd;YACvBvd,oBAAoBmd;YACpBld,wBAAwBqd;YACxBxwB;YACAqT;YACAnzB;YACA6oC;YACAjW;YACA1b,gBAAgBA,kBAAkB,CAAE,CAAA;YACpC0G;YACAgqB;YACAvhC;YACA7P;YACAu/B;YACAD;YACAgX;YACAkB;YACAjT;YACA/E;YACAC;YACA8W;YACAF;YACA3W;YACA/+B;YACAP;YACAi/B,OAAAA;YACAhD;YACA+N,yBAAyB8L;QAC3B,CAAA,GACA;QACExN;QACAxvB;QACAkmB;QACAnY;QACAmgB;QACArY;QACAmN;QACAC;QACAob;QACApuB;QACA2nB;QACAlW;QACAz0B;QACAwvC;QACAvvC;QACAgmB;QACA5L;QACAqd;QACAxB;QACAsb;QACArlB;QACAupB;QACAxD;QACAC;QACAgB;QACAP;QACAe;QACAH;QACAnB;QACAE;QACAqB;QACAvwC;QACA6oC;QACAhnB;QACAoU;QACAD;QACAD;QACA2W;QACAx1B;QACA4I;QACAqT;QACAvV;QACAkY;QACA8R;QACAvhC;QACA7P;QACAg7C;QACAxD;QACAjB;QACAF;QACA3W;QACA/+B;QACAy7B;QACAh8B;QACAi/B,MAAK;KAET;IAEAnvB,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACV+rC,IAAAA;QACJ,OAAI9yB,oBAAoB,kBAAA,CACtB8yB,UAAUjsC,WAAW,MAAM;YACf,UAAA;gBACRnL,IAAI;gBACJvB,QAAQ;gBACR3C,OAAOV,EAAE,iDAAiD;YAAA,CAC3D;QAAA,GACA,GAAI,CAAA,GAEF,MAAM;YACPg8C,WAAShsC,aAAagsC,OAAO;QACnC;IACC,GAAA;QAAC9yB;QAAiBqD;QAAWvsB,CAAC;KAAC;IAE5B43C,MAAAA,2NAAiBtkC,SAAAA,EAAO,CAAA,CAAK;IAGnCrD,iNAAAA,YAAAA,EAAU,MAAM;QACVL,IAAAA,SAAS/K,OAAOwX,IAAAA,EAAM;YAClB,MAAA,EAACA,MAAAA,MAAAA,EAAM,GAAG4/B,YAAAA,GAAcp3C,QACxBq3C,oKAAcC,mBAAAA,EAAiBrB,aAAavnC,OAAAA,EAASpT,OAAOo5B,mKAAAA,EAAeld,MAAI,CAAC;YAEtFu7B,eAAerkC,OAAAA,GAAU,CAAA,yJAGpB6oC,UAAAA,EAAWjG,aAAa5iC,OAAAA,EAAS2oC,WAAW,KAAA,CAC/ChG,aAAagG,WAAW,GACxBnB,YAAYmB,WAAW,GACvB/F,aAAa5iC,OAAAA,GAAU2oC,aACvBtH,cAAcsH,WAAW,CAAA;YAGrBF,MAAAA,YAAUjsC,WAAW,MAAM;gBAC/B6nC,eAAerkC,OAAAA,GAAU,CAAA;YAAA,GACxB,CAAC;YAGJsZ,OAAAA,WAAWvD,SAAAA,CAAU2yB,UAAU,GAExB,IAAMjsC,aAAagsC,SAAO;QAAA;IACnC,GAGC;QAACn3C;QAAQqB;QAAY0uC;QAAamG;QAAanrC;QAAOid,UAAU;KAAC,GAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,gJAGjE,sBAAA,CAAoB,QAAA,EAApB;QAA6B,OAAOhE;QAAe5iB;IAAAA,CAAS;AAEjE,CAAC;AAED0uC,qBAAqB5/B,WAAAA,GAAc;ACxwBtBsnC,MAAAA,yNAAe/3B,OAAAA,EAAK,SAAAjlB,KAAAA,EAAA;IAAAC,MAAAA,+LAAAC,KAAAA,EAAA,CAAA,GAC/B,EAAAyH,MAAAs1C,gBAAAA,EAAAA,+JAAiC3K,YAAAA,CAAU,IAGnB/xC,KAAAP,MAAK+E,IAAAA,CAAAm4C,MAAAA,IAAgBD;IAAgBp8C,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CACzDa,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,oBAAA,EAAA;QACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;YAAA,GAAsBb,KAAAA;QAAAA,CAAK;IAAA,CAC9B,GAAoBC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAA,OAAAhB,CAAAA,CAAAM,CAAAA,CAAAA,KAAAA,MAAAN,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CAHtBI,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,iBAAA,EAAqB;QAAA,MAAAV;QACpBM,UAGF;IAAA,CAAA,GAAiBZ,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAJjBgB;AAIiB,CAEpB;AAED,SAAAk8C,kBAAAn9C,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACE,EAAA6E,MAAAA,KAAAA,EAAA+iB,OAAAA,EAAAA,GAAwB9nB,OACxB,EAAAo9C,yBAAAA,EAAoC9K,+JAAAA,YAAAA,CAAWnyC,GAAAA,QAAAA,EAC/CqtB,aAAmBrmB,cACnB0X,GAAAA,UAAgBw+B,eAAet4C,MAAI8Z,OAAAA,EAAU2O,WAAUhoB,MAAO,GAC9D,EAAAsB,YAAAA,EAAAw2C,UAAAC,gBAAAA,EAAAA,OAAmDC,0KAAAA,EAAgB3+B,QAAOtZ,EAAAA,EAAKsZ,QAAO3X,IAAK,GAE3F4rC,kBAAuB4B,2BAA2B;IAAC,IAAAn0C,IAAAM;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA4e,QAAAtZ,EAAAA,IAAAtF,CAAAA,CAAA4e,CAAAA,CAAAA,KAAAA,QAAA3X,IAAAA,IAAAjH,CAAAA,CAAAA,EAAAA,KAAAm9C,4BAAAA,CAK1Cv8C,KAAAu8C,0BAAyB;QAAAl2C,MACxB;QAAUL,YACJgY,QAAOtZ,EAAAA;QAAA7E,YACPme,QAAO3X,IAAAA;IAAAA,CACpB,GAACjH,CAAAA,CAAA,CAAA,CAAA,GAAA4e,QAAAtZ,EAAAA,EAAAtF,CAAAA,CAAA,CAAA,CAAA,GAAA4e,QAAA3X,IAAAA,EAAAjH,CAAAA,CAAAA,EAAAA,GAAAm9C,2BAAAn9C,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAJFM,KAAOM;IADT,MAAAoiB,gBAAsB1iB;IAMmCU,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAgjB,gBAAAA,CAE0BhiB,KAAA;QAAAgiB;IAAA,GAElFhjB,CAAAA,CAAAA,EAAAA,GAAAgjB,eAAAhjB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAA,CAAAkjB,qBAAAC,4BAAA,CAAA,+JAA4DC,yBAAAA,EAAuBpiB,EAElF,GACDq8C,WAAiBC,oBAAgB,CAAKn6B;IAA4B,IAAAliB,IAAA4B;IAAA7C,CAAAA,CAAA,CAAA,CAAA,KAAA6G,gBAAA7G,CAAAA,CAAAq9C,CAAAA,CAAAA,KAAAA,YAAAr9C,CAAAA,CAAA4e,CAAAA,CAAAA,KAAAA,WAAA5e,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAGzD8C,KAAAw6C,YAAYx2C,gBAAgB+X,QAAO3X,IAAAA,KAAUJ,eAChD22C,kBAAkBz9C,OAAO6e,SAAS/X,YAAY,IAC9C9G,OAAKC,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAAq9C,UAAAr9C,CAAAA,CAAAA,EAAAA,GAAA4e,SAAA5e,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAFTiB,KAAO4B;IADT,MAAA46C,gBAAsBx8C,IAMtB,EAAAyF,oBAAAA,mBAAAA,EAAAg3C,mBAAAA,EAAAn5C,UAAAA,EAAAD,gBAAAA,EAAAA,GAAgFipB;IAAUzqB,IAAAA;IAAA9C,CAAAA,CAAAuE,EAAAA,CAAAA,KAAAA,cAAAvE,CAAAA,CAAAA,GAAAA,KAAAsE,mBAAAA,CACtExB,KAAAwB,gBAAAA,CAAiBC,aAAc,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAgB,UAAmB,CAAA,GAAAvF,CAAAA,CAAAA,GAAAA,GAAAuE,YAAAvE,CAAAA,CAAAA,GAAAA,GAAAsE,kBAAAtE,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAtE,MAAA29C,cAAoB76C,IACpB86C,yBAA+Bt5C,iBAAgB7B,MAAAA,EAC/C,EAAAqE,aAAAA,EAAAA,GAAwB62C;IAAW,IAAAz5C,IAAAiC;IAAAnG,CAAAA,CAAAuE,EAAAA,CAAAA,KAAAA,cAAAvE,CAAAA,CAAAA,GAAAA,KAAA8G,iBAAA9G,CAAAA,CAAA,EAAA,CAAA,KAAA49C,yBAAAA,CAG1Bz3C,KAAAW,gBAAa;QAAAiW,4JAERkd,aAAAA,EAAenzB,aAAa;QAAClC,OAGjCL,cAAcq5C,yBAAAA,IACV,SACAr5C,cAAcq5C,yBAA0B,IACtC,aACA;IAAA,IAAS;QAAA7gC,MAAA,CAAA,CAAA;QAAAnY,OAED;IAAA,GAAO5E,CAAAA,CAAAA,GAAAA,GAAAuE,YAAAvE,CAAAA,CAAAA,GAAAA,GAAA8G,eAAA9G,CAAAA,CAAAA,GAAAA,GAAA49C,wBAAA59C,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAX7BkE,KAAOiC;IADT,MAAA03C,aAAyE35C,IAezE,EAAAxD,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAAC,IAEhDof,QAAO3X,IAAAA,KAAU,OAAA,CAAQo2C,UAAQ;QAAAj3C,IAAAA;QAAApG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAMxB0F,MAAA1F,EAAE,gDAAgD,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA;QAAAqG,IAAAA;QAAA,OAAArG,CAAAA,CAAA6nB,EAAAA,CAAAA,KAAAA,WAAA7nB,CAAAA,CAAAA,GAAAA,KAAAoG,MAAAA,CAJ5DC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,aACO;YAAA,MAAE;YACE,UAAA;YACDwhB;YACF,OAAAzhB;QACP,CAAA,GAAApG,CAAAA,CAAAA,GAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,GAAAA,GAAAoG,KAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,GAAAA,IAAAA,MAAArG,CAAAA,CAAA,EAAA,CAAA,EALFqG;IAAAA;IAKE,IAAA,CAIDQ,cAAY;QAAAT,IAAAA;QAAApG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAMJ0F,MAAA1F,EAAE,8CAA8C,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA;QAAAqG,IAAAA;QAAArG,CAAAA,CAAA,EAAA,CAAA,KAAA4e,QAAAtZ,EAAAA,GAAAA,CAO1Ce,MAAA;YAAAf,IAAKsZ,QAAOtZ,EAAAA;QAAItF,GAAAA,CAAAA,CAAA,EAAA,CAAA,GAAA4e,QAAAtZ,EAAAA,EAAAtF,CAAAA,CAAAA,GAAAA,GAAAqG,GAAAA,IAAAA,MAAArG,CAAAA,CAAA,EAAA,CAAA;QAAAuG,IAAAA;QAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACZ2D,OAAA;YAAA8f,MAAAtc;QAAAA,GAA+C/J,CAAAA,CAAAA,GAAAA,GAAAuG,IAAAA,IAAAA,OAAAvG,CAAAA,CAAA,EAAA,CAAA;QAAAyG,IAAAA;QAAAzG,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAAqG,MAAAA,CANjEI,OAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,QAAA,EAAa;YAAA,OAAA;YACZ,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAQ,IAAA;gBACP,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EAAA;oBACI/F;oBACK,SAAA;oBACA,QAAA2F;oBACI,YAAAE;gBAEhB,CAAA;YAAA,CAAA;QAAA,CACF,GAAQvG,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAqG,KAAArG,CAAAA,CAAAA,GAAAA,GAAAyG,IAAAA,IAAAA,OAAAzG,CAAAA,CAAA,EAAA,CAAA;QAAA6I,IAAAA;QAAA7I,OAAAA,CAAAA,CAAA6nB,EAAAA,CAAAA,KAAAA,WAAA7nB,CAAAA,CAAAA,GAAAA,KAAAyG,QAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,MAAAA,CAfVyC,OAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,WACO;YAAA,MAAA;YACI,UAAE;YACHgf;YACF,OAAAzhB;YAEPK,UAAAA;QAUF,CAAA,GAAYzG,CAAAA,CAAAA,GAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,GAAAA,GAAAyG,MAAAzG,CAAAA,CAAAA,GAAAA,GAAAoG,KAAApG,CAAAA,CAAAA,GAAAA,GAAA6I,IAAAA,IAAAA,OAAA7I,CAAAA,CAAA,EAAA,CAAA,EAhBZ6I;IAAAA;IAwBK,MAAAzC,KAAGS,GAAAA,YAAY,CAAA,CAAA,EAAI+X,QAAOtZ,EAAA,EAAA;IAAKe,IAAAA;IAAArG,CAAAA,CAAA,EAAA,CAAA,KAAA6yC,mBAAA7yC,CAAAA,CAAA4e,EAAAA,CAAAA,KAAAA,QAAAtZ,EAAAA,IAAAtF,CAAAA,CAAA4e,EAAAA,CAAAA,KAAAA,QAAA3X,IAAAA,GAAAA,CAahCZ,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAACwsC,iBAAAA;QAA2B,YAAAj0B,QAAOtZ,EAAAA;QAAmB,cAAAsZ,QAAO3X,IAAAA;IAAAA,CAAS,GAAAjH,CAAAA,CAAAA,GAAAA,GAAA6yC,iBAAA7yC,CAAAA,CAAA,EAAA,CAAA,GAAA4e,QAAAtZ,EAAAA,EAAAtF,CAAAA,CAAA,EAAA,CAAA,GAAA4e,QAAA3X,IAAAA,EAAAjH,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAA4e,QAAAtZ,EAAAA,IAAAtF,CAAAA,CAAA4e,EAAAA,CAAAA,KAAAA,QAAA3X,IAAAA,IAAAjH,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CADxEE,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,iBAAA;QAA4B,YAAAqY,QAAOtZ,EAAAA;QAAmB,cAAAsZ,QAAO3X,IAAAA;QAC5DZ,UACF;IAAA,CAAA,GAAkBrG,CAAAA,CAAA,EAAA,CAAA,GAAA4e,QAAAtZ,EAAAA,EAAAtF,CAAAA,CAAA,EAAA,CAAA,GAAA4e,QAAA3X,IAAAA,EAAAjH,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAA0G,EAAAA,CAAAA,KAAAA,uBAAA1G,CAAAA,CAAA,EAAA,CAAA,KAAA69C,cAAA79C,CAAAA,CAAA09C,EAAAA,CAAAA,KAAAA,uBAAA19C,CAAAA,CAAA,EAAA,CAAA,KAAAuG,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAkjB,sBAAAA,CARpBzc,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wLAAA,EAAA;QAC6BC,4BAAAA;QACXg3C,iBAAkB;QACRx6B,2BAAAA;QACf26B;QAEZt3C,UAGF;IAAA,CAAA,GAAgCvG,CAAAA,CAAAA,GAAAA,GAAA0G,qBAAA1G,CAAAA,CAAAA,GAAAA,GAAA69C,YAAA79C,CAAAA,CAAAA,GAAAA,GAAA09C,qBAAA19C,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAkjB,qBAAAljB,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA,OAAA7I,CAAAA,CAAAy9C,EAAAA,CAAAA,KAAAA,iBAAAz9C,CAAAA,CAAAA,GAAAA,KAAAyG,OAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,KAAAA,CAlBlCyC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,sBAIK40C;QAAAA,GAAAA,aAAAA;QAKJh3C,UANKL;IAAAA,GAAAA,EAgBP,GAAuBpG,CAAAA,CAAAA,GAAAA,GAAAy9C,eAAAz9C,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA,EAnBvB6I;AAmBuB;AAzG3B,SAAAkB,QAAAzJ,EAAAA,EAAA;IA6EkC,MAAA,EAAAqG,QAAAA,EAAAA,GAAArG;IAAe,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAuB,QAAA;QAAT;IAAA,CAAE;AAAO;AAgCxE,SAAA88C,eAAAx+B,OAAAA,EAAAte,EAAAA,EAAA;IAAAN,MAAAA,QAAAC,4LAAAA,EAAA,CAAA;IAAAW,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAEEM,KAAAN,OAA+CqJ,KAAAA,IAAAA,CAAAA,IAA/CrJ,IAA+CN,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAA/CuF,MAAAA,SAAA3E,IAEA6hB,wKAAkBQ,eAAAA,CAAa;IAACjiB,IAAAA;IAAA,KAAA;QAAA,IAI1B4d,QAAO3X,IAAAA,IAAS2X,QAAO3X,IAAAA,KAAU,KAAG;YAC/B2X,KAAAA;YAAOpK,MAAAA;QAAAA;QAIhB0gC,MAAAA,eAAqBt2B,QAAO7X,QAAAA,IAAaxB,OAAMwB,QAAAA;QAAS9F,IAAAA;QAAAjB,CAAAA,CAAAk1C,CAAAA,CAAAA,KAAAA,gBAAAl1C,CAAAA,CAAAA,EAAAA,KAAAyiB,YAAAA,CACvCxhB,KAAAi0C,eAAezyB,UAAShP,IAAAA,CAAA/S,CAAAA,IAAaA,EAAC4E,EAAAA,KAAQ4vC,YAAY,IAACvrC,KAAAA,GAAY3J,CAAAA,CAAAA,EAAAA,GAAAk1C,cAAAl1C,CAAAA,CAAAA,EAAAA,GAAAyiB,WAAAziB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;QACxF,MAAA6G,eADiB5F,IACYR;QAAY,IAAA,CAGpCoG,cAAY;YACR+X,KAAAA;YAAOpK,MAAAA;QAAAA;QAAA3R,IAAAA;QAAA7C,CAAAA,CAAA6G,CAAAA,CAAAA,KAAAA,gBAAA7G,CAAAA,CAAAA,EAAAA,KAAA4e,UAAAA,CAIT/b,KAAA;YAAA,GAAI+b,OAAAA;YAAO3X,MAAQJ;QAAAA,GAAa7G,CAAAA,CAAAA,EAAAA,GAAA6G,cAAA7G,CAAAA,CAAAA,EAAAA,GAAA4e,SAAA5e,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EAAvCgB,KAAO6B;IAAAA;IAjBF7B,OAAAA;AAkBkC;AAG3C,SAASw8C,kBACPz9C,KAAAA,EACA6e,OAAAA,EACA/X,YAAAA,EAC2B;IACpB,OAAA;QACL,GAAG9G,KAAAA;QACH+E,MAAM;YACJ,GAAG/E,MAAM+E,IAAAA;YACT8Z,SAAS;gBAAC,GAAGA,OAAAA;gBAAS3X,MAAMJ;YAAAA;QAAY;IAE5C;AACF;AC7LO,MAAMi3C,qBAAqB,KACrBC,kBAAkB,KAClBC,mBAA8B;IAACC,IAAI;QAAC;YAACC,OAAO;YAAc9uC,WAAW;QAAO,CAAA;KAAA;AAAC,GAC7E+uC,eAAwC,CAAC,GCiBhDC,0LAAU78C,SAAAA,mJAAOC,MAAG,CAAA,CAAA;;WAAA,EAEZzB,CAAAA,QAAUA,MAAMs+C,QAAAA,IAAY,CAAC,CAAA;;AAAA,CAAA,EAIrCC,iMAAiB/8C,SAAAA,EAAOC,uJAAG,CAAA,CAAA;;;;;;AAAA,CAAA,EA2B3B+8C,iBAAiB,CAAC;OAAGnwC,MAAM,EAAE,EAAEowC,IAAAA,EAAM;CAAA;AAE3C,SAAAC,YAAA1+C,KAAAA,EAAA;IAAAC,MAAAA,KAAAC,+LAAAA,EAAA,CAAA,GACE,EAAAgD,MAAAA,EAAAA,GAAiBlD;IAAKO,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAAiD,SAAAA,CAIjB3C,KAAAi+C,eAAA/0C,GAAAA,CAAAk1C,CACC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,uBAAA,EAAqB;YAAA,eAAA,CAAA;YAAsBz7C;QAAAA,GAAay7C,GAAG,CAC7D,GAAC1+C,CAAAA,CAAAA,EAAAA,GAAAiD,QAAAjD,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAA,OAAAZ,CAAAA,CAAAA,EAAAA,KAAAM,KAAAA,CAHJM,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,QAAA,EAAgB;QAAA,UAAA;QAAa,UAAA;QAAe,YAAC;QAAS,OAAC;QACrDN,UAAAA;IAGH,CAAA,GAAQN,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,EAJRY;AAIQ;AAIL,SAAS+9C,wBAAwB5+C,KAAAA,EAAqC;IACrE,MAAA,EACJ6+C,WAAAA,EACA99C,KAAAA,EACA+9C,4BAAAA,EACAC,WAAAA,EACAC,cAAAA,EACA3U,QAAAA,EACA4U,aAAAA,EACAp7C,SAAAA,EACAquC,KAAAA,EACAhvC,MAAAA,EACAg8C,cAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,kBAAAA,EACAC,SAAAA,EAAAA,GACEv/C,OAEEK,qKAASC,YAAAA,KAET,EAAC8S,WAAWC,eAAAA,EAAe,GAAIvO,iBAC/B,EAACsO,SAAAA,EAAWlJ,KAAAA,EAAAA,GAASyL,QAAQ,GAC7B,CAACy6B,cAAcoP,eAAe,CAAA,GAAItvC,qNAAAA,EAAS,CAACkD,SAAS,GACrD,EAACzS,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAenB,wBAAwB,GAE7CggD,6NAAmBl6B,cAAAA,EAAY,MAAM;QACrC6qB,gBACF+O,aAAa;IAAA,GAEd;QAACA;QAAc/O,YAAY;KAAC;IAE/Bx/B,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACd,IAAIwC,UAAW,CAAA;QAET/H,MAAAA,SAAQqF,WAAW,MAAM;YAC7B8uC,gBAAgB,CAAA,CAAI;QAAA,GACnB,CAAC;QAEJ,OAAO,MAAM;YACX7uC,aAAatF,MAAK;QACpB;IAAA,GACC;QAAC+H;QAAW8+B,KAAK;KAAC;IAEfwN,MAAAA,uNAAan6B,cAAAA,EACjB,CAAChd,MAAM,EAACooC,WAAAA,EAAAA,KAAiB;QACjB7kC,MAAAA,0KAAcvE,iBAAAA,EAAegB,KAAK9E,GAAG,GACrCk8C,aAAad,gBAAgB/yC,aAC7B4a,UAAU,CAAC2jB,YAAYsV,YACvB5sC,WAAWs3B,YAAYsV,YACvBC,aAAajP,gBAAgBuB,MAAMxvC,MAAAA,GAAS,GAC5Cm9C,cAAcD,cAAcX,eAC5Ba,sBAAsBF,cAAcb;QAE1C,OAEI,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0NAAA,WAAA,EAAA;YAAA,UAAA;gBAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;oBACC,MAAMQ,cAAc,CAAA,IAAQ,CAAA,IAAQ31C,KAAAA;oBACpC,IAAIkC;oBACJ;oBACA,cAAc;oBACd;oBACA,YAAYzL,OAAOI,GAAAA,CAAI8H,KAAK/H,KAAK;oBACjC;oBACA,OAAO+H;gBAAK,CAAA;gBAGbs3C,eAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAgB,eAAA,EAAe,CAAA,CAAA;gBAE/BC,uBACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;oBAAI,SAAS;oBAAG,UAAU;oBAAG,UAAU;oBACtC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;wBAAK,OAAM;wBAAS,OAAK,CAAA;wBAAC,MAAM;wBAC9Bn/C,UAAAA,EAAE,2CAA2C;4BAACo/C,OAAO/B;wBAAgB,CAAA;oBACxE,CAAA;gBACF,CAAA;aAAA;QAAA,CAEJ;IAEJ,GACA;QAACa;QAAaxU;QAAU6H,MAAMxvC,MAAAA;QAAQQ;QAAQ7C;QAAQk/C;QAAWR;QAAaE;QAAet+C,CAAC;KAChG,GAEMq/C,+NAAqBr6B,UAAAA,EAAQ,IAC7Bq5B,iBAEA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;YAAK,OAAM;YAAS,WAAU;YAAS,QAAO;YAAO,SAAQ;YAC5D,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,YAAA,EAAU;gBAAA,OAAO;gBAChB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;oBAAI,UAAU;oBAAG,UAAU;oBAC1B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;wBAAK,OAAM;wBAAS,OAAK,CAAA;wBACvBr+C,UAAAA,EAAE,4CAA4C;oBACjD,CAAA;gBAAA,CACF;YACF,CAAA;QACF,CAAA,IAKD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;YAAK,OAAM;YAAS,WAAU;YAAS,QAAO;YAAO,SAAQ;YAC5D,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,YAAA,EAAA;gBAAU,OAAO;gBAChB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAI;oBAAA,UAAU;oBAAG,UAAU;oBAC1B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;wBAAK,OAAM;wBAAS,OAAK,CAAA;wBACvBm+C,UACGn+C,EADHm+C,+BACK,uDACA,qDADoD;oBAE5D,CAAA;gBACF,CAAA;YAAA,CACF;QACF,CAAA,GAED;QAACA;QAA8BE;QAAgBr+C,CAAC;KAAC,GAE9Cs/C,wNAAct6B,UAAAA,EAAQ,MAAM;QAChC,IAAI,CAACyqB,cACI,OAAA;QAGLrvC,IAAAA,OAEA,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;YAAK,OAAM;YAAS,WAAU;YAAS,QAAO;YAAO,SAAQ;YAC5D,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,6JAAA,EAAU;gBAAA,OAAO;gBAChB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,QAAA,EAAA;oBAAM,UAAU;oBAAG,UAAU;oBAAG,OAAO;oBACtC,UAAA;wBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,UAAA,EAAQ;4BAAA,IAAG;4BAAMJ,UAAAA,EAAE,sCAAsC;wBAAA,CAAE;wBAC5D,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;4BAAK,IAAG;4BACP,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EACC;gCAAA;gCACA,SAAQ;gCACR,QAAQ;oCAACI,OAAOA,MAAMI,OAAAA;gCAAAA;gCACtB,YAAY;oCAACmlB,MAAMA,CAAC,EAAC1f,QAAAA,EAAAA,GAAe,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA;4CAAMA;wCAAS,CAAA;gCAAA;4BAAA,CAAS;wBAEhE,CAAA;wBACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA;4BAAa;4BAAc,SAAS;4BAAM;wBAAiB,CAAA;qBAAA;gBAC9D,CAAA;YACF,CAAA;QAAA,CACF;QAIA,IAAA,CAAC/C,aAAaquC,MAAMxvC,MAAAA,KAAW,GAC1Bs9C,OAAAA;QAGT,IAAId,mBAAmB,aAAar7C,WAClC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACG,OAAM;YAAA,IAAI;YACT,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,aAAA;gBAAY;YAAA,CAAe;QAC9B,CAAA;QAIJ,IAAIq7C,mBAAmB,aAAar7C,WAC3B,OAAA;QAIT,MAAMmT,MAAM,GAAG9M,KAAK,CAAA,CAAA,EAAIkJ,SAAS,EAAA;QAEjC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACG,SAAQ;YAAA,UAAS;YAAS,QAAO;YAAO,UAAU8rC,mBAAmB,WAAW,MAAM;YACrF,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,gBACC;gBAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,cAAA,EAAA;oBACC,oBAAmB;oBACnB,WAAWG;oBACX,iBAAe,CAAA;oBACf,cAAcC;oBACd,YAAY;oBACZ;oBAEA,cAAcG;oBACd,6BAA2B,CAAA;oBAC3B,UAAU;oBACV,eAAe;oBACf,UAAU;oBACV;oBACA,YAAY,CAAA;gBAPPzoC,GAAAA,GAOa;YAAA,CAEtB;QACF,CAAA;IAAA,GAMD;QACD5D;QACArS;QACA0+C;QACAv1C;QACArG;QACAquC;QACAhvC;QACAg8C;QAAAA,sBAAAA;QAEAE;QACAM;QACAJ;QACAlP;KACD;IAGC,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,aACC;QAAA,eAAY;QACZ,UAAU/8B,mBAAmB6rC,mBAAmB,YAAY,WAAW;QAEtEe,UACH;IAAA,CAAA;AAEJ;ACjQO,SAASC,0BAA0BC,SAAAA,EAAyD;IACjG,kKAAOC,WAAAA,EAAQD,SAAS,EAAE12C,GAAAA,CAAK42C,CAEtB,QAAA,CAAA;YACL,GAFUA,MAAMz8C,KAAAA,IAASy8C,MAAMv8C,SAAAA;YAG/Bw8C,cAAc,CAAC,CAACD,MAAMv8C,SAAAA;YACtBykC,UAAU,CAAC,CAAC8X,MAAMz8C,KAAAA;QAAAA,CAAAA,CAErB;AACH;AAEgB28C,SAAAA,uBAAuBC,KAAAA,EAAkB9/C,UAAAA,EAAyC;IAChG,MAAM+/C,UAAUD,MAAMtC,EAAAA,CAAGz0C,GAAAA,CAAKy0C,CAAO,OAAA;QAEnC,IAAIA,GAAGwC,OAAAA,EACExC,OAAAA;QAGT,MAAMyC,YAAYC,4BAA4BlgD,YAAYw9C,GAAGC,KAAK;QAClE,OAAKwC,YAMDE,iBAAiBF,WAAW,UAAU,IACjC;YAAC,GAAGzC,EAAAA;YAAIwC,SAAS;QAAA,IAGtBC,UAAUG,QAAAA,KAAa,WAClB;YAAC,GAAG5C,EAAAA;YAAIwC,SAAS;QAAA,IAGnBxC,KAbEA;IAAAA,CAcV;IAEMuC,OAAAA,QAAQn9B,KAAAA,CAAM,CAAC/a,MAAM2B,QAAU3B,SAASi4C,MAAMtC,EAAAA,CAAGh0C,KAAK,CAAC,IAAIs2C,QAAQ;QAAC,GAAGA,KAAAA;QAAOtC,IAAIuC;IAAO;AAClG;AAEA,SAASG,4BAA4BG,QAAAA,EAAsB/jC,IAAAA,EAAsC;IACzFgkC,MAAAA,eAAeC,kJAAUC,UAAAA,CAAWlkC,IAAI;IAE9C,IAAI9I,UAAkC6sC;IACtC,KAAA,MAAWI,WAAWH,aAAc;QAClC,IAAI,CAAC9sC,SACH;QAGE,IAAA,OAAOitC,WAAY,UAAU;YACrBC,UAAAA,mBAAmBltC,SAASitC,OAAO;YAC7C;QAAA;QAIE,IAAA,CAAA,wJADoBE,eAAAA,EAAaF,OAAO,4JAAKG,iBAAAA,EAAeH,OAAO,CAAA,KAC/CjtC,QAAQ4sC,QAAAA,KAAa,SAC3C;QAGF,MAAM,CAACS,YAAYC,SAAS,CAAA,GAAIttC,QAAQnH,EAAAA,IAAM,CAAE,CAAA;QAChD,IAAIy0C,aAAa,CAACD,YAEhB;QAGE,IAAA,wJAACE,wBAAAA,EAAsBF,UAAU,GAAG;YAC5BA,UAAAA;YACV;QAAA;QAGF,MAAM,CAACG,SAASC,YAAY,CAAA,GAAIJ,WAAWK,EAAAA,IAAM,CAAE,CAAA;QACnD,IAAID,gBAAgB,CAACD,SAEnB;QAGQA,UAAAA;IAAAA;IAGLxtC,OAAAA;AACT;AAEA,SAASktC,mBAAmBl6C,IAAAA,EAAkB26C,SAAAA,EAA2C;IACvF,IAAI,CAAA,CAAE,YAAY36C,IAAAA,GAChB;IAGF,MAAMy5C,YAAYz5C,KAAK46C,MAAAA,CAAOpuC,IAAAA,CAAMyqC,CAAUA,QAAAA,MAAMx2C,IAAAA,KAASk6C,SAAS;IAC/DlB,OAAAA,YAAYA,UAAUz5C,IAAAA,GAAO0C,KAAAA;AACtC;AAEgBi3C,SAAAA,iBAAiB1C,KAAAA,EAAsC4D,MAAAA,EAAyB;IAC9F,IAAI7tC,UAAkCiqC,MAAMj3C,IAAAA;IAC5C,MAAOgN,SAAS;QAKd,IAJIA,QAAQvM,IAAAA,KAASo6C,UAIjB,CAAC7tC,QAAQhN,IAAAA,IAAQgN,QAAQ4sC,QAAAA,KAAaiB,QACjC,OAAA,CAAA;QAGT7tC,UAAUA,QAAQhN,IAAAA;IAAAA;IAGb,OAAA,CAAA;AACT;AAOA,SAAS86C,UAAUrrC,IAAAA,EAAoC;IACrD,OAAQA,KAAKzP,IAAAA,EAAI;QACf,KAAK;YAAU;gBACP,MAAA,EAACyU,IAAAA,EAAMC,KAAAA,EAAAA,GAASjF;gBAEtB,OAAQA,KAAK+W,EAAAA,EAAE;oBAAA,gBAAA;oBAEb,KAAK;wBAEC/R,OAAAA,KAAKzU,IAAAA,KAAS,qBAAqByU,KAAKhU,IAAAA,KAAS,WAAW,CAACgU,KAAKjC,IAAAA,GAChEkC,MAAM1U,IAAAA,KAAS,WAAW,OAAO0U,MAAM9a,KAAAA,IAAU,WAAiB,OAC3DyN,aAAAA,GAAAA,IAAAA,IAAI;4BAACqN,MAAM9a,KAAK;yBAAC,IAI1B8a,MAAM1U,IAAAA,KAAS,qBAAqB0U,MAAMjU,IAAAA,KAAS,WAAW,CAACiU,MAAMlC,IAAAA,GACnEiC,KAAKzU,IAAAA,KAAS,WAAW,OAAOyU,KAAK7a,KAAAA,IAAU,WAAiB,OAC7D,aAAA,GAAA,IAAIyN,IAAI;4BAACoN,KAAK7a,KAAK;yBAAC,IAItB;oBAAA,gBAAA;oBAIT,KAAK;wBAAM;4BAEL6a,IAAAA,KAAKzU,IAAAA,KAAS,qBAAqByU,KAAKhU,IAAAA,KAAS,WAAWgU,KAAKjC,IAAAA,IAEjEkC,MAAM1U,IAAAA,KAAS,QAAgB,CAAA,OAAA;4BAE7B+6C,MAAAA,QAAAA,aAAAA,GAAAA,IAAY1zC,IAAY;4BAEnB6C,KAAAA,MAAAA,WAAWwK,MAAM0B,QAAAA,CAAU;gCAEhClM,IAAAA,QAAQ8wC,OAAAA,IAER9wC,QAAQtQ,KAAAA,CAAMoG,IAAAA,KAAS,WAEvB,OAAOkK,QAAQtQ,KAAAA,CAAMA,KAAAA,IAAU,SAAiB,CAAA,OAAA;gCAE9C4d,MAAAA,GAAAA,CAAItN,QAAQtQ,KAAAA,CAAMA,KAAK;4BAAA;4BAI3BmhD,OAAAA,MAAMjW,IAAAA,GAAaiW,QAEhB;wBAAA;oBAGT;wBACS,OAAA;gBAAA;YAEX;QAAA,4DAAA;QAIF,KAAK;YACID,OAAAA,UAAUrrC,KAAK+C,IAAI;QAAA,sCAAA;QAAA,wEAAA;QAAA,4DAAA;QAAA,kCAAA;QAAA,4EAAA;QAQ5B,KAAK;YAAM;gBACHiC,MAAAA,OAAOqmC,UAAUrrC,KAAKgF,IAAI;gBAC5B,IAAA,CAACA,KAAa,CAAA,OAAA;gBAEZC,MAAAA,QAAQomC,UAAUrrC,KAAKiF,KAAK;gBAC7BA,OAAAA,QAAAA,aAAAA,GAAAA,IAEMrN,IAAI,CAAC;uBAAGoN,MAAM;uBAAGC,KAAK;iBAAC,IAFf;YAAA;QAAA,kCAAA;QAAA,yEAAA;QAAA,2EAAA;QAQrB,KAAK;YAAO;gBACJD,MAAAA,OAAOqmC,UAAUrrC,KAAKgF,IAAI,GAC1BC,QAAQomC,UAAUrrC,KAAKiF,KAAK;gBAElC,OAAI,CAACD,QAAQ,CAACC,QAAc,OAAA,aAAA,GAAA,IACjBrN,IAAI,CAAC;uBAAIoN,QAAQ,CAAK,CAAA,EAAA;uBAAIC,SAAS,CAAG,CAAA;iBAAC;YAAA;QAGpD;YACS,OAAA;IAAA;AAGb;AAEO,SAASumC,wBACdp4C,OAAAA,EACAvE,SAAkC,CAAA,CAAA,EACjB;IACb,IAAA;QACIy8C,MAAAA,QAAQD,WAAUj9B,oJAAAA,EAAMhb,SAAQ;YAACvE;QAAAA,CAAO,CAAC;QAC/C,OAAKy8C,QAEE5zC,MAAMC,IAAAA,CAAK2zC,KAAK,EAAExzC,IAAAA,KAFN;IAAA,EAAA,OAGb;QAEC,OAAA;IAAA;AAEX;AC5OA,MAAM2zC,8BAA8B;IAAC;IAAO;IAAS;IAAc;IAAc,MAAM;CAAA;AAGvF,SAASC,eAAe3hD,UAAAA,EAAwBsc,IAAAA,EAAgBslC,SAAkB,CAAA,CAAA,EAAe;IAC/F,MAAM,CAACC,MAAM,GAAGC,IAAI,CAAA,GAAIxlC;IAExB,IAAI,CAAA,CAAE,YAAYtc,UAAAA,GACT,OAAA;IAGT,MAAM+hD,cAAc/hD,WAAWohD,MAAAA,CAAOpuC,IAAAA,CAAMyqC,CAAUA,QAAAA,MAAMx2C,IAAAA,KAAS46C,IAAI;IACzE,IAAI,CAACE,aAAa;QAChB,IAAI,CAACL,4BAA4B30B,QAAAA,CAAS80B,IAAI,GAAG;YAC/C,MAAMnhD,eAAe,CAAA,4DAAA,EAA+DmhD,IAAI,CAAA,kBAAA,EAAqB7hD,WAAWiH,IAAI,CAAA,uBAAA,EAA0BjH,WAAWohD,MAAAA,CAAOr4C,GAAAA,CAAK00C,CAAAA,QAAUA,MAAMx2C,IAAI,EAAEuB,IAAAA,CAAK,IAAI,CAAC,EAAA;YACzMo5C,IAAAA,QACI,MAAA,IAAIr9C,MAAM7D,YAAY;YAG5BokB,QAAQrK,IAAAA,CAAK/Z,YAAY;QAAA;QAGtB,OAAA;IAAA;IAGT,IAAI,QAAQqhD,YAAYv7C,IAAAA,IAAQu7C,YAAYv7C,IAAAA,CAAKS,IAAAA,KAAS,aAAa;QAC/D+6C,MAAAA,WAAWD,YAAYv7C,IAAAA,CAAK06C,EAAAA;QAClC,OAAO,GAAGW,IAAI,CAAA,GAAA,EAAMG,SAASj5C,GAAAA,CAAKi4C,CAAAA,UAAYW,eAAeX,SAASc,IAAI,CAAC,EAAEt5C,IAAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA;IAAA;IAGxF,MAAMy5C,aAAaH,KAAK9/C,MAAAA,GAAS,KAAK2/C,eAAeI,YAAYv7C,IAAAA,EAAMs7C,IAAI,GACrEI,cAAcD,aAAa,CAAA,CAAA,EAAIA,UAAU,CAAA,CAAA,CAAA,GAAM;IACrD,OAAOH,KAAK9/C,MAAAA,GAAS,IAAI,GAAG6/C,IAAI,GAAGK,WAAW,EAAA,GAAKL;AACrD;AAEO,SAASM,sBACdniD,UAAAA,EACA+/C,OAAAA,EACA6B,SAAkB,CAAA,CAAA,EACV;IACR,OAAO7B,QACJh3C,GAAAA,CAAKq5C,CAAaT,WAAAA,eAAe3hD,YAAYoiD,SAAS3E,KAAAA,CAAM1mC,KAAAA,CAAM,GAAG,GAAG6qC,MAAM,CAAC,EAC/Ep5C,IAAAA,CAAK,IAAI;AACd;ACGA,MAAM65C,kKAAMC,YAAAA,EAAgC;IAAClyB,SAAS;AAAG,CAAC;AAEnD,SAASmyB,kBAAkBpkC,OAAAA,EAA4D;IACtF,MAAA,EACJ2W,MAAAA,EACAn1B,MAAAA,EACAoO,IAAAA,EACAsxC,KAAAA,EACAv6C,MAAAA,EACAuE,QAAAA,OAAAA,EACAm5C,WAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAC,cAAAA,EAAAA,GACExkC,SACEykC,SAAS70C,KAAKyvC,EAAAA,EACdqF,qBAAqB90C,MAAM80C,oBAK3BC,2JAAUC,QAAAA,EAAM,IACbjuB,OAAO7nB,MAAAA,CAAO,CAAA,EAAA,EAAK5D,OAAM,CAAA,CAAA,CAAA,EAAKvE,QAAQ;YAC3Ck+C,QAAQ;gBAAC;gBAAW;gBAAY,WAAW;aAAA;YAC3CC,eAAe,CAAA;YACfzX,YAAY;QAAA,CACb,CACF,EAAEnhC,IAAAA,CACD64C,4JAAAA,EAAS,CAACnnB,IAAI1e,IACIA,MAAM,KACP0e,GAAGv1B,IAAAA,KAAS,6JAGlB28C,aAAAA,EACL,IACE,IAAI5+C,MACFw3B,GAAGv1B,IAAAA,KAAS,cACR,+CACA,CAAA,yCAAA,EAA4Cu1B,GAAGv1B,IAAI,CAAA,CAAA,CACzD,CACJ,qJAEK6F,KAAAA,EAAG0vB,EAAE,CACb,mJACDqnB,SAAAA,CACF,CAAA,IAEM,CAACC,UAAUC,qBAAqB,CAAA,oJAAIC,YAAAA,EAAUT,SAAU/mB,CAAOA,KAAAA,GAAGv1B,IAAAA,KAAS,SAAS,GAEpFg9C,SAASr/B,KAAKC,SAAAA,CAAU;QAAC/a,QAAAA;QAAQg2C;QAAOv6C;QAAQ09C;QAAaz0C;QAAM00C;IAAAA,CAAgB;IAElF/6B,wJAAAA,QAAAA,EACL27B,SAASh5C,IAAAA,kJAAKo5C,OAAAA,EAAK,CAAC,CAAC,GACrBH,sBAAsBj5C,IAAAA,CAAK8C,gKAAAA,EAAa,kJAAMu2C,iBAAAA,EAAgB;QAAC/H,SAAS,CAAA;QAAMC,UAAU,CAAA;IAAA,CAAK,CAAC,CAChG,EAAEvxC,IAAAA,EACAs5C,2MAAAA,EAAwB7yC,CAAAA,QAAAA,CAGH2xC,mKACfp2C,KAAAA,EAAGo2C,eAAe,IAClB3tB,OAAOlpB,UAAAA,CAAWoB,KAAAA,CAAM,CAAA,gBAAA,EAAmB3D,OAAM,CAAA,UAAA,CAAA,EAAcvE,MAAM,CAAA,EAGvDuF,IAAAA,kJAChB64C,WAAAA,EAAUU,CAAwB,cAAA;YAC1BrC,MAAAA,oKAAQsC,qBAAAA,EAAmBlkD,QAAQ8iD,mBAAmB,CAAA,CAAE,EAAEp5C,MAAAA,CAAQ7C,CAAAA,OAClEo9C,UAAU72B,QAAAA,CAASvmB,KAAKS,IAAI,IAAA,CAI9Bk7C,sBAAsB37C,MAAMuH,KAAKyvC,EAAAA,EAAI,CAAA,CAAI,GAClC,CAAA,CAAA,IAEF,CAAA,CACR,GAEKsG,qKAASC,eAAAA,EAAaxC,OAAOzsB,QAAQ;gBACzCzrB,QAAAA;gBACAvE;gBACAk/C,UAAUrB;gBACVsB,UAAUvB;YAAAA,CACX,GAEKwB,UAAUA,IAcPJ,OAba;oBAClBr4C,OAAO+2C,eAAe;oBACtBjB;gBAAAA,GAGoB;oBACpB4C,+BAA+BtB;oBAC/BuB,UAAU;wBAAC,CAAA,oBAAA,EAAuB5B,cAAc,eAAe,MAAM,EAAE;qBAAA;oBACvEnD;oBACAgF,iBAAiB,CAAA;oBACjBt2C,MAAM60C;gBAAAA,CAGgC,EAAEv4C,IAAAA,CACxCtB,uJAAAA,EAAKixB,CAAAA,SAAAA,gDAAAA;oBAEHA,OAAOsqB,IAAAA,CAAKv7C,GAAAA,CAAI,CAAC,EAACw7C,GAAAA,EAAAA,GAASA,GAAG;YAKpC,OAAIzzC,MAAMtK,IAAAA,KAAS,cAAcsK,MAAM06B,UAAAA,KAAe,2JAI7C7gC,QAAAA,EAAM,IAAI,EAAEN,IAAAA,kJAAK64C,WAAAA,EAASgB,OAAO,CAAC,IAEpCA,QAAQ;QAChB,CAAA,CACH,CACD,GACD7B,IAAImB,MAAM,OACVz6C,mJAAAA,EAAI,CAAC,EAACy7C,SAAAA,EAAWpkD,KAAAA,EAAAA,GAAAA,CAAY;YAACokD;YAAW/E,WAAWr/C;QAAAA,CAAAA,CAAO,CAC7D;AACF;ACxHA,MAAMqkD,sBAAyC;IAC7CpkD,OAAO;IACP8C,WAAW,CAAA;IACXuhD,mBAAmB,CAAA;IACnBF,WAAW,CAAA;IACXhT,OAAO,CAAA,CAAA;AACT;AAUO,SAASmT,gBAAgBrQ,IAAAA,EAAqD;IAC7E,MAAA,EAACjrC,QAAQu7C,YAAAA,EAAc9/C,QAAQ+/C,UAAAA,EAAYC,SAAAA,EAAWtC,WAAAA,EAAa3tB,UAAAA,EAAAA,GAAcyf,MACjFxf,aAASxnB,oKAAAA,EAAU;QACvB,2JAAGC,gCAAAA;QACHsnB,YAAYA,sKAActnB,gCAAAA,CAA8BsnB,UAAAA;IAAAA,CACzD,GACK,EAACmvB,UAAUrB,cAAAA,EAAAA,+JAAkBoC,eAAAA,CAAejB,GAAAA,MAAAA,EAC5CnkD,qKAASC,YAAAA,CAAU,IACnB8iD,4KAAgBsC,yBAAAA,CAAuB,IAGvCC,+NAAqBhgC,UAAAA,EACzB,IAAMw8B,wBAAwBmD,cAAcC,UAAU,GACtD;QAACD;QAAcC,UAAU;KAC3B,GAEM,CAACK,UAAUxG,OAAO,CAAA,6MAAIz5B,UAAAA,EAAQ,oLAAMkgC,qBAAAA,KAAsB,CAAE,CAAA,GAC5D,CAACC,kBAAkBC,cAAc,CAAA,4MAAIpgC,WAAAA,EAAQ,oLAAMkgC,qBAAAA,CAAmB,IAAG,CAAA,CAAE,GAE3EG,0NAAgBrgC,UAAAA,EAAQ,MAAM;QAClC,MAAMsgC,wBAAwB;YAC5BzwB;YACAzrB,QAAQu7C;YACRvF,OAAOhC;YACPv4C,QAAQ+/C;YACRllD;YACA6iD,aAAaA,eAAe;YAC5Bz0C,MAAM+2C,aAAavH;YACnBkF,iBAAiBwC;YACjBvC;YACAC;QAAAA,GAGI6C,eAAejD,kBAAkBgD,qBAAqB,EAAEl7C,IAAAA,+JAC5DQ,cAAAA,EAAY;YAACC,UAAU,CAAA;YAAMC,YAAY;QAAA,CAAE,CAC7C,GAGM06C,YAAYL,iBAAiB/6C,IAAAA,+JACjCq7C,iBAAAA,EAAeF,YAAY,GAC3Bn8C,uKAAAA,EAAO,CAAC,CAAA,EAAG2wB,MAAM,CAAA,GAAMA,QAAQylB,UAAUz9C,WAAWq7C,kBAAkB,GAAA,qDAAA;sKAEtEoG,OAAAA,EAAK,CAAC,iKACNP,WAAAA,EAAS,qJACPrpB,SAAAA,mJACExtB,KAAAA,EAAG;gBAAC7F,MAAM;YAAwB,CAAA,GAClC+7C,kBAAkB;gBAAC,GAAGgD,qBAAAA;gBAAuBlG,OAAO/B;YAAgB,CAAA,EAAEjzC,IAAAA,+JACpEtB,MAAAA,EAAKixB,CAAY,WAAA,CAAA;oBAACxzB,MAAM;oBAAmBwzB,QAAAA;gBAAAA,CAAAA,CAAQ,CACrD,CACF,CACF,iKACAopB,QAAAA,CAAM;QAIR,wJAAO17B,QAAAA,EACL89B,aAAan7C,IAAAA,+JACXtB,MAAAA,EAAKixB,CAAY,WAAA,CAAA;gBACfxzB,MAAM;gBACNwzB,QAAAA;YAAAA,CAAAA,CACA,GAAA,mFAAA;QAEF2rB,0KAAAA,EAAUF,SAAS,IAErBA,SACF,EAAEp7C,IAAAA,+JACAqC,aAAAA,EAAW,CAAC0pB,KAAcwvB,2JACjB/rB,SAAAA,mJACLxtB,KAAAA,EAAG;gBAAC7F,MAAM;gBAAkBnG,OAAOwlD,UAAUzvB,GAAG;YAAA,CAAE,GAClD1O,yJAAAA,EAAMtd,6JAAAA,EAAUkH,QAAQ,QAAQ,GAAG4zC,QAAQ,EAAE76C,IAAAA,+JAC3Co5C,OAAAA,EAAK,CAAC,iKACNP,WAAAA,EAAS,IAAM0C,OAAO,CACxB,CACF,CACD,iKACDE,OAAAA,EAAK,CAACl6B,MAAM9a,UAAU;YACpB,IAAIA,MAAMtK,IAAAA,KAAS,SACV,OAAA;gBACL,GAAGolB,IAAAA;gBACHvrB,OAAOyQ,MAAMzQ,KAAAA;YACf;YAEF,IAAIyQ,MAAMtK,IAAAA,KAAS,UACV,OAAA;gBACL,GAAGolB,IAAAA;gBACHvrB,OAAO;gBACPmkD,WAAW1zC,MAAMkpB,MAAAA,CAAOwqB,SAAAA;gBACxBrhD,WAAW,CAAA;gBACXquC,OAAOgO,0BAA0B1uC,MAAMkpB,MAAAA,CAAOylB,SAAS;gBACvDiF,mBAAmB,CAAA;YACrB;YAEF,IAAI5zC,MAAMtK,IAAAA,KAAS,gBACV,OAAA;gBACL,GAAGolB,IAAAA;gBACHvrB,OAAO;gBACPqkD,mBAAmB,CAAA;YACrB;YAEI,MAAA,IAAIngD,MAAM,YAAY;QAC9B,GAAGkgD,mBAAmB,CACxB;IACC,GAAA;QACD3vB;QACA8vB;QACAC;QACAllD;QACA6iD;QACAsC;QACAG;QACAvC;QACAC;QACAyC;QACAF,QAAQ;KACT,GAEK,EAAC7kD,KAAAA,EAAOmxC,KAAAA,EAAOruC,SAAAA,EAAWqhD,SAAAA,EAAWE,iBAAAA,EAAAA,oJAAqBrhD,gBAAAA,EAC9DiiD,eACAb,mBACF;IAEO,OAAA;QACLpkD;QACAq+C;QACAv7C;QACAquC;QACAgT;QACAa;QACAX;IACF;AACF;AAGA,MAAMqB,wBAAwB;AAC9B,SAASF,UAAUG,MAAAA,EAAwB;IACzC,OAAIA,kBAAkBzhD,QACbyhD,SAEL,OAAOA,UAAW,YAAYA,WAAW,OACvC,aAAaA,UAAU,OAAOA,OAAOvlD,OAAAA,IAAY,WAC5C,IAAI8D,MAAM,GAAGyhD,OAAOvlD,OAAO,CAAA,CAAA,EAAIslD,qBAAqB,EAAE,IAExD,IAAIxhD,MAAM,GAAGq/B,OAAOoiB,MAAM,CAAC,CAAA,CAAA,EAAID,qBAAqB,EAAE,IAExD,IAAIxhD,MAAM,GAAGq/B,OAAOoiB,MAAM,CAAC,CAAA,CAAA,EAAID,qBAAqB,EAAE;AAC/D;AC/KA,MAAME,qLAASvZ,YAAAA,CAAAA;;;;;;;AAAAA,CAAAA,EASTwZ,qLAASxZ,YAAAA,CAAAA;;;;;;;;;;AAAAA,CAAAA,EAYTyZ,sMAAsBrlD,SAAAA,EAAOslD,iKAAW,CAAA,CAAA;aAAA,EAC/BH,MAAM,CAAA;AAAA,CAAA,EAGfI,oBAAoBvlD,yLAAAA,qJAAOslD,cAAW,CAAA,CAAA;aAAA,EAC7BH,MAAM,CAAA;;AAAA,CAAA,EAIfK,0MAA2BxlD,UAAAA,qJAAOslD,cAAW,CAAA,CAAA;;IAAA,EAE7CH,MAAM,CAAA;IAAA,EACNC,MAAM,CAAA;;AAAA,CAAA,EAQCK,6NAAmBhiC,OAAAA,EAAK,SAA0BjlB,KAAAA,EAA8B;IACrF,MAAA,EAAC6+C,WAAAA,EAAaxU,QAAAA,EAAUtlC,MAAAA,KAAAA,EAAM+iB,OAAAA,EAAS09B,WAAW0B,YAAAA,EAAchkD,MAAAA,EAAAA,GAAUlD,OAC1EK,qKAASC,YAAAA,KAET,EAAC6mD,cAAAA,EAAgBtoC,OAAAA,EAAAA,GAAW9Z,OAC5B,EAACwwB,UAAAA,EAAYxrB,QAAAA,OAAAA,EAAAA,GAAU8U,SACvBrZ,SAAS4hD,iBAAiBvoC,QAAQrZ,MAAAA,IAAU44C,YAAY,GACxDz7B,qNAAWgD,UAAAA,EAAQ,MAAM;QACvB0hC,MAAAA,cAAclF,wBAAwBp4C,SAAQvE,MAAM;QAC1D,OAAI6hD,aAAa3kD,WAAW,IAAU2kD,WAAAA,CAAY,CAAC,CAAA,GAC5C;IAAA,GACN;QAACt9C;QAAQvE,MAAM;KAAC,GAEb+5C,YAAY4H,gBAAgB5H,cAAc,CAAA,GAE1C,EAAC5+C,CAAAA,EAAAA,GAAKC,6KAAAA,EAAenB,wBAAwB,GAC7C,EAAC4B,KAAAA,EAAAA,+JAASkW,cAAAA,EAAYxS,KAAI,GAE1B,CAACm+C,aAAaoE,cAAc,CAAA,6MAAIp3C,WAAAA,EAAiB,EAAE,GACnD,CAACq3C,kBAAkBC,mBAAmB,CAAA,6MAAIt3C,WAAAA,EAAiB,EAAE,GAC7D,CAACovC,oBAAoBmI,qBAAqB,CAAA,OAAIv3C,iNAAAA,EAAkC,IAAI,GAEpFw3C,qBACJ/kC,YAAYukC,eACR3G,uBAAuB2G,cAAc7mD,OAAOI,GAAAA,CAAIkiB,QAAQ,CAAQ,IAChEukC,cAEA1B,wKAAY1/C,YAAAA,EAAU4hD,kBAAkB,GAExC,EAAC3mD,KAAAA,EAAOqkD,iBAAAA,EAAmBvhD,SAAAA,EAAWquC,KAAAA,EAAOgT,SAAAA,EAAWa,cAAAA,EAAgB3G,OAAAA,EAAAA,GAC5EiG,gBAAgB;QACd9vB;QACAxrB,QAAAA;QACAvE;QACA09C,aAAaA,aAAayE,KAAK;QAC/BnC;IAAAA,CACD,GAEGoC,qKAAoBC,qBAAAA,EACvBC,CAAAA,SACQA,OAAO/8C,IAAAA,kJACZtB,MAAAA,EAAK+H,CAAAA,QAAUA,MAAMuhB,MAAAA,CAAOjyB,KAAK,oJACjC+8B,MAAAA,EAAI2pB,mBAAmB,oJACvBO,WAAAA,EAAUjnD,CAAWA,QAAAA,UAAU,sJAAKiM,KAAAA,EAAG,EAAE,qJAAI1B,QAAAA,EAAM,GAAG,CAAE,oJACxDwyB,MAAAA,EAAIypB,cAAc,CACpB,CAEJ,GAEMU,oBAAoBziC,wNAAAA,EAAY,MAAM;QAC3B,eAAA,EAAE,GACjBiiC,oBAAoB,EAAE;IAAA,GACrB,CAAE,CAAA,GAECS,gOAAsB1iC,cAAAA,EACzB/T,CAAiD,YAAA;QAC5CA,QAAMwF,GAAAA,KAAQ,YAChBgxC,kBAAkB;IAAA,GAGtB;QAACA,iBAAiB;KACpB,GAEM,CAACE,qBAAqBC,sBAAsB,CAAA,6MAAIj4C,WAAAA,CAAwB;IAE9EU,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACV,CAACs3C,uBAAuB,CAACrkD,aAC3BskD,uBAAuBrgC,OAAO;IAAA,GAE/B;QAACogC;QAAqBrkD;QAAWikB,OAAO;KAAC,6MAE5ClX,YAAAA,EAAU,MAAM;QAGdo3C,kBAAAA,GACAG,uBAAuB;IAAA,GACtB;QAACrgC;QAASkgC,iBAAiB;KAAC;IAE/B,MAAM9I,kBAAiCv5B,mNAAAA,EAAQ,IACzC9hB,aAAaqkD,wBAAwBpgC,UAChC,YAELo9B,YACK,WAGF,WACN;QAACgD;QAAqBhD;QAAWrhD;QAAWikB,OAAO;KAAC,GAEjDsgC,iBAAgBziC,mNAAAA,EAAQ,IACxBu5B,mBAAmB,YACd2H,sBAELU,oBAAoBrI,mBAAmB,WAClC6H,uKAEF9zB,aAAAA,EACN;QAACisB;QAAgBqI,gBAAgB;KAAC;IAErC,OAEI,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0NAAA,WAAA,EAAA;QAAA,UAAA;YAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;gBAAI,UAAU;gBAAG,eAAe;gBAC/B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,YAAA,EAAA;oBACC,cAAY5mD,EAAE,kDAAkD;oBAChE,cAAa;oBACb,QAAQ,CAAA;oBACR,aAAa6N,CAAQ00C,CAAAA;oBACrB,UAAU10C,CAAAA,CAAQzN;oBAClB,UAAU;wBAAC;wBAAG;wBAAG,CAAC;qBAAA;oBAClB,MAAMqnD;oBACN,WACElJ,mBAAmB,YAAY,CAACqI,mBAAmBP,2BAA2B;oBAEhF,UAAUY;oBACV,SAASI;oBACT,WAAWC;oBACX,SAAS;oBACT,aAAatnD,EAAE,mDAAmD;oBAClE,QAAQ;oBACR,KAAK8mD;oBACL,YAAY,CAAA;oBACZ,OAAOF;gBAAAA,CAAiB;YAE5B,CAAA;YACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,yBAAA;gBACC;gBACA;gBACA,8BAA8B,CAAC,CAAC5kC;gBAChC,aAAauvB,MAAMxvC,MAAAA,KAAWs7C;gBAC9B,gBAAgBxvC,CAAAA,CAAQ00C;gBACxB;gBACA,eAAekC;gBACf;gBACA;gBAEA;gBACA;gBACA,cAAcW;gBACd;gBACA,WAAW1kD;gBACX;gBACA;YAAA,GAPKymB,OAOgB;SAAA;IAAA,CAEzB;AAEJ,CAAC,GC3LYnO,cAAasL,gNAAAA,EACxB1kB,CAAA,OAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAC,EAAA6Z,YAAAA,EAAA7P,KAAAA,EAAAm+C,uBAAAxnD,EAAAA,EAAAugB,gBAAAngB,EAAAA,EAAAkgB,WAAAjgB,EAAAA,EAAAonD,SAAAA,EAAAC,YAAAA,EAAAlnD,KAAAA,EAAAA,GAAAd;IASiBuC,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CANhBiC,KAAAjC,OAA0B+I,KAAAA,IAAAA,EAAAA,GAA1B/I,IAA0BZ,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAA1B,MAAAooD,wBAAAvlD;IAA0BC,IAAAA;IAAA9C,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CAC1B8B,KAAA9B,OAAmB2I,KAAAA,IAAAA,EAAAA,GAAnB3I,IAAmBhB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IAAnB,MAAAmhB,iBAAAre;IAAmBoB,IAAAA;IAAAlE,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CACnBiD,KAAAjD,OAAc0I,KAAAA,IAAAA,EAAAA,GAAd1I,IAAcjB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,CAAA,CAAA;IAAd,MAAAkhB,YAAAhd,IAKA,EAAAurB,QAAAA,EAAA,GAAmBvE,oBACnB,EAAA/X,SAAAA,EAAAU,MAAAA,EAAAA,GAA4B6B,QAAQ,GAEpCwE,WAAiBrG,UAAM,CAAKV,YAAkB,CAAA,IAAA;IAAA,IAAAhN,IAAAC;IAAApG,CAAAA,CAAAA,EAAAA,KAAAqoD,YAAAA,CAI/BjiD,KAAAC,CAAAA,QAAA;QAAC,MAAA,EAAApD,QAAApC,KAAAA,EAAAA,GAAAwF;QACVgiD,UAAUxnD,KAAK;IAAC,GACjBb,CAAAA,CAAAA,EAAAA,GAAAqoD,WAAAroD,CAAAA,CAAAA,EAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,CAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAAA,EAAAA,KAAAsoD,eAAAA,CACajiD,KAAAmI,CAAA,SAAA;QACZ85C,aAAa95C,IAAI;IAAC,GACnBxO,CAAAA,CAAAA,EAAAA,GAAAsoD,cAAAtoD,CAAAA,CAAAA,EAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,CAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAAoG,EAAAA,CAAAA,KAAAA,MAAApG,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CANIE,MAAA;QAAA8hD,WACMjiD;QAEVkiD,cACajiD;IAAAA,GAGfrG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA,EAPDmG,KAAOI;IADT,MAAA4e,iBAAuBhf;IASMM,IAAAA;IAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAAmlB,kBAAAnlB,CAAAA,CAAAooD,EAAAA,CAAAA,KAAAA,yBAAApoD,CAAAA,CAAAmhB,EAAAA,CAAAA,KAAAA,kBAAAnhB,CAAAA,CAAAA,GAAAA,KAAAkhB,YAAAA,CAMrBza,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA;QAC4B2hD,2BAAoB;QAC/BjjC;QACAhE;QACLD;IAAAA,CACX,GAAAlhB,CAAAA,CAAAA,GAAAA,GAAAmlB,gBAAAnlB,CAAAA,CAAAA,GAAAA,GAAAooD,uBAAApoD,CAAAA,CAAAA,GAAAA,GAAAmhB,gBAAAnhB,CAAAA,CAAAA,GAAAA,GAAAkhB,WAAAlhB,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA7I,CAAAA,CAAAA,GAAAA,KAAAyvB,SAAA7V,UAAAA,IAAA5Z,CAAAA,CAAAA,GAAAA,KAAAiK,QAAAA,CAGFpB,MAAA4mB,SAAQ7V,UAAAA,IACR3P,QAAS,KACP,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACK9F;QAAAA,IAAOA;QACH,WAAA;QACFqnC,yJAAAA,gBAAAA;QACD,MAAA;QACS,cAAA;YAAAlhC,SAAU;QAAA;IAE3B,CAAA,GAAAtK,CAAAA,CAAA,EAAA,CAAA,GAAAyvB,SAAA7V,UAAAA,EAAA5Z,CAAAA,CAAAA,GAAAA,GAAAiK,OAAAjK,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAA,OAAAnJ,CAAAA,CAAA8Z,EAAAA,CAAAA,KAAAA,gBAAA9Z,CAAAA,CAAA,EAAA,CAAA,KAAAyG,OAAAzG,CAAAA,CAAA6I,EAAAA,CAAAA,KAAAA,OAAA7I,CAAAA,CAAA,EAAA,CAAA,KAAAka,YAAAla,CAAAA,CAAAA,GAAAA,KAAAoB,QAAAA,CApBP+H,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,4BAAA,EACC;QAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAACo/C,cAEG;YAAA,SAAA9hD;YAQA,YAAAoC;YAWYiR;YACJI;YACH9Y;QAEX,CAAA;IAAA,CAAA,GAA4BpB,CAAAA,CAAAA,GAAAA,GAAA8Z,cAAA9Z,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAka,UAAAla,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA,EA1B5BmJ;AA0B4B,CAGlC;AAEAuQ,WAAWjE,WAAAA,GAAc;ACjFlB,SAAS+yC,wBAAwBzoD,KAAAA,EAA6C;IAC7E,MAAA,EAAC0oD,GAAAA,EAAK3mD,KAAAA,EAAAA,GAAS/B,OAEf,EAAC2oD,cAAAA,EAAgBC,iBAAAA,EAAAA,GAAqB7mD,MAAM8c,OAAAA,CAAQgqC,IAAAA,IAAQ,CAE5DC,GAAAA,gBAAgBvjC,wNAAAA,EACnB7a,CAAoC,MAAA;QACnC,IAAIA,EAAEq+C,QAAAA,IAAYJ,mBAAmB,QAAQA,mBAAmB/+C,KAAAA,GAAW;YACnEo/C,MAAAA,kBAAkBN,IAAIx+C,KAAAA,EACtB++C,aAAaD,kBAAkBL,iBAAiBK,kBAAkBL,gBAClEO,aAAaF,kBAAkBL,iBAAiBA,iBAAiBK,iBAEjEG,yBAAyBpnD,MAC5BqnD,WAAAA,CAAY,EACZC,QAAAA,CAAS1kD,KAAAA,CAAMskD,YAAYC,aAAa,CAAC,EACzCz/C,GAAAA,CAAI,CAAC,EAAClE,EAAAA,EAAAA,GAAQA,EAAE,GAEb+jD,sBAAsBvnD,MAAMwnD,mBAAAA,GAAsBC,IAAAA,CAAK//C,GAAAA,CAAI,CAAC,EAAClE,IAAAA,IAAAA,EAAAA,GAAQA,IAAE;YACvEkkD,MAAAA,eAAAA,CAAgB,IACpB,CAAC;uBAAGN,wBAAwB;uBAAGG,mBAAmB;iBAAA,CAAE9lC,MAAAA,CAClD,CAACkmC,kBAAkBC,QAAAA,CAAW;wBAAC,GAAGD,gBAAAA;wBAAkB,CAACC,KAAK,CAAA,EAAG,CAAA;oBAAA,CAAA,GAC7D,CACF,CAAA,CACF;QAAA,OAAA,IACSf,mBAAmB;YACtBgB,MAAAA,yBAAyBlB,IAAImB,aAAAA,CAAc;YAG/CjB,kBAFEgB,yBAEgB,OAGAlB,IAAIx+C,KAHA,GAMxBw+C,IAAIoB,cAAAA,CAAe;QAAA;IAAA,GAGvB;QAACnB;QAAgBD;QAAKE;QAAmB7mD,KAAK;KAChD;IAGE,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,WAAA,EAAA;QACC,OAAO;YAACgoD,aAAa;QAAC;QACtB,SAAS/pD,MAAM0oD,GAAAA,CAAImB,aAAAA,CAAc;QACjC,UAAU,CAAC7pD,MAAM0oD,GAAAA,CAAIsB,YAAAA,CAAa;QAIlC,UAAU,IAAM;QAChB,SAASlB;IAAAA;AAGf;AC/BO,MAAMmB,8BAA8BA,MAAA;IACzC9gD,MAAAA,oNAAgB1E,aAAAA,gJAAAylD,2BAAmC;IAAC,IAEhD/gD,YAAOS,KAAAA,GAAc3E,MAAAA,IAAAA,MACP,8EAA8E;IAEzFkE,OAAAA;AAAO;AAIT,SAASghD,0BAA0B,EACxCvjD,QAAAA,EACA7E,KAAAA,EAC8B,EAAc;IAC5C,MAAM,CAACqoD,2BAA2BC,4BAA4B,CAAA,GAC5Dn6C,qNAAAA,EAA8B,IAAI,GAC9B,CAACo6C,0BAA0BC,2BAA2B,CAAA,6MAAIr6C,WAAAA,EAAmB,CAAA,CAAE,GAE/Es6C,6BAA4BjlC,uNAAAA,EAChC,CAACklC,oBAAyC,IAAA,KAAS;QAE/CL,2BAA2BvlD,UAAU,aACrC1E,SAASuqD,aAAAA,YAAyBC,eAElCxqD,SAASuqD,aAAAA,CAAcE,IAAAA,IAGzBP,6BAA6BI,iBAAiB,GAC9CF,4BAA4B,CAAA,CAAE;IAAA,GAEhC;QAACH,yBAAyB;KAC5B,GAEMS,gOAAsBtlC,cAAAA,EAC1B,IAAMilC,6BACN;QAACA,yBAAyB;KAC5B,GAEMM,kOAAwBvlC,cAAAA,EAC3BlW,CAAgC,cAAA;QAC/B,IAAI,CAAC+6C,0BAA2B,CAAA;QAEhC,MAAMW,iBAAiBhpD,MAAMipD,qBAAAA,CAAsB,GAC7CC,uBACJF,eAAezwB,SAAAA,CAAW4wB,CAAQA,MAAAA,IAAI3lD,EAAAA,KAAO6kD,0BAA0Be,KAAK,IAAA,CAC3E97C,cAAc,SAAS,CAAA,IAAK,CAAA;QAE3B47C,uBAAuB,KAAKA,wBAAwBF,eAAeroD,MAAAA,IAEvE8nD,0BAA0B;YACxBW,OAAOJ,cAAAA,CAAeE,oBAAoB,CAAA,CAAE1lD,EAAAA;YAC5C6lD,UAAUhB,0BAA0BgB,QAAAA;YACpCvmD,OAAO;QAAA,CACR;IAAA,GAEH;QAAC2lD;QAA2BJ;QAA2BroD,KAAK;KAC9D,GAEMspD,iOAAuB9lC,cAAAA,EAC1BlW,CAA6B,gBAAA;QACvB+6C,6BAELG,4BAA6Be,CAAsB,sBAAA;YAC3C,MAAA,EAACF,UAAUG,WAAAA,EAAAA,GAAenB,2BAC1BoB,eAAgBC,CAAAA,gBACpBA,gBAAAA,CAAiBp8C,gBAAc,SAAS,IAAI,CAAA,CAAA;YAE1C,IAAA,CAACi8C,kBAAkB5oD,MAAAA,EAAQ;gBACvBgpD,MAAAA,qBAAqBF,aAAaD,WAAW;gBACnD,OAAIG,qBAAqB,IAAU,CAAE,CAAA,GAC9B;oBAACA,kBAAkB;iBAAA;YAAA;YAEtBC,MAAAA,oBAAoBL,iBAAAA,CAAkBA,kBAAkB5oD,MAAAA,GAAS,CAAC,CAAA,EAClEkpD,YAAYJ,aAAaG,iBAAiB;YAGhD,OAAIC,YAAY,IAAUN,oBAGtBM,cAAcL,cAAoB,CAAA,CAAA,GAGlCD,kBAAkB79B,QAAAA,CAASm+B,SAAS,IAC/BN,kBAAkB3mD,KAAAA,CAAM,GAAG,CAAA,CAAE,IAG/B,CAAC;mBAAG2mD;gBAAmBM,SAAS;aAAA;QAAA,CACxC;IAAA,GAEH;QAACxB,yBAAyB;KAC5B,GAEMyB,wBAAwBtmC,wNAAAA,EAC5B,CAAC4lC,OAAeC,aAAqB;QACT,0BAAA;YAACD;YAAOC;YAAUvmD,OAAO;QAAA,CAAW;IAAA,GAEhE;QAAC2lD,yBAAyB;KAC5B,GAEMsB,8NAAoBvmC,cAAAA,EAAY,MAAM;QACrC6kC,IAAAA,2BACL,IAAIE,yBAAyB5nD,MAAAA,EAE3B6nD,4BAA4B,CAAA,CAAE;aACzB;YACL,MAAMwB,wBACJ3B,0BAA0BvlD,KAAAA,KAAU,aAChC,OACA;gBACE,GAAGulD,yBAAAA;gBACHvlD,OAAO;YACT;YACN2lD,0BAA0BuB,qBAAqB;QAAA;IAEhD,GAAA;QAACvB;QAA2BJ;QAA2BE,yBAAyB5nD,MAAM;KAAC,GAEpFspD,4NAAkBzmC,cAAAA,EACtB,CAAC0mC,YAAqBj1C,QAAgB;QACpC,IAAI,CAACozC,0BAA2B,CAAA;QAE1B/6C,MAAAA,cAAY2H,QAAQ,cAAc,SAAS,MAC3Ck1C,SAAS78C,gBAAc,SAAS,IAAI,CAAA;QAEtC48C,IAAAA,YACFZ,qBAAqBh8C,WAAS;aACzB;YACC88C,MAAAA,0BAA0B/B,0BAA0BgB,QAAAA,GAAWc;YACrE,IAAIC,0BAA0B,EAAG,CAAA;YAEX/B,sBAAAA,0BAA0Be,KAAAA,EAAOgB,uBAAuB;QAAA;IAChF,GAEF;QAACd;QAAsBjB;QAA2ByB,qBAAqB;KACzE,GAEMO,gOAAsB7mC,cAAAA,EACzB/T,CAAyB,UAAA;QACxB,IAAI,CAAC44C,0BAA2B,CAAA;QAE1B,MAAA,EAACpzC,KAAAA,KAAAA,EAAK+xC,QAAAA,EAAAA,GAAYv3C;QAExB,OAAQwF,OAAG;YACT,KAAK;gBACH;YAAA,gCAAA;YAEF,KAAK;gBACe,kBAAA;gBAClB;YAEF,KAAK;YACL,KAAK;gBACHxF,MAAMC,cAAAA,CAAe,GACrBu6C,gBAAgBjD,UAAU/xC,KAAG;gBAC7B;YAEF,KAAK;YACL,KAAK;gBAGCozC,0BAA0BvlD,KAAAA,KAAU,cAAA,CACtC2M,MAAMC,cAAAA,CAAAA,GACNq5C,sBAAsB9zC,UAAQ,cAAc,SAAS,OAAO,CAAA;gBAE9D;QAGA;IACJ,GAEF;QAACozC;QAA2B0B;QAAmBE;QAAiBlB,qBAAqB;KACvF,GAEMuB,8NAAoB9mC,cAAAA,EACvB/T,CAAsB,YAAA;QAChB44C,6BAAAA,CACuBjqD,SACzBmsD,cAAAA,CACC,CAAA,KAAA,EAAQlC,0BAA0Be,KAAK,CAAA,CAAA,EAAIf,0BAA0BgB,QAAQ,EAC/E,GACEmB,SAAS/6C,QAAMuhB,MAAc,KAEP83B,oBAAoB,CAAA;IAAA,GAEhD;QAACA;QAAqBT,yBAAyB;KACjD;IAEAx5C,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,IAAA,CACJw5C,6BAAAA,CACFjqD,SAAS+R,gBAAAA,CAAiB,WAAWk6C,mBAAmB,GACxDjsD,SAAS+R,gBAAAA,CAAiB,SAASm6C,iBAAiB,CAAA,GAG/C,MAAM;YACPjC,6BAAAA,CACFjqD,SAAS8R,mBAAAA,CAAoB,WAAWm6C,mBAAmB,GAC3DjsD,SAAS8R,mBAAAA,CAAoB,SAASo6C,iBAAiB,CAAA;QAG1D,CAAA,GAAA;QAACA;QAAmBD;QAAqBhC,yBAAyB;KAAC;IAEtE,MAAMoC,4NAAkBjnC,cAAAA,EACtB,IACE8kC,6BAA8BoC,CAAAA,oBACvBA,oBAEE;gBAAC,GAAGA,iBAAAA;gBAAmB5nD,OAAO;YAAA,IAFN,IAGhC,GACH,CACF,CAAA,GAEM6nD,6NAAmBnnC,cAAAA,EACvB,CAAC4lC,SAAeC,aACVhB,2BAA2Be,UAAUA,UAAc,OAEnDf,0BAA0BgB,QAAAA,KAAaA,aAClChB,0BAA0BvlD,KAAAA,KAAU,YAAY,YAAY,mBAEjEylD,yBAAyB78B,QAAAA,CAAS29B,UAAQ,IAAU,kBAEjD,MAET;QAAChB;QAA2BE,wBAAwB;KACtD,GAEMqC,8NAAoBpnC,cAAAA,EAAY,MAAM;QACrC6kC,6BAELI,0BAA0B;YACxBW,OAAOf,0BAA0Be,KAAAA;YACjCC,UAAUhB,0BAA0BgB,QAAAA,GAAW;YAC/CvmD,OAAO;QAAA,CACR;IAAA,GACA;QAAC2lD;QAA2BJ,yBAAyB;KAAC,GAEnDtpD,kNAAQ6kB,UAAAA,EACZ,IAAA,CAAO;YACL6mC;YACA3B;YACAgB;YACAa;YACAC;QAAAA,CAAAA,GAEF;QACEH;QACA3B;QACAgB;QACAa;QACAC,iBAAiB;KAErB;IAEA,OACG,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,+IAAA,4BAAA,CAAyB,QAAA,EAAzB;QAAkC;QAAe/lD;IAAS,CAAA;AAE/D;AC9QA,MAAMgmD,uLAAWprD,SAAAA,CAAOqrD,EAAAA,CAAAA;;;;SAAAA,EAIb,CAAC,EAACpyC,KAAAA,EAAK,GAAMA,KAAK,CAAA;;;AAAA,CAAA,EAKvBqyC,iMAAiBtrD,SAAAA,EAAOorD,QAAQ,CAAA,CAAA;;;AAAA,CAAA;AAa/B,SAASG,mBAAmB/sD,KAAAA,EAAgC;IAC3D,MAAA,EAACgtD,QAAAA,EAAUC,MAAAA,EAAQvE,GAAAA,EAAK/H,SAAAA,EAAa3gD,GAAAA,OACrCktD,SAAS,CAAA,KAAA,EAAQD,OAAO1nD,EAAE,CAAA,CAAA,EAAImjD,IAAIx+C,KAAK,EAAA,EACvC,CAACijD,aAAaC,cAAc,CAAA,IAAIl9C,oNAAAA,EAAiB88C,SAAoB,CAAA,GACrE,CAACK,SAASC,UAAU,CAAA,6MAAIp9C,WAAAA,EAAS,CAAA,CAAK,GACtCq9C,qNAAWt5C,SAAAA,EAAiB,IAAI,GAChC,EACJu4C,eAAAA,EACA3B,mBAAAA,EACAgB,qBAAAA,EACAa,gBAAAA,EACAC,iBAAAA,EACE1C,GAAAA,4BACEuD,GAAAA,YAAYd,iBAAiBO,OAAO1nD,EAAAA,EAAImjD,IAAIx+C,KAAK,GAEjDujD,0NAAgBloC,cAAAA,EAAY,MAAM;QAEtCsmC,sBAAsBoB,OAAO1nD,EAAAA,EAAImjD,IAAIx+C,KAAK,GAC1CsiD,gBAAgB;IAAA,GACf;QAACS,OAAO1nD,EAAAA;QAAIinD;QAAiB9D,IAAIx+C,KAAAA;QAAO2hD,qBAAqB;KAAC,GAC3D,EAAC6B,aAAAA,EAAAA,GAAiB1tD,MAAM+B,KAAAA,CAAM8c,OAAAA,CAAQgqC,IAAAA,IAAQ,CAAA,GAE9C8E,0BAA0BA,MAAM;QAC3Bz5C,SAAAA,OAAAA,EAAS05C,SACdL,SAASr5C,OAAAA,YAAmB25C,oBAC9BN,SAASr5C,OAAAA,CAAQyd,MAAAA,CAAO;IAAA,GAItBm8B,oBAA0Dt8C,CAAU,UAAA;QACpEA,MAAMu8C,MAAAA,KAAW,IACnBJ,wBAAAA,IAAAA,CAEAn8C,MAAMC,cAAAA,IACNo6C,sBAAsBoB,OAAO1nD,EAAAA,EAAImjD,IAAIx+C,KAAK,CAAA;IAAA,GAIxC8jD,oBAAoBzoC,wNAAAA,EACvB/T,CAAyB,YAAA;QAClB,MAAA,EAACwF,GAAAA,EAAAA,GAAOxF;QACVwF,QAAQ,WAAA,CACNw2C,cAAc,oBAAkBG,2BAChCH,cAAc,aAAWb,mBAAAA;IAAkB,GAGnD;QAACa;QAAWb,iBAAiB;KAC/B,GAEMsB,iBAAkBz8C,CAA+C,YAAA;QACrE87C,WAAW,CAAA,CAAI,GACfF,eAAe57C,QAAMuhB,MAAAA,CAAOjyB,KAAK;IACnC,GAEMotD,eAAeA,MAAM;QACrBb,WAAAA,CACFK,gBAAgBhF,IAAInjD,EAAAA,EAAI0nD,OAAO1nD,EAAAA,EAAI4nD,WAAW,GAC9CG,WAAW,CAAA,CAAK,CAAA,GAElBzC,oBAAoB;IAAA,GAGhBsD,wNAAc5oC,cAAAA,EACjB/T,CAA0B,YAAA;QACzB,MAAM48C,gBAAgB58C,QAAM48C,aAAAA,EAAeC,QAAQ,MAAM;QAEzD,CAAI,OAAOD,iBAAkB,YAAY,OAAOA,iBAAkB,QAAA,KAAA,CAChEhB,eAAegB,aAAa,GAE5BV,gBAAgBhF,IAAInjD,EAAAA,EAAI0nD,OAAO1nD,EAAAA,EAAI6oD,aAAa,CAAA;IAAA,GAGpD;QAACnB,OAAO1nD,EAAAA;QAAImoD;QAAehF,IAAInjD,EAAE;KACnC,GAEM+oD,iBAAa/oC,oNAAAA,EAAY,MAAM;QACnCo0B,UAAUC,SAAAA,CAAUC,SAAAA,CAAUsT,YAAYrT,QAAAA,CAAAA,CAAU;IAAA,GACnD;QAACqT,WAAW;KAAC;IAEN,CAAA,GAAA,qMAAA,CAAA,YAAA,EAAA,IAAA,CAAA,CACJK,cAAc,oBAAoBA,cAAc,SAAA,KAElDrtD,SAAS+R,gBAAAA,CAAiB,WAAW87C,iBAAiB,GAAA,CACpDR,cAAc,oBAAoBA,cAAc,eAAA,KAElDrtD,SAAS+R,gBAAAA,CAAiB,SAASi8C,WAAW,GAE5CX,cAAc,oBAEhBrtD,SAAS+R,gBAAAA,CAAiB,QAAQo8C,UAAU,GAEvC,MAAM;YACPd,CAAAA,cAAc,oBAAoBA,cAAc,SAAA,KAClDrtD,SAAS8R,mBAAAA,CAAoB,WAAW+7C,iBAAiB,GAAA,CACvDR,cAAc,oBAAoBA,cAAc,eAAA,KAClDrtD,SAAS8R,mBAAAA,CAAoB,SAASk8C,WAAW,GAC/CX,cAAc,oBAAkBrtD,SAAS8R,mBAAAA,CAAoB,QAAQq8C,UAAU;QAEpF,CAAA,GAAA;QACDpB;QACAM;QACAP,OAAO1nD,EAAAA;QACPmnD;QACA4B;QACAN;QACAG;QACAzF,IAAIx+C,KAAK;KACV;IAED,MAAMqkD,iBAAiBA,IACjBf,cAAc,YAAkB,mBAChCA,cAAc,kBAAwB,oBACtCA,cAAc,mBAAyB,mBAEpC,yBAGHgB,aAAa;QACjB,SAAWf;QACX,QAAUS;QACV,aAAeJ;QACf,iBAAiB,CAAC,CAACN;QACnB,eAAeN;QACf,IAAMA;QACN,KAAQ5oD,CAAmBipD,MAAAA,SAASr5C,OAAAA,GAAU5P;IAChD;IAEA,OAAIq8C,UAAUh5C,IAAAA,KAAS,YAEnB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,SAAA,EACC;QAAA,GAAI6mD,UAAAA;QACJ,UAAU,IAAM;QAChB,QAAQ;QACR,OAAO;YACLC,WAAW;YACX30C,QAAQy0C,eAAe;YACvBv4C,SAAS;QAEX;QAAA,OAAO6O,KAAKC,SAAAA,CAAUqoC,WAAW;QAEjC,UAAA;YAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;gBAAO,OAAM;gBAAO,UAAI;YAAA,CAAA;YACxB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;gBAAO,OAAM;gBAAQ,UAAK;YAAA,CAAA;SAC7B;IAAA,CAAA,IAKD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,YAAA,EAAA;QACKqB,GAAAA,UAAAA;QACJ,MAAM;QACN,QAAQ;QACR,QAAQ,CAAA;QACR,OAAO;YACL10C,QAAQy0C,eAAe;YACvBv4C,SAAS;QAEX;QAAA,OACE,OAAOm3C,eAAgB,YAAY,OAAOA,eAAgB,WACtDA,cACAtoC,KAAKC,SAAAA,CAAUqoC,WAAW;QAEhC,UAAUc;IACV,CAAA;AAEN;AAGO,SAASS,cAAcC,IAAAA,EAAqC;IACjE,MAAMC,WAAWD,KAAK1B,MAAAA,CAAO4B,WAAAA,CAAY,GACnCC,OAAOF,WAAW9B,iBAAiBF,UACnCmC,cAAcH,YAAYD,KAAK1B,MAAAA,CAAO+B,eAAAA,CAAgB,MAAM,IAAI,IAAI;IAGxE,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,MAAA;QAEC,OAAO;YACLrzC,MAAMgzC,KAAK1B,MAAAA,CAAOgC,QAAAA,CAAS,MAAM,KAAKrlD,KAAAA;YACtCslD,aAAa,GAAGH,WAAW,CAAA,iCAAA,CAAA;QAAA;QAE7B,OAAOJ,KAAK1B,MAAAA,CAAOkC,OAAAA;QAElBC,qMAAAA,aAAAA,EAAWT,KAAK1B,MAAAA,CAAOoC,SAAAA,CAAUV,IAAAA,EAAMA,KAAKW,UAAAA,IAAc;IAPtDX,GAAAA,KAAKjG,GAAAA,CAAI5pC,QAAAA,CAASrb,GAAAA,GAAMkrD,KAAKppD,EAQpC;AAEJ;AClMO,MAAMgqD,uBAAuB,GAE9BC,cAAexvD,CAMf,UAAA;IACE,MAAA,EAACwD,oBAAAA,EAAsBklD,GAAAA,EAAKhoD,UAAAA,EAAAA,GAAcV,OAC1CqB,QAAQ,kBACRsC,yBAAyBgiB,oNAAAA,EAC7B,gKAAMjiB,4BAAAA,EAA0BF,sBAAsB9C,YAAYgoD,IAAI5pC,QAAAA,CAASrb,GAAAA,EAAKpC,KAAK,GACzF;QAACmC;QAAsBklD,IAAI5pC,QAAAA,CAASrb,GAAAA;QAAK/C,UAAU;KACrD,GACM,EAACkD,KAAAA,EAAOE,SAAAA,EAAWD,SAAAA,EAAAA,mJAAaE,iBAAAA,EAAcJ,wBAAwB;QAC1EC,OAAO;QACPC,WAAW,CAAA;QACXC,WAAW;IAAA,CACZ;IACGD,IAAAA,WACF,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJACG,OAAA,EAAK;QAAA,MAAM;QAAG,OAAK,CAAA;QAAA,UAEpB;IAAA,CAAA;IAGJ,MAAM4rD,eAAgB7rD,OAAOvC,SAASyC,WAAWzC,SAAS;IAC1D,OACG,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;QAAK,OAAM;QAAS,KAAK;QACxB,UAAA;YAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,0BAAA,EAAA;gBAAwB;gBAAc;YAAqB,CAAA;YAC3D,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAK,MAAM;gBAAIouD,UAAa;YAAA,CAAA;SAAA;IAAA,CAC/B;AAEJ,GAEMC,yLAAeC,qBAAAA,KACfC,mBAAmB;IAAC;IAAU;IAAU,SAAS;CAAA,EAOjDC,wBAAwBA,CAACnvD,YAA8BovD,gBACpDpvD,WAAWohD,MAAAA,CAAOt+B,MAAAA,CAAgB,CAACusC,cAAuB5R,UAAU;QACnE,MAAA,EAACj3C,IAAAA,EAAMS,IAAAA,EAAAA,GAAQw2C;QACrB,IAAIyR,iBAAiBniC,QAAAA,CAASvmB,KAAKS,IAAI,GAAG;YACxC,MAAMqoD,UAAUN,aAAaO,QAAAA,CAAAA,mFAAAA;YAE3BH,gBAAgB,GAAGA,aAAa,CAAA,CAAA,EAAI3R,MAAMx2C,IAAI,EAAA,GAAKw2C,MAAMx2C,IAAAA,EACzD;gBACEpC,IAAIuqD,gBAAgB,GAAGA,aAAa,CAAA,CAAA,EAAI3R,MAAMx2C,IAAI,EAAA,GAAKw2C,MAAMx2C,IAAAA;gBAC7Dq7B,QAAQmb,MAAMj3C,IAAAA,CAAK7F,KAAAA;gBACnB6uD,cAAc,CAAA;gBACdvB,MAAOwB,CAAS,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,oBAAA;wBAAmB,GAAIA,IAAAA;wBAAM,WAAWjpD;oBAAK,CAAA;YAAA;YAI3D,OAAA,CAAC;mBAAG6oD;gBAAcC,OAAO;aAAA;QAAA;QAIlC,OAAI9oD,KAAKS,IAAAA,KAAS,mKAAYyoD,qBAAAA,EAAmBlpD,IAAI,KAAK,CAAC4oD,gBAClD,CACL;eAAGC;YACHL,aAAa9tC,KAAAA,CAAM;gBAACohB,QAAQr7B;gBAAM0oD,SAASR,sBAAsB3oD,MAAMi3C,MAAMx2C,IAAI;YAAE,CAAA,CAAC;SAAA,GAIjFooD;IACT,GAAG,EAAE;AAIP,SAASO,uBACPrD,MAAAA,EACyD;IACzD,OAAO,iBAAiBA;AAC1B;AACA,SAASsD,iBACPtD,MAAAA,EACmD;IACnD,OAAO,aAAaA;AACtB;AAEA,MAAMuD,cAAeC,CAAAA,OACZA,KAAKC,OAAAA,CAASxF,CAAAA,MACfoF,uBAAuBpF,GAAG,IACrBA,MAELqF,iBAAiBrF,GAAG,IACfA,IAAImF,OAAAA,GAAUG,YAAYtF,IAAImF,OAAO,IAAI,CAE3C,CAAA,GAAA,EACR;AAGI,SAASM,wBAAwBC,kBAAAA,EAAuC;IACvEptD,MAAAA,mLAAuBkE,0BAAAA,KAEvB2oD,UAAmB1qC,oNAAAA,EAAQ,IAC1BirC,qBAGE;YACLlB,aAAamB,OAAAA,CAAQ;gBACnBtrD,IAAI;gBACJ2qD,cAAc,CAAA;gBACdltB,QAASmtB,CACP,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,MAAA,EACC;wBAAA,UAAA;4BAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,WAAA,EAAA;gCACC,OAAO;oCAACpG,aAAa;gCAAA;gCACrB,eAAeoG,KAAKpuD,KAAAA,CAAM+uD,qBAAAA,CAAAA;gCAC1B,UAAUX,KAAKpuD,KAAAA,CAAMgvD,mCAAAA,CAAAA;4BAAAA,CAAsC;4BAG5DZ,KAAKpuD,KAAAA,CAAMwnD,mBAAAA,CAAoB,EAAEC,IAAAA,CAAK9mD,MAAAA;4BAAO;yBAAA;oBAAA,CAChD;gBAEFisD,MAAMlG;YAAAA,CACP;YACDiH,aAAaO,QAAAA,CAAS,WAAW;gBAC/BC,cAAc,CAAA;gBACd3qD,IAAI;gBACJopD,MAAOwB,CAAAA,SAEF,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,aAAA;wBAAA,GACKA,MAAAA;wBACJ;wBACA,YAAYS;oBACZ,CAAA;YAAA,CAGP,GACD;eAAGf,sBAAsBe,kBAAkB,CAAC;SAAA,GAhCrC,CAkCR,CAAA,EAAA;QAACptD;QAAsBotD,kBAAkB;KAAC,GAEvC,CAACI,wBAAwB,CAAA,6MAA+BrrC,UAAAA,EAC5D,IACE6qC,YAAYH,OAAO,EAAE7sC,MAAAA,CACnB,CAAC,CAACytC,SAASC,mBAAmB,CAAA,EAAGjE,WAAW;YAC1C,IAAI,CAACA,OAAO1nD,EAAAA,CAAU,CAAA,MAAA,IAAIN,MAAM,wBAAwB;YACxD,MAAMksD,gBAAgBlE,OAAO1nD,EAAAA;YAG7B,OAAK0nD,OAAOiD,YAAAA,GAKRgB,wBAAwB3B,uBACnB;gBAAC;oBAAC,GAAG0B,OAAAA;oBAAS,CAACE,aAAa,CAAA,EAAG,CAAA;gBAAA;gBAAQD,mBAAmB;aAAA,GAG5D;gBAAC;oBAAC,GAAGD,OAAAA;oBAAS,CAACE,aAAa,CAAA,EAAG,CAAA;gBAAA;gBAAOD,sBAAsB,CAAC;aAAA,GAR3D;gBAAC;oBAAC,GAAGD,OAAAA;oBAAS,CAACE,aAAa,CAAA,EAAG,CAAA;gBAAA;gBAAOD,mBAAmB;aAAA;QASpE,GACA;YAAC,CAAA;YAAI,CAAC;SACR,GACF;QAACb,OAAO;KACV;IAEO,OAAA;QAACA;QAASW;IAAwB;AAC3C;AC9KO,SAASI,eAAe,EAACrvD,KAAAA,EAA0B,EAAG;IACrD,MAAA,EAACpB,CAAAA,EAAAA,+JAAKC,iBAAAA,CAAe,IACrBywD,wBACJtvD,MAAMipD,qBAAAA,GAAwBjhD,MAAAA,CAAQmhD,CAAQA,MAAAA,IAAIoG,UAAAA,CAAY,CAAA,EAAE5uD,MAAAA,IAAU6sD,sBAEtEgC,8NAAoBhsC,cAAAA,EAAY,MAAM;QAC1CxjB,MAAMyvD,qBAAAA,CAAsB;IAAA,GAC3B;QAACzvD,KAAK;KAAC,GAEJ0vD,uBAAwBxE,CAAAA,SAA4C,MAAM;YAC9EA,OAAOyE,gBAAAA,CAAiB;QAAA,GAGpBC,8BAA+B1E,CAA4C,aAAA;QAC/E,MAAM2E,kBAAkB3E,SAAO4E,YAAAA,CAAa,GACtCC,wBACJ/vD,MAAMipD,qBAAAA,CAAAA,EAAwBjhD,MAAAA,CAAQmhD,CAAQA,QAAAA,MAAIoG,UAAAA,CAAW,CAAC,EAAE5uD,MAAAA,KAAW;QAErE2uD,OAAAA,yBAAyB,CAACO,mBAAqBE,yBAAyBF;IAClF;IAGE,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,aAAA,EAAA;QACC,QAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EAAA;YAAO,MAAK;YAAQ,MAAMjxD,EAAE,yBAAyB;QAAA,CAAE;QAChE,IAAG;QACH,MACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;YAAK,SAAS;YAAG,YAAY;YAAG,OAAO;gBAAC8Z,OAAO;YAAG;YACjD,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAK;gBAAA,WAAU;gBAAS,QAAO;gBAAO,KAAK;gBAC1C,UAAA;oBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;wBAAK,QAAO;wBAAW,MAAM;wBAC3B9Z,UAAAA,EAAE,0BAA0B;oBAAA,CAC/B;oBACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;wBAAK,OAAO;4BAACkS,MAAM;4BAAYk/C,WAAW;4BAAKC,WAAW;wBAAA;wBACzD,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,yJAAA,EAAA;4BACEjwD,UAAAA,MACEkwD,iBAAAA,GACAloD,MAAAA,CAAQkjD,CAAWA,WAAAA,SAAOqE,UAAAA,CAAY,CAAA,EACtC7nD,GAAAA,CAAKwjD,CACJ,WAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;oCAAqB,SAAS;oCAAG,OAAM;oCACtC,UAAA;wCAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,WAAA,EAAA;4CACC,UAAU0E,4BAA4B1E,QAAM;4CAC5C,SAASA,SAAO4E,YAAAA,CAAa;4CAC7B,UAAUJ,qBAAqBxE,QAAM;4CACrC,IAAI,CAAA,eAAA,EAAkBA,SAAO1nD,EAAE,EAAA;4CAC/B,OAAO;gDAACsrD,SAAS;4CAAA;wCAAA,CAAS;wCAE5B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAA;4CAAI,MAAM;4CAAG,aAAa;4CACzB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAK;gDAAA,MAAM;gDACV,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,SAAA;oDAAM,SAAS,CAAA,eAAA,EAAkB5D,SAAO1nD,EAAE,EAAA;oDACxC0nD,UAAAA,SAAOoC,SAAAA,CAAUrsB,MAAAA,EAAQ8W,SAAAA;gDAC5B,CAAA;4CACF,CAAA;wCACF,CAAA;qCAAA;gCAAA,GAdSmT,SAAO1nD,EAelB,CACD;wBAAA,CACL;oBACF,CAAA;oBACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACC;wBAAA,OAAM;wBACN,MAAK;wBACL,MAAM5E,EAAE,0BAA0B;wBAClC,SAAS4wD;oBAAkB,CAAA;iBAAA;YAAA,CAE/B;QACF,CAAA;QAEF,WAAU;QACV,SAAS;YAAC/6C,QAAQ,CAAA;QAAA;IAAA,CAClB;AAEN;AChFA,MAAM07C,kMAAkB1wD,SAAAA,mJAAOa,OAAI,CAAA,CAAA;;AAAA,CAAA;AAI5B,SAAA8vD,0BAAA;IAAAlyD,MAAAA,oMAAAC,EAAA,CAAA,GACL,EAAA2E,OAAAtE,EAAAA,EAAA,+JAEI6xD,iBAAAA,KADK,EAAAC,cAAAA,EAAAA,GAAA9xD;IAAgBM,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAKrBhC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA,CAAe,CAAA,GAAAZ,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAoyD,iBAAAA,CACfpxD,KAAAoxD,kBAAkB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,UAAA,EAAA;QAAwB,gBAAI,CAAA;IAAA,CAAK,GAAApyD,CAAAA,CAAAA,EAAAA,GAAAoyD,gBAAApyD,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAA,OAAAjB,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CAFvDC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAC,iBACCL;QAAAA,UAAAA;YAAAA;YACCI;SAAAA;IAAAA,CACH,GAAkBhB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAHlBiB;AAGkB;ACLtB,MAAMoxD,qLAAS9wD,SAAAA,CAAO+wD,EAAAA,CAAAA;;;;;;;;SAAAA,EAQX,CAAC,EAAC93C,KAAAA,EAAK,GAAMA,KAAK,CAAA;aAAA,EACd,CAAC,EAACA,KAAAA,EAAK,GAAMA,KAAK,CAAA;AAAA,CAAA,EAG3B+3C,+LAAehxD,SAAAA,EAAO8wD,MAAM,CAAA,CAAA;;;AAAA,CAAA,EAK5BG,wLAAYjxD,SAAAA,CAAOmtB,GAAAA,CAAAA;;;EAAAA,EAGrB2jC,MAAM,CAAA;;;AAAA,CAAA;AAUH,SAASI,wBAAwB1yD,KAAAA,EAAqC;IACrE,MAAA,EAACgjC,MAAAA,EAAQ2vB,WAAAA,EAAAA,GAAe3yD,OACxB,EAACW,CAAAA,EAAKC,+JAAAA,iBAAAA,CAAAA,IAENguD,WAAW5rB,OAAOiqB,MAAAA,CAAO4B,WAAAA,CAAY,GAErC+D,cACJD,YAAYE,KAAAA,GAAQ,KAAK,CAAC7vB,OAAOiqB,MAAAA,CAAO6F,MAAAA,GAAS,OAC/C,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAK;QAAA,MAAM;QAAG,QAAO;QAAW,cAAa;QAC3C1D,qMAAAA,aAAAA,EAAWpsB,OAAOiqB,MAAAA,CAAOoC,SAAAA,CAAUrsB,MAAAA,EAAQA,OAAOssB,UAAAA,CAAW,CAAC;IACjE,CAAA,GAGEyD,YAAYnE,WAAW4D,eAAeF,QAEtCU,oBACJhwB,OAAOiqB,MAAAA,CAAOqE,UAAAA,CAAAA,KAAAA,CACbqB,YAAYE,KAAAA,KAAU,IAAI,CAAC7vB,OAAOiqB,MAAAA,CAAOoD,OAAAA,CAAQ3tD,MAAAA,GAASsgC,OAAOiqB,MAAAA,CAAO6F,MAAAA,GAErE/D,cAAcH,YAAY5rB,OAAOiqB,MAAAA,CAAO+B,eAAAA,CAAgB,MAAM,IAAI,IAAI;IAG1E,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,WAAA;QACC,OAAO;YACLrzC,MAAMqnB,OAAOiqB,MAAAA,CAAOgC,QAAAA,CAAS,MAAM,KAAKrlD,KAAAA;YACxCslD,aAAa,GAAGH,WAAW,CAAA,iCAAA,CAAA;QAAA;QAG7B,eAAa,CAAA,OAAA,EAAU/rB,OAAOz9B,EAAE,EAAA;QAChC,OAAOy9B,OAAOmsB,OAAAA,CAAQ;QAEtB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAK;YAAA,SAAQ;YAAgB,SAAS;YAAG,OAAM;YAC9C,UAAA;gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,UAAA,EAAA;oBAAQ,OAAO;oBAAK,SAASyD;oBAC5B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAA;wBAAI,OAAO;4BAACK,WAAW;wBAAA;wBAAe,YAAY;wBAAG,aAAa;wBAChEL,UAAAA;oBACH,CAAA;gBAAA,CACF;gBACCI,qBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EACE,WACC;oBAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,aAAA,EAAA;wBACC,QACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EAAA;4BACC,cAAc;gCAACzoD,SAAS;4BAAiB;4BACzC,MAAK;4BACL,yJAAM2oD,yBAAAA;4BACN,eAAY;wBAEhB,CAAA;wBACA,IAAG;wBACH,SAAS;4BAAC38C,WAAW;wBAAA;wBACrB,MACG,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;4BACC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,6LAAA,EACC;gCAAA,MAAM5V,EAAE,uBAAuB;gCAC/B,yJAAM+tB,YAAAA;gCACN,SAAS,IAAMsU,OAAOiqB,MAAAA,CAAOyE,gBAAAA;4BAAmB,CAAA;wBAAA,CAEpD;oBAAA,CACD;gBAEL,CAAA;aAAA;QAAA,CAEJ;IAAA,GAnCK1uB,OAAOz9B,EAoCd;AAEJ;ACzFO,SAAS4tD,2BAA2B,EAACpxD,KAAAA,EAAqC,EAAG;IAClF,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLACG,4BAAA,EACC;QAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;YAAK,KAAK;YAAG,OAAO;YACnB,UAAA;gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACC;oBAAA,SAAS,IAAMA,MAAMqxD,YAAAA,CAAa,CAAC;oBACnC,UAAU,CAACrxD,MAAMsxD,kBAAAA,CAAAA;oBACjB,yJAAMC,wBAAAA;oBACN,cAAc;wBACZ/oD,SAAS;oBAAA;gBAAA,CACT;gBAEH,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,2LAAA,EAAA;oBACC,SAAS,IAAMxI,MAAMwxD,YAAAA,CAAa;oBAClC,UAAU,CAACxxD,MAAMsxD,kBAAAA,CAAAA;oBACjB,yJAAMG,kBAAAA;oBACN,cAAc;wBACZjpD,SAAS;oBAAA;gBAAA,CACT;gBAEJ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;oBAAK,OAAO;wBAACsiC,YAAY;oBACvB9qC;oBAAAA,UAAAA;wBAAM0xD,MAAAA,QAAAA,CAAAA,EAAWC,UAAAA,CAAWC,SAAAA,GAAY;wBAAE;wBAAK5xD,MAAM6xD,YAAAA,CAAa;qBAAA;gBAAA,CACrE;gBAEC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EAAA;oBACC,SAAS,IAAM7xD,MAAM8xD,QAAAA,CAAS;oBAC9B,UAAU,CAAC9xD,MAAM+xD,cAAAA,CAAAA;oBACjB,yJAAMC,mBAAAA;oBACN,cAAc;wBACZxpD,SAAS;oBAAA;gBAAA,CACT;gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAEH,2LAAA,EACC;oBAAA,SAAS,IAAMxI,MAAMqxD,YAAAA,CAAarxD,MAAM6xD,YAAAA,CAAa,IAAI,CAAC;oBAC1D,UAAU,CAAC7xD,MAAM+xD,cAAAA;oBACjB,yJAAME,yBAAAA;oBACN,cAAc;wBACZzpD,SAAS;oBAAA;gBAAA,CACT;gBAEJ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UAAA;oBACC,OAAOxI,MAAM0xD,QAAAA,GAAWC,UAAAA,CAAWO,QAAAA;oBACnC,UAAWvpD,CAAM,MAAA;wBACf3I,MAAMmyD,WAAAA,CAAYC,OAAOzpD,EAAEqoB,MAAAA,CAAOjyB,KAAK,CAAC;oBAAA;oBAGzC,UAAA;wBAAC;wBAAI;wBAAI,GAAG;qBAAA,CAAE2I,GAAAA,CAAKwqD,CAClB,WAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UAAA;4BAAsB,OAAOA;4BAC3BA,UADUA;wBAAAA,GAAAA,QAEb,CACD;gBACH,CAAA;aAAA;QAAA,CACF;IACF,CAAA;AAEJ;ACtCA,SAASG,mBAAmBjU,SAAAA,EAA6B;IAEvD,OADsBA,UAAU38B,MAAAA,CAAO,CAACQ,KAAKtX,MAAAA,CAAS;YAAC,GAAGsX,GAAAA;YAAK,CAACtX,IAAIjJ,GAAG,CAAA,EAAGiJ;QAAG,CAAA,GAAI,CAAA,CAAE;AAErF;AAEA,SAAS2nD,iBACPxvD,MAAAA,EACAoD,MAAAA,EACuB;IACvB,OAAQA,OAAOf,IAAAA,EAAI;QACjB,KAAK;YAAiB;gBAEdi5C,MAAAA,YAAYiU,mBAAmBnsD,OAAOk4C,SAAS;gBAE9C,OAAA;oBACL,GAAGt7C,MAAAA;oBACHs7C;gBACF;YAAA;QAGF,KAAK;YAAqB;gBACxB,MAAMmU,qBAAqBrsD,OAAOxC,OAAAA;gBAE3B,OAAA;oBACL,GAAGZ,MAAAA;oBACHs7C,WAAW;wBACT,GAAGt7C,OAAMs7C,SAAAA;wBACT,CAACmU,mBAAmB7wD,GAAG,CAAA,EAAG6wD;oBAAAA;gBAE9B;YAAA;QAGF,KAAK;YAAoB;gBAEjB,MAAA,EAAC,CAACrsD,OAAO1C,EAAE,CAAA,EAAGgvD,CAAAA,EAAG,GAAGC,eAAAA,GAAiB3vD,OAAMs7C,SAAAA;gBAE1C,OAAA;oBACL,GAAGt7C,MAAAA;oBACHs7C,WAAWqU;gBACb;YAAA;QAGF,KAAK;YAAoB;gBACvB,MAAMC,kBAAkBxsD,OAAOxC,OAAAA,EACzBF,KAAKkvD,gBAAgBhxD,GAAAA,EAGrBixD,eAAe;oBAAA,6BAAA;oBAEnB,GAJe7vD,OAAMs7C,SAAAA,CAAU56C,EAAE,CAAA;oBAAA,6BAAA;oBAMjC,GAAGkvD,eAAAA;gBACL;gBAEO,OAAA;oBACL,GAAG5vD,MAAAA;oBACHs7C,WAAW;wBACT,GAAGt7C,OAAMs7C,SAAAA;wBACT,CAAC56C,EAAE,CAAA,EAAGmvD;oBAAAA;gBAEV;YAAA;QAGF;YACS7vD,OAAAA;IAAAA;AAEb;AAEA,MAAM8vD,iBAAgC;IACpCjR,QAAQ;QAAC;QAAW;QAAY,WAAW;KAAA;IAC3CC,eAAe,CAAA;IACfzX,YAAY;AACd;AAQO,SAAA0oB,0BAAAr0D,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAmC,EAAA6J,QAAAA,OAAAA,EAAAvE,MAAAA,EAAA+vB,UAAAA,EAAAA,GAAAh1B,IASxCs0D,QAAc,CAAA,EAAA,EAAK9qD,OAAM,CAAA,WAAA,CAAA,EAGXlJ,KAAA00B,qKAAUtnB,iCAAAA,CAAAsnB,UAAAA;IAA4Ct0B,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CAF3CI,KAAA;QAAA,2JAAAgN,gCAAAA;QAAAsnB,YAEX10B;IAAsD,GACnEZ,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAHDu1B,MAAAA,qKAAexnB,YAAAA,EAAU/M,EAGxB;IAACC,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACqD3B,KAAA;QAAAi/C,WAAA,CAAA;IAAA,GAEtDlgD,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAFD4E,MAAAA,CAAAA,QAAAiwD,QAAA,CAAA,6MAA0BC,aAAAA,EAAAV,kBAA6BnzD,EAEtD,GACD2C,CAAAA,WAAAmxD,YAAA,CAAA,6MAAkC9kD,WAAAA,EAAkBslB,WAAAA,IAAe,GACnE,CAAAz0B,OAAAkP,QAAA,CAAA,6MAA0BC,WAAAA,EAAAA,IAA2B;IAACpN,IAAAA;IAAA7C,CAAAA,CAAA40D,CAAAA,CAAAA,KAAAA,SAAA50D,CAAAA,CAAAA,EAAAA,KAAAu1B,UAAAv1B,CAAAA,CAAA,CAAA,CAAA,KAAAuF,SAAAA,CAErB1C,KAAAA,YAAA;QAAA,IAAA,CAC1B0yB,QAAM;YACTw/B,aAAAA,CAAAA,CAAkB;YAAC;QAAA;QAAA,IAAA;YAInB,MAAAC,MAAAA,MAAkBz/B,OAAM9nB,KAAAA,CAAOmnD,OAAOrvD,MAAM;YACpC,SAAA;gBAAA0B,MAAQ;gBAAei5C,WAAa8U;YAAAA,CAAI,GAChDD,aAAAA,CAAAA,CAAkB;QAAA,EAAA,OAACjyD,KAAA;YAEnBkN,SADO6mB,GACK;QAAA;IAAC,GAEhB72B,CAAAA,CAAAA,EAAAA,GAAA40D,OAAA50D,CAAAA,CAAAA,EAAAA,GAAAu1B,QAAAv1B,CAAAA,CAAAA,EAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAZD,MAAAi1D,eAAqBpyD;IAYMC,IAAAA;IAAA9C,CAAAA,CAAAA,EAAAA,KAAAi1D,eAAAA,CAGzBnyD,KAAAA,OAAAyO,UAAA;QAEMA,IAAAA,MAAKtK,IAAAA,KAAU,aAAA,CACjB8tD,aAAAA,CAAAA,CAAiB,GAAC,MACZE,aACNF,GAAAA,aAAAA,CAAAA,CAAkB,CAAA,GAOhBxjD,MAAKtK,IAAAA,KAAU,eACjB8tD,aAAAA,CAAAA,CAAiB,GAKfxjD,MAAKtK,IAAAA,KAAU,YAAU;YACvBsK,IAAAA,MAAKi8B,UAAAA,KAAgB,UAAQ;gBAC/B,MAAAinB,eAAqBljD,MAAKkpB,MAAAA;gBAEtBg6B,gBACFI,SAAQ;oBAAA5tD,MACA;oBAAmBzB,SAChBivD;gBAAAA,CACV;YAAA;YAIDljD,IAAAA,MAAKi8B,UAAAA,KAAgB,eACvBqnB,SAAQ;gBAAA5tD,MAAQ;gBAAkB3B,IAAMiM,MAAK3K,UAAAA;YAAAA,CAAY,GAGvD2K,MAAKi8B,UAAAA,KAAgB,UAAQ;gBAC/B,MAAAgnB,kBAAwBjjD,MAAKkpB,MAAAA;gBAEzB+5B,mBACFK,SAAQ;oBAAA5tD,MACA;oBAAkBzB,SACfgvD;gBAAAA,CACV;YAAA;QAAC;IAAA,GAITx0D,CAAAA,CAAAA,EAAAA,GAAAi1D,cAAAj1D,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA;IA9CH,MAAAk1D,sBAA4BpyD;IAgD3BoB,IAAAA;IAAA,KAAA;QAAA,IAAA,CAGMqxB,QAAM;YAAApvB,IAAAA;YAAAnG,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAASuD,uJAAA2G,KAAAA,CAAAA,IAAI9M,CAAAA,CAAAA,EAAAA,GAAAmG,GAAAA,IAAAA,MAAAnG,CAAAA,CAAA,CAAA,CAAA,EAAXkE,KAAOiC;YAAIqO,MAAAA;QAAAA;QAAArO,IAAAA;QAAA,IAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAA40D,SAAA50D,CAAAA,CAAA,EAAA,CAAA,KAAAu1B,OAAAlpB,UAAAA,IAAArM,CAAAA,CAAA,EAAA,CAAA,KAAAuF,QAAA;YAAAa,IAAAA;YAAApG,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGXwD,MAAA+uD,CAAAA,QAAAA,CACTnlD,SAAS6mB,KAAG,oJACL/pB,KAAAA,EAAG+pB,KAAG,CAAA,GACd72B,CAAAA,CAAAA,GAAAA,GAAAoG,GAAAA,IAAAA,MAAApG,CAAAA,CAAA,EAAA,CAAA,EAJamG,MAAAovB,OAAMlpB,UAAAA,CAAAqB,MAAAA,CAAmBknD,OAAOrvD,QAAMmvD,cAAgB,EAAC5pD,IAAAA,CACrEqC,8JAAAA,EAAW/G,GAGV,CACH,GAACpG,CAAAA,CAAAA,GAAAA,GAAA40D,OAAA50D,CAAAA,CAAA,EAAA,CAAA,GAAAu1B,OAAAlpB,UAAAA,EAAArM,CAAAA,CAAAA,GAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,GAAAA,GAAAmG;QAAA,OAAAA,MAAAnG,CAAAA,CAAA,EAAA,CAAA;QALemG,KAAAA;IAAAA;IAHlB,MAAAivD,YAAkBlxD;IAWS,IAAAiC,IAAAC;IAAApG,CAAAA,CAAAk1D,EAAAA,CAAAA,KAAAA,uBAAAl1D,CAAAA,CAAAA,GAAAA,KAAAo1D,YAAAA,CAEjBjvD,KAAAA,MAAA;QACR2iB,MAAAA,MAAYssC,UAAS11C,SAAAA,CAAWw1C,mBAAmB;QAAC,OAAA,MAAA;YAGlDpsC,KAAGC,YAAA;QAAA;IAEJ3iB,GAAAA,KAAA;QAAC8uD;QAAqBE,SAAS;KAAA,EAACp1D,CAAAA,CAAAA,GAAAA,GAAAk1D,qBAAAl1D,CAAAA,CAAAA,GAAAA,GAAAo1D,WAAAp1D,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,CAAAD,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAAAoG,KAAApG,CAAAA,CAAA,EAAA,CAAA,6MANnC2Q,YAAAA,EAAUxK,IAMPC,EAAgC;IAAC,IAAAC,IAAAE;IAAA,IAAAvG,CAAAA,CAAA,EAAA,CAAA,KAAA4E,OAAAs7C,SAAAA,EAAA;QAKlCmV,MAAAA,UAAgB9wC,OAAAi6B,IAAAA,CAAY55C,OAAKs7C,SAAU,EAAC38B,MAAAA,CAAAQ,CAAAA,KAAAhN,QAAA;YAExC,MAAA7W,YAAiB0E,OAAKs7C,SAAAA,CAAWnpC,GAAG,CAAA,EACpCu+C,UAAgBp1D,UAAQsD,GAAAA,gKAASoI,cAAAA,EAAW1L,UAAQsD,GAAI,GACxD8B,KAAWgwD,UAAUp1D,UAAQsD,GAAAA,+JAAOoI,aAAAA,EAAW1L,UAAQsD,GAAI;YAGvDugB,OAAAA,GAAAA,CAAIze,EAAE,CAAA,IAAA,CAAMgwD,WAAAA,CAGhBvxC,GAAAA,CAAIze,EAAE,CAAA,GAAIpF,SAAAA,GACH6jB;QAAG,GAAA,CAAA,CAGd;QACOQ,MAAAA,OAAAgxC,MAAAA,CAAcF,OAAO,GAACr1D,CAAAA,CAAA,EAAA,CAAA,GAAA4E,OAAAs7C,SAAAA,EAAAlgD,CAAAA,CAAAA,GAAAA,GAAAuG;IAAA,OAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAtBuG,KAAAA;IAjBT,MAAAivD,cAAoBnvD;IAkBCI,IAAAA;IAAA,OAAAzG,CAAAA,CAAAw1D,EAAAA,CAAAA,KAAAA,eAAAx1D,CAAAA,CAAAA,GAAAA,KAAAc,SAAAd,CAAAA,CAAA,EAAA,CAAA,KAAA4D,YAAAA,CAEd6C,MAAA;QAAA4Z,MACCm1C;QAAW5xD;QAAA9C;IAAAA,GAGlBd,CAAAA,CAAAA,GAAAA,GAAAw1D,aAAAx1D,CAAAA,CAAAA,GAAAA,GAAAc,OAAAd,CAAAA,CAAAA,GAAAA,GAAA4D,WAAA5D,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA,EAJMyG;AAIN;AC3OI,SAASgvD,qBAAqB,EAAC/yC,QAAAA,EAAkC,EAAG;IACnE,MAAA,EAAC9d,OAAAA,MAAAA,EAASutD,+JAAAA,iBAAAA,CAEVlgB,IAAAA,kNAAQvsB,UAAAA,EAAQ,MAAM;QACpBlc,MAAAA,OAAAA,aAAAA,GAAAA,IAAU+U,IAAI;QACpB3Z,OAAAA,OAAM61B,MAAAA,CAAOsqB,IAAAA,CAAKpJ,OAAAA,CAAS+Z,CAAAA,IAAMlsD,KAAI+T,GAAAA,6JAAIjW,iBAAAA,EAAeouD,EAAE1Q,GAAAA,CAAIxhD,GAAG,GAAGkyD,EAAE1Q,GAAG,CAAC,GACnEx7C;IAAAA,GACN;QAAC5E,OAAM61B,MAAAA,CAAOsqB,IAAI;KAAC,GAGhB,EAAC1kC,IAAAA,EAAMzc,SAAAA,EAAAA,GAAa+wD,0BAA0B;QAClD7qD,QAAQ,CAAA,UAAA,EAAa4Y,QAAQ,CAAA,CAAA,CAAA;IAAA,CAC9B;IAOM,OAAA;QAACrC,gNAJUqF,UAAAA,EAAQ,IACjBrF,KAAKvW,MAAAA,CAAQ2C,CAAAA,MAAQwlC,MAAM/xB,GAAAA,6JAAI5Y,iBAAAA,EAAemF,IAAIjJ,GAAG,CAAC,CAAC,GAC7D;YAAC6c;YAAM4xB,KAAK;SAAC;QAESruC;IAAS;AACpC;ACFA,MAAM+xD,kMAAgBp0D,SAAAA,mJAAOa,OAAI,CAAA,CAAA;;AAAA,CAAA,EAG3BwzD,6LAAiBr0D,SAAAA,CAAOmtB,GAAAA,CAAAA;;;AAAAA,CAAAA,EAIxB7sB,oLAAQN,SAAAA,CAAOO,KAAAA,CAAAA;;;;;;;;;;;;;;;;;;;;AAAAA,CAAAA;AAsBrB,SAAS+zD,2BAA2B,EAClClF,kBAAAA,EACmE,EAAG;IAChE,MAAA,EAACkE,QAAAA,EAAUjwD,OAAAA,MAAAA,EAAK,GAAIutD,6KAAAA,KACpB,EAAC/B,OAAAA,EAASW,wBAAAA,EAAAA,GAA4BL,wBAAwBC,kBAAkB,GAChF,EAACtwC,IAAAA,EAAAA,GAAQo1C,qBAAqB;QAClC/yC,UAAUiuC,mBAAmBjpD,IAAAA;IAC9B,CAAA,GACK,CAACghD,gBAAgBC,iBAAiB,CAAA,6MAAI14C,WAAAA,EAAwB,IAAI,GAElE6lD,YAAYlxD,OAAM61B,MAAAA,CAAOsqB,IAAAA,CAAKtiD,MAAAA,EAC9BX,SAAQi0D,0MAAAA,EAAc;QAC1B11C;QACA+vC;QACA4F,2LAAiBA,kBAAAA,CAAgB;QACjCC,+LAAqBA,sBAAAA,CAAoB;QACzCC,gMAAuBA,yBAAAA,CAAsB;QAAA,qFAAA;QAE7CC,oBAAoB,CAAA;QACpBC,cAAc;YACZC,eAAe;gBAAC36C,MAAM;oBAAC;oBAAY,SAAS;iBAAA;YAAC;YAC7C+3C,YAAY;gBAACO,UAAU;YAAE;YACzBsC,kBAAkBvF;QACpB;QACAwF,UAAW9N,CAAAA,MAAQA,IAAIjlD,GAAAA;QACvBolD,MAAM;YACJF;YACAC;YACA8E,eAAeA,CAAC7mD,YAAY4vD,SAAS31D,QAAU;QAAA;IACjD,CACD,GAEK,EAAC0oD,IAAAA,EAAAA,GAAQznD,MAAMqnD,WAAAA,CAAY;IAEjCx4C,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,IAAA,CACRkkD,SAAS;YAAC5tD,MAAM;YAAkBxG,YAAYkwD;QAAmB,CAAA,GAC1D,MAAM;YACF,SAAA;gBAAC1pD,MAAM;gBAAqBxG,YAAYkwD;YAAAA,CAAmB;QAAA,CAAA,GAErE;QAACA;QAAoBkE,QAAQ;KAAC;IAE3B4B,MAAAA,sNAAYnxC,cAAAA,EAAamjC,CAE3B,QAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAA;YACC,IAAG;YAEH,UAAU;YACV,OAAO;gBAACmI,SAAS;gBAAQp2C,OAAO;YAAA;YAE/BiuC,UAAAA,MAAIiO,eAAAA,CAAgB,EAAEltD,GAAAA,CAAKklD,CAC1B,OAAA,aAAA,GAAA,CAAA,GAAA,qMAAA,CAAA,gBAAA,EAAC,eAAkBA;oBAAAA,GAAAA,IAAAA;oBAAM,KAAKjG,MAAI5pC,QAAAA,CAASrb,GAAAA,GAAMkrD,KAAKppD,EAAAA;gBAAAA,EACvD;QAAA,GANImjD,MAAI5pC,QAAAA,CAASrb,GAAAA,GAAMilD,MAAInjD,EAO9B,GAED,CAAA,CAAE,GAECqxD,YAAY,CAAA,OAAA,EAAUb,SAAS,CAAA,eAAA,EAAkBvM,KAAK9mD,MAAM,CAAA,KAAA,CAAA;IAClE,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EACGkzD,iBAAc;QAAA,WAAU;QAAS,UAAU;QAAG,eAAY;QACzD,UAAA;YAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;gBAAK,WAAU;gBAAM,OAAM;gBAAS,UAAU;gBAAG,UAAU;gBAAG,SAAQ;gBACrE,UAAA;oBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAK;wBAAA,WAAU;wBAAM,OAAM;wBAC1B,UAAA;4BAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,yBAAuB,CAAA,CAAA;4BAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJACvB,OAAA,EAAK;gCAAA,MAAM;gCAAG,OAAK,CAAA;gCACjBgB,UACH;4BAAA,CAAA;yBAAA;oBAAA,CACF;oBACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,gBAAA;wBAAe;oBAAa,CAAA;iBAAA;YAAA,CAC/B;YAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACC,gBACC;gBAAA,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2BAA0B;oBAAA;oBACzB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,OACC;wBAAA,UAAA;4BAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,SAAA;gCACE70D,UAAM80D,MAAAA,eAAAA,CAAkBptD,EAAAA,GAAAA,CAAKkpD,CAAAA,cAC3B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;wCAAI,IAAG;wCACLA,UAAYmE,YAAAA,OAAAA,CAAQrtD,GAAAA,CAAKu5B,CACxB,SAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,yBAEC;gDAAA;gDACA;4CAFKA,GAAAA,OAAOz9B,EAAAA,CAIf;oCAPeotD,GAAAA,YAAYptD,EAQ9B,CACD;4BACH,CAAA;4BACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,SAAA;gCAAOxD,UAAMqnD,MAAAA,WAAAA,CAAAA,EAAcI,IAAAA,CAAK//C,GAAAA,CAAIitD,SAAS;4BAAE,CAAA;yBAAA;oBAClD,CAAA;gBACF,CAAA;YAAA,CACF;YACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;gBAAK,SAAS;gBAAY,SAAS;gBAAG,KAAK;gBAAG,UAAU;gBACvD,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,4BAAA;oBAA2B;gBAAA,CAAa;YAC3C,CAAA;SAAA;IAAA,CACF;AAEJ;AAEO,SAASK,sBAAsB/2D,KAAAA,EAAmC;IACjEK,MAAAA,aAASC,oKAAAA,KACTqiB,WAAW3iB,MAAM+E,IAAAA,CAAKiyD,cAAAA,EAEtBt2D,aAAaL,OAAOI,GAAAA,CAAIkiB,QAAQ;IACtC,IAAI,CAACjiB,cAAc,wJAACu2D,uBAAAA,EAAqBv2D,UAAU,GACjD,MAAM,IAAIuE,MAAM,CAAA,aAAA,EAAgB0d,QAAQ,CAAA,oCAAA,CAAsC;IAG9E,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,iBAAA,EAAA;QACC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,4BAAA;YAA+B3iB,GAAAA,KAAAA;YAAO,oBAAoBU;QAAAA,CAAW;IACxE,CAAA;AAEJ;AC7IA,MAAMw2D,8BAA+Br4C,CAI/B,YAAA;IACE,MAAA,EAACsC,SAAAA,EAAW+lC,YAAAA,EAAchkD,MAAAA,EAAAA,GAAU2b;IAE1C,OAAOsC,WAAW1X,IAAKlB,CACjBA,OAAAA,KAAK/C,MAAAA,EAAQtC,SACR;YACL,GAAGqF,IAAAA;YACHwK,UAAU7P,WAAWqF,KAAK/C,MAAAA,EAAQtC;QAAAA,IAIlCqF,MAAM/C,QAAQ04C,KACT;YACL,GAAG31C,IAAAA;YACHwK,gJAAUokD,UAAAA,EAAQjQ,cAAchJ,IAAI31C,MAAM/C,QAAQ04C,8JAAM92C,cAAW;QAAA,IAIhE;YAAC,GAAGmB,IAAAA;YAAMwK,UAAU,CAAA;QAAA,CAC5B;AACH;AAEO,SAASq0C,iBAA4BtmD,KAAAA,EAA6B;IACjEs2D,MAAAA,WAAWnjD,mNAAAA,EAAkBnT,KAAK;IACnCu2D,sJAAAA,UAAAA,EAAcD,SAASljD,OAAAA,EAASpT,KAAK,KAAA,CACxCs2D,SAASljD,OAAAA,GAAUpT,KAAAA,GAEds2D,SAASljD,OAAAA;AAClB;AAKa0hD,MAAAA,oBAAgB3wC,6MAAAA,EAAK,SAAAjlB,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GAGhC,EAAAgK,KAAAA,EAAAy1C,UAAAA,EAAA56C,MAAAA,KAAAA,EAAA+iB,OAAAA,EAAAA,GAA2C9nB,OAC3C,EAAA2H,MAAAs1C,gBAAAA,EAAA,+JAAiC3K,YAAAA,KAEjC,EAAAglB,eAAA/2D,EAAAA,EAAA8nD,uBAAAxnD,EAAAA,EAAAugB,cAAAA,EAAAD,SAAAA,EAAAtC,OAAAA,EAAA,GAMI9Z,OALFuyD,gBAAA/2D,OAAyBqJ,KAAAA,IAAT,YAAhBrJ,IACA8nD,wBAAAxnD,OAAmC+I,KAAAA,4JAAAxC,cAAAA,GAAnCvG,IAKF,EAAA02D,iBAAAt2D,EAAAA,EAAA8I,QAAAA,OAAAA,EAAAA,GAAgD8U,SAAzC04C,kBAAAt2D,OAA6B2I,KAAAA,4JAAAxC,cAAAA,GAA7BnG,IACPuE,SAAe4hD,iBAAiBvoC,QAAOrZ,MAAAA,IAAA44C,YAAuB,GAC9DoZ,aAAmBzyD,MAAIm4C,MAAAA;IAAOh8C,IAAAA;IAAA,KAAA;QAAA4B,IAAAA;QAAA7C,CAAAA,CAAA8J,CAAAA,CAAAA,KAAAA,WAAA9J,CAAAA,CAAAA,EAAAA,KAAAuF,SAAAA,CAER1C,MAAAq/C,wBAAwBp4C,SAAQvE,MAAM,GAACvF,CAAAA,CAAAA,EAAAA,GAAA8J,SAAA9J,CAAAA,CAAAA,EAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,EAAAA,GAAA6C,GAAAA,IAAAA,MAAA7C,CAAAA,CAAA,CAAA,CAAA;QAA3D,MAAAonD,cAAoBvkD;QAChBukD,IAAAA,aAAW3kD,WAAc,GAAA;YAAExB,KAAOmmD,WAAAA,CAAW,CAAA,CAAA;YAAG5yC,MAAAA;QAAAA;QACpD,KAAA;IAAA;IAHF,MAAAkO,WAAiBzhB,IAMjB,CAAAgC,QAAAolD,SAAA,CAAA,GAA4Bt4B,wBAC1B,UACArN,YAAY5d,MAAIQ,EAAAA,EAChB+xD,aACF,GAEA,EAAAj2D,KAAAA,EAAAA,GAAgBkW,0KAAAA,EAAYxS,KAAI;IAAC,IAAAjC,IAAAC;IAAA9C,CAAAA,CAAAA,EAAAA,KAAAs3D,kBAAAA,CAIxBx0D,KAAAw0D,iBAAe70D,SAAY,IAAA;QAAAw7C,IAAQqZ;IAAetZ,IAAAA,kBAAoBh+C,CAAAA,CAAAA,EAAAA,GAAAs3D,iBAAAt3D,CAAAA,CAAAA,EAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,CAAA,CAAA,EAA7E6C,KAAOC;IADT00D,MAAAA,mBAAyB30D,IAIzB,CAAAokD,cAAAqB,YAAA,CAAA,GAAqCv4B,wBACnC,cACArN,YAAY5d,MAAIQ,EAAAA,EAChBkyD,gBACF;IAAC,IAAAtzD,IAAAiC;IAAAnG,CAAAA,CAAAiD,CAAAA,CAAAA,KAAAA,UAAAjD,CAAAA,CAAAA,EAAAA,KAAAkhB,aAAAlhB,CAAAA,CAAA,CAAA,CAAA,KAAAinD,eAAAA,CAIG9gD,KAAA8wD,4BAAA;QAAA/1C;QAAA+lC;QAAAhkD;IAAAA,CAIC,GAACjD,CAAAA,CAAAA,EAAAA,GAAAiD,QAAAjD,CAAAA,CAAAA,EAAAA,GAAAkhB,WAAAlhB,CAAAA,CAAAA,EAAAA,GAAAinD,cAAAjnD,CAAAA,CAAAA,EAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,CAAA,CAAA,EAAAkE,KAJFiC;IAFJsxD,MAAAA,6BAAmCvzD,IAUnCwzD,oBAA0Bz0D,WAAW;IAAWmD,IAAAA;IAAApG,CAAAA,CAAA,CAAA,CAAA,KAAA03D,qBAAA13D,CAAAA,CAAAiD,EAAAA,CAAAA,KAAAA,UAAAjD,CAAAA,CAAAD,EAAAA,CAAAA,KAAAA,SAAAC,CAAAA,CAAAA,GAAAA,KAAAinD,eAAAA,CAC7B7gD,KAAAsxD,oBAChB,aAAA,GAAA,CAAA,GAAA,qMAAA,CAAA,gBAAA,EAAA,uBAAA;QAA0B33D,GAAAA,KAAAA;QAAY,KAAAA,MAAK+E,IAAAA,CAAAQ,EAAAA;IAAQ,CAAA,IAEpD,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,kBAAA;QAAgB,GAAKvF,KAAAA;QAAkBknD,WAAAA;QAAsBhkD;IAC/D,CAAA,GAAAjD,CAAAA,CAAAA,EAAAA,GAAA03D,mBAAA13D,CAAAA,CAAAA,GAAAA,GAAAiD,QAAAjD,CAAAA,CAAAA,GAAAA,GAAAD,OAAAC,CAAAA,CAAAA,GAAAA,GAAAinD,cAAAjnD,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAJD2gB,MAAAA,aAAmBva,IAOKC,KAAAkxD,cAAcva;IAAgBz2C,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAA03D,oBAAAA,CAK3CnxD,MAAAmxD,oBAAiB,CAAA,IAAA;QAAA/kD,iBAAA;QAAAE,UAAA;IAAA,GAA6C7S,CAAAA,CAAAA,GAAAA,GAAA03D,mBAAA13D,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAA8E,MAAAm4C,MAAAA,GAAAA,CAGlEx2C,MAAAqkB,QAIA9qB,CAAAA,CAAA,EAAA,CAAA,GAAA8E,MAAAm4C,MAAAA,EAAAj9C,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA7I,CAAAA,CAAAiK,EAAAA,CAAAA,KAAAA,SAAAjK,CAAAA,CAAAooD,EAAAA,CAAAA,KAAAA,yBAAApoD,CAAAA,CAAAmhB,EAAAA,CAAAA,KAAAA,kBAAAnhB,CAAAA,CAAAA,GAAAA,KAAAy3D,8BAAAz3D,CAAAA,CAAA,EAAA,CAAA,KAAAqoD,aAAAroD,CAAAA,CAAA,EAAA,CAAA,KAAAsoD,gBAAAtoD,CAAAA,CAAA,EAAA,CAAA,KAAAoB,QAAAA,CAEDyH,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,YACQoB;QAAAA;QACgBm+C;QACPjnC;QACLs2C,WAAAA;QACApP;QACGC;QACPlnD;IACP,CAAA,GAAApB,CAAAA,CAAAA,GAAAA,GAAAiK,OAAAjK,CAAAA,CAAAA,GAAAA,GAAAooD,uBAAApoD,CAAAA,CAAAA,GAAAA,GAAAmhB,gBAAAnhB,CAAAA,CAAAA,GAAAA,GAAAy3D,4BAAAz3D,CAAAA,CAAAA,GAAAA,GAAAqoD,WAAAroD,CAAAA,CAAAA,GAAAA,GAAAsoD,cAAAtoD,CAAAA,CAAAA,GAAAA,GAAAoB,OAAApB,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAAnJ,CAAAA,CAAAA,GAAAA,KAAA0/C,cAAA1/C,CAAAA,CAAA6nB,EAAAA,CAAAA,KAAAA,WAAA7nB,CAAAA,CAAA2gB,EAAAA,CAAAA,KAAAA,cAAA3gB,CAAAA,CAAA,EAAA,CAAA,KAAAuG,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAyG,OAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAA6I,MAAAA,CArBJM,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAC,MACS;QAAA,WAAA;QACJ0e,IAAAA;QACM,UAAA;QAAG,GACRthB,GAAAA;QACKm5C,UAAS;QAElBj5C,UAAAA;YAAAA;YAMDoC;YASC8X;SAAAA;IAAAA,CACH,GAAO3gB,CAAAA,CAAAA,GAAAA,GAAA0/C,YAAA1/C,CAAAA,CAAAA,GAAAA,GAAA6nB,SAAA7nB,CAAAA,CAAAA,GAAAA,GAAA2gB,YAAA3gB,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAAAoJ,IAAAA;IAAA,OAAApJ,CAAAA,CAAAmJ,EAAAA,CAAAA,KAAAA,OAAAnJ,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAxBT+C,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,iBAAA,EAAqB;QAAA,MAAA/C;QACpB8C,UAwBF;IAAA,CAAA,GAAiBnJ,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAoJ,GAAAA,IAAAA,MAAApJ,CAAAA,CAAA,EAAA,CAAA,EAzBjBoJ;AAyBiB,CAEpB;AChJM,MAAMuuD,uBAAuB3yD,MAAM;IAIxC4yD,YACE12D,OAAAA,EACA22D,UAAAA,EACAC,WAAAA,EACAC,IAAAA,CACA;QACM72D,KAAAA,CAAAA,OAAO,GACb,IAAA,CAAKwG,IAAAA,GAAO;QACZ,MAAMw5C,UAAU,OAAO4W,cAAgB,MAAc,cAAc,GAAGA,WAAW,EAAA;QAC5E/6C,IAAAA,CAAAA,IAAAA,GAAAA,CAAQ86C,cAAc,CAAA,CAAA,EAAIv9B,MAAAA,CAAOy9B,OAAO,GAAG7W,OAAO,CAAA,EAAA,EAAK6W,IAAI,CAAA,CAAA,CAAA,GAAM7W,OAAO;IAAA;IAG/E8W,YAAY1yD,EAAAA,EAA8B;QACxC,OAAA,IAAA,CAAK2yD,MAAAA,GAAS3yD,IACP,IAAA;IAAA;AAEX;AAGY4yD,IAAAA,WAAAA,aAAAA,GAAAA,SAAAA,SAAAA,EAAQ;IAARA,OAAAA,UAAQ,WAAA,GAAA,8BAARA,UAAQ,cAAA,GAAA,4BAARA,UAAQ,eAAA,GAAA,6BAARA,UAAQ,iBAAA,GAAA,+BAARA,UAAQ,kBAAA,GAAA,qCAARA,UAAQ,oBAAA,GAAA,kCAARA,UAAQ,sBAAA,GAAA,oCAARA,UAAQ,oBAAA,GAAA,kCAARA,UAAQ,qBAAA,GAAA,mCAARA,UAAQ,wBAAA,GAAA,sCAARA,UAAQ,yBAAA,GAAA,uCAARA,UAAQ,yBAAA,GAAA,uCAARA,UAAQ,4BAAA,GAAA,0CAARA,UAAQ,oCAAA,GAAA,kDAARA,UAAQ,sCAAA,GAAA,oDAARA;AAAQ,EAAA,CAAA,CAAA;ACtBb,MAAMC,sBAAoC;IAC/C/2D,OAAO;IACPqgB,MAAM;QACJrgB,OAAO;YACL2V,KAAK;YACLqhD,IAAI54D;QAAAA;IAER;IACAkI,MAAM;IACNu2C,IAAI;QAAC;YAACC,OAAO;YAAc9uC,WAAW;QAAO,CAAA;KAAA;AAC/C,GAEaipD,sBAAoC;IAC/Cj3D,OAAO;IACPqgB,MAAM;QACJrgB,OAAO;YACL2V,KAAK;YACLqhD,IAAI54D;QAAAA;IAER;IACAkI,MAAM;IACNu2C,IAAI;QAAC;YAACC,OAAO;YAAc9uC,WAAW;QAAO,CAAA;KAAA;AAC/C,GAEakpD,mCAAmCH,qBAEnCI,2BAA2C;IACtDJ;IAAAA,aAAAA;IACAE;CAAqB;ACpBPG,SAAAA,uBACdlwD,IAAAA,EACA2B,KAAAA,EACA8S,IAAAA,EACU;IACHzU,OAAAA,gBAAgBmwD,kBAAkBnwD,KAAKowD,SAAAA,CAAU;QAAC37C;QAAM9S;IAAM,CAAA,IAAI3B;AAC3E;AAwDO,MAAMmwD,gBAAkD;IAAA,yDAAA,GAI7Db,YAIYe,QAAAA,EACVC,IAAAA,CACA;QAAA,IAAA,CAFUD,QAAAA,GAAAA,UAGV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAC;IAAA;IAAA;;;;GAAA,GAQ7B5wD,OAAOA,MAAAA,EAA6C;QAClD,OAAO,IAAA,CAAK6wD,KAAAA,CAAM;YAAC7wD;QAAAA,CAAO;IAAA;IAAA;;;GAAA,GAO5B8wD,YAAuC;QACrC,OAAO,IAAA,CAAKF,IAAAA,CAAK5wD,MAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnBmP,OAAOA,MAAAA,EAAiC;QACtC,OAAO,IAAA,CAAK0hD,KAAAA,CAAM;YAAC1hD;QAAAA,CAAO;IAAA;IAAA;;;GAAA,GAO5BqL,YAAuC;QACrC,OAAO,IAAA,CAAKo2C,IAAAA,CAAKzhD,MAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnB/V,MAAMA,KAAAA,EAAgC;QACpC,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;QAAAA,CAAM;IAAA;IAAA;;;;GAAA,GAQ3B23D,WAA+B;QAC7B,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnBqgB,KAAKA,IAAAA,EAAgD;QACnD,OAAO,IAAA,CAAKo3C,KAAAA,CAAM;YAACp3C;QAAAA,CAAK;IAAA;IAAA;;;GAAA,GAO1Bu3C,UAA+C;QAC7C,OAAO,IAAA,CAAKJ,IAAAA,CAAKn3C,IAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnBE,MAAMA,KAAAA,EAAgC;QACpC,OAAO,IAAA,CAAKk3C,KAAAA,CAAM;YAACl3C;QAAAA,CAAM;IAAA;IAAA;;;GAAA,GAO3Bs3C,WAAqC;QACnC,OAAO,IAAA,CAAKL,IAAAA,CAAKj3C,KAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnB3e,KAAKA,IAAAA,EAA8D;QACjE,OAAO,IAAA,CAAK61D,KAAAA,CAAM;YAAC71D;QAAAA,CAAK;IAAA;IAAA;;;GAAA,GAO1Bk2D,UAAmC;QACjC,OAAO,IAAA,CAAKN,IAAAA,CAAK51D,IAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnBuC,OAAOA,MAAAA,EAA6C;QAClD,OAAO,IAAA,CAAKszD,KAAAA,CAAM;YAACtzD;QAAAA,CAAO;IAAA;IAAA;;;GAAA,GAO5B4zD,YAAuC;QACrC,OAAO,IAAA,CAAKP,IAAAA,CAAKrzD,MAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnBuc,aAAaA,eAAe,CAAA,CAAA,EAAuB;QACjD,OAAO,IAAA,CAAK+2C,KAAAA,CAAM;YAAC/2C,cAAcvT,CAAQuT,CAAAA;QAAAA,CAAc;IAAA;IAAA;;;GAAA,GAOzDs3C,kBAAmD;QACjD,OAAO,IAAA,CAAKR,IAAAA,CAAK92C,YAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB42C,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAe;QACpD,MAAA,EAAC3b,KAAAA,EAAO4G,MAAAA,EAAQmP,MAAAA,EAAAA,GAAU,IAAA,CAAKyhD,IAAAA;QACrC,IAAI,CAACx3D,OAAO;YACV,MAAM22D,OAAO,OAAO/vD,UAAW,WAAW,CAAA,SAAA,EAAYA,MAAM,CAAA,CAAA,CAAA,GAAM2B,KAAAA;YAC5D,MAAA,IAAIguD,eACR,qCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KAAAA,EACR8tD,IACF,EAAEC,WAAAA,CAAYE,SAASmB,cAAc;QAAA;QAGnC,IAAA,CAACrxD,UAAU,CAACmP,QACd,MAAM,IAAIwgD,eACR,CAAA,2DAAA,EAA8D,IAAA,CAAKiB,IAAAA,CAAKx3D,KAAK,EAAA,EAC7Ewd,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KAAAA,EACR,CAAA,CAAA,EAAI7I,KAAK,CAAA,CAAA,CACX,EAAE42D,WAAAA,CAAYE,SAASoB,yBAAyB;QAGlD,IAAIniD,UAAUnP,QACZ,MAAM,IAAI2vD,eACR,yCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KAAAA,EACR,CAAA,CAAA,EAAI7I,KAAK,CAAA,CAAA,CACX,EAAE42D,WAAAA,CAAYE,SAASqB,oCAAoC;QAGtD,OAAA;YAAC,GAAG,IAAA,CAAKX,IAAAA;YAAMx3D;QAAK;IAAA;IAAA;;;GAAA,GAO7By3D,MAAMW,QAAAA,EAA6C;QACjD,MAAMC,UAAU,IAAIhB,gBAAgB,IAAA,CAAKE,QAAQ;QACjDc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;AAUO,SAASC,oBACdxwD,OAAAA,EACA,EAAC+0C,EAAAA,EAAI78C,KAAAA,EAAOqgB,IAAAA,EAAkB,EAC9B6hC,kBAAAA,EACiB;IACjB,IAAImW,UAAU,IAAIhB,gBAAgBvvD,OAAO,EACtCyY,KAAAA,CAAM,SAAS,EACfvgB,KAAAA,CACC8H,QAAQuY,IAAAA,CAAK/gB,CAAAA,CAAE,oCAAoC;QAAA,+EAAA;QAEjD03D,IAAI;QACJ7zB,SAAS;YAACnjC;QAAAA;IAAK,CAChB,CACH,EACC4B,IAAAA,oJAAK22D,WAAQ,EACb3xD,MAAAA,CAAO,cAAc,EACrBzC,MAAAA,CAAO;QAAC04C;QAAIqF;IAAAA,CAAmB;IAElC,OAAI7hC,QAAAA,CACFg4C,UAAUA,QAAQh4C,IAAAA,CAAKA,IAAI,CAAA,GAGtBg4C;AACT;AAGgBG,SAAAA,kCACd1wD,OAAAA,EACAwZ,QAAAA,EACmB;IACb,MAAA,EAACtiB,MAAAA,EAAAA,GAAU8I,SACXjC,OAAO,OAAOyb,YAAa,WAAWtiB,OAAOI,GAAAA,CAAIkiB,QAAQ,IAAIA;IAC/D,OAAA,CAACzb,QAAQ,CAAA,CAAE,eAAeA,IAAAA,IACrB,CAAA,CAAA,GAAA,CAIPA,KAAK4yD,SAAAA,GAAY5yD,KAAK4yD,SAAAA,CAAUv/B,MAAAA,CAAOi+B,wBAAwB,IAAIA,wBAAAA,EACnE/uD,GAAAA,CAAKq5C,CAAAA,WACL6W,oBAAoBxwD,SAAS25C,UAAUD,sBAAsB37C,MAAM47C,SAAS5E,EAAE,CAAC,CACjF;AACF;AC3TgB6b,SAAAA,4BACdxxD,IAAAA,EACA2B,KAAAA,EACA8S,IAAAA,EACe;IACRzU,OAAAA,gBAAgByxD,uBAAuBzxD,KAAKowD,SAAAA,CAAU;QAAC37C;QAAM9S;IAAM,CAAA,IAAI3B;AAChF;AAmBO,MAAMyxD,qBAA4D;IAAA,uBAAA,GAAA,0BAAA,GAQvEnC,YAIYe,QAAAA,EACVC,IAAAA,CACA;QAAA,IAAA,CAFUD,QAAAA,GAAAA,UAGV,IAAA,CAAKn1D,GAAAA,GAAMo1D,OAAOA,KAAKtzD,EAAAA,GAAK,IAC5B,IAAA,CAAK00D,MAAAA,GAASpB,OAAOA,KAAKx3D,KAAAA,GAAQ,IAClC,IAAA,CAAK64D,KAAAA,GAAQrB,OAAOA,KAAKn3C,IAAAA,GAAO9X,KAAAA;IAAAA;IAAAA;;;;GAAAA,GAQlCrE,GAAGA,EAAAA,EAAkC;QAC5B,OAAA,IAAIy0D,qBAAqB,IAAA,CAAKpB,QAAAA,EAAU;YAACrzD;YAAIlE,OAAO,IAAA,CAAK44D,MAAAA;YAAQv4C,MAAM,IAAA,CAAKw4C,KAAAA;QAAAA,CAAM;IAAA;IAAA;;;GAAA,GAO3FC,QAAgB;QACd,OAAO,IAAA,CAAK12D,GAAAA;IAAAA;IAAAA;;;;GAAAA,GAQdpC,MAAMA,KAAAA,EAAqC;QAClC,OAAA,IAAI24D,qBAAqB,IAAA,CAAKpB,QAAAA,EAAU;YAACv3D;YAAOkE,IAAI,IAAA,CAAK9B,GAAAA;YAAKie,MAAM,IAAA,CAAKw4C,KAAAA;QAAAA,CAAM;IAAA;IAAA;;;GAAA,GAOxFlB,WAAmB;QACjB,OAAO,IAAA,CAAKiB,MAAAA;IAAAA;IAAAA;;;;GAAAA,GAQdv4C,KAAKA,IAAAA,EAAqD;QACjD,OAAA,IAAIs4C,qBAAqB,IAAA,CAAKpB,QAAAA,EAAU;YAACl3C;YAAMnc,IAAI,IAAA,CAAK9B,GAAAA;YAAKpC,OAAO,IAAA,CAAK44D,MAAAA;QAAAA,CAAO;IAAA;IAAA;;;GAAA,GAOzFhB,UAA+C;QAC7C,OAAO,IAAA,CAAKiB,KAAAA;IAAAA;IAAAA;;;;GAAAA,GAQdvB,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAoB;QACzD,MAAA,EAACvZ,GAAAA,EAAKw2D,MAAAA,EAAQC,KAAAA,EAAAA,GAAS,IAAA;QAC7B,IAAI,CAACz2D,KACG,MAAA,IAAIm0D,eACR,0CACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KAAAA,EACR+vD,MACF,EAAEhC,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,IAAI,CAACH,QACG,MAAA,IAAIrC,eACR,6CACA/4C,QAAQ7B,IAAAA,EACRvZ,GACF,EAAEw0D,WAAAA,CAAYE,SAASmB,cAAc;QAGhC,OAAA;YACL/zD,IAAI9B;YACJpC,OAAO44D;YACPv4C,MAAMw4C;QACR;IAAA;AAEJ;AClIO,MAAMG,oBAAoB;AAEjBC,SAAAA,WACd/0D,EAAAA,EACAuyD,UAAAA,EACAC,WAAAA,EACQ;IACR,IAAI,OAAOxyD,MAAO,UAChB,MAAM,IAAIqyD,eACR,CAAA,8CAAA,EAAiD,OAAOryD,EAAE,EAAA,EAC1DuyD,YACAC,WACF;IAGF,MAAM,CAACwC,cAAc,CAAA,GAAIh1D,GAAGi1D,KAAAA,CAAMH,iBAAiB,KAAK,CAAE,CAAA;IACtDE,IAAAA,gBACF,MAAM,IAAI3C,eACR,CAAA,4CAAA,EAA+C2C,cAAc,CAAA,CAAA,CAAA,EAC7DzC,YACAC,WACF;IAGExyD,IAAAA,GAAGw0C,UAAAA,CAAW,UAAU,GAC1B,MAAM,IAAI6d,eACR,gDACAE,YACAC,WACF;IAGKxyD,OAAAA;AACT;AC/BgBk1D,SAAAA,mBAAmBp5D,KAAAA,EAAekE,EAAAA,EAAqB;IACjEA,IAAAA,IACKA,OAAAA;IAGHm1D,MAAAA,qJAAaC,UAAAA,EAAUt5D,KAAK;IAE3Bg5D,OAAAA,kBAAkBO,IAAAA,CAAKF,UAAU,4IAAIC,UAAAA,2IAAUE,UAAAA,EAAQx5D,KAAK,CAAC,IAAIq5D;AAC1E;ACqEO,MAAMI,iBAAoD;IAAA,oCAAA,GAI/DjD,YAAYgB,IAAAA,CAAuB;QACjC,IAAA,CAAKA,IAAAA,GAAO;YAACh6C,SAAS,CAAC;YAAG,GAAIg6C,QAAc,CAAA,CAAA;QAAG;IAAA;IAAA;;;GAAA,GAOjDtzD,GAAGA,EAAAA,EAA8B;QAC/B,OAAO,IAAA,CAAKuzD,KAAAA,CAAM;YAACvzD;QAAAA,CAAG;IAAA;IAAA;;GAAA,GAMxB40D,QAAkC;QAChC,OAAO,IAAA,CAAKtB,IAAAA,CAAKtzD,EAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBlE,MAAMA,KAAAA,EAAiC;QACrC,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;YAAOkE,IAAIk1D,mBAAmBp5D,OAAO,IAAA,CAAKw3D,IAAAA,CAAKtzD,EAAE;QAAA,CAAE;IAAA;IAAA;;GAAA,GAMxEyzD,WAAwC;QACtC,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBqgB,KAAKA,IAAAA,EAAiD;QACpD,OAAO,IAAA,CAAKo3C,KAAAA,CAAM;YAACp3C;QAAAA,CAAK;IAAA;IAAA;;GAAA,GAM1Bu3C,UAA+C;QAC7C,OAAO,IAAA,CAAKJ,IAAAA,CAAKn3C,IAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB5K,MAAMA,KAAAA,EAAgC;QACpC,OAAO,IAAA,CAAKgiD,KAAAA,CAAM;YAAChiD;QAAAA,CAAM;IAAA;IAAA;;GAAA,GAM3BikD,WAAwC;QACtC,OAAO,IAAA,CAAKlC,IAAAA,CAAK/hD,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB8Y,UAAUA,UAAAA,EAA4C;QACpD,OAAO,IAAA,CAAKkpC,KAAAA,CAAM;YAAClpC,WAAAA;QAAAA,CAAU;IAAA;IAAA;;GAAA,GAM/BorC,eAAgD;QAC9C,OAAO,IAAA,CAAKnC,IAAAA,CAAKjpC,SAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB/Q,QAAQA,OAAAA,EAAqD;QAC3D,OAAO,IAAA,CAAKi6C,KAAAA,CAAM;YAACj6C;QAAAA,CAAQ;IAAA;IAAA;;GAAA,GAM7Bo8C,aAAyD;QAChD,OAAA,IAAA,CAAKpC,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC;IAAA;IAAA;;;GAAA,GAO/BsC,UAAUA,SAAAA,EAA6D;QACrE,OAAO,IAAA,CAAK23C,KAAAA,CAAM;YAAC33C;QAAAA,CAAU;IAAA;IAAA;;GAAA,GAM/B6wB,eAAgD;QAC9C,OAAO,IAAA,CAAK6mB,IAAAA,CAAK13C,SAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBC,eAAeA,cAAAA,EAA4E;QACzF,OAAO,IAAA,CAAK03C,KAAAA,CAAM;YAAC13C;QAAAA,CAAe;IAAA;IAAA;;GAAA,GAMpC85C,oBAA0D;QACxD,OAAO,IAAA,CAAKrC,IAAAA,CAAKz3C,cAAAA;IAAAA;IAGnB+5C,gBAAgBA,eAAAA,EAAkD;QAChE,OAAO,IAAA,CAAKrC,KAAAA,CAAM;YAACqC;QAAAA,CAAgB;IAAA;IAAA;;;;GAAA,GAQrCxC,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAgB;QACrD,MAAA,EAACzX,EAAAA,EAAIlE,KAAAA,EAAOyV,KAAAA,EAAO+H,SAASu8C,gBAAAA,EAAkBxrC,WAAAA,UAAAA,EAAAA,GAAa,IAAA,CAAKipC,IAAAA;QACtE,IAAI,CAACtzD,IACG,MAAA,IAAIqyD,eACR,mDACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,IAAI,CAACxqC,YACG,MAAA,IAAIgoC,eACR,0DACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASiC,WAAW;QAG7B,OAAA;YACL70D,IAAI+0D,WAAW/0D,IAAIsZ,QAAQ7B,IAAAA,EAAM6B,QAAQ3U,KAAK;YAC9C7I;YACA6F,MAAM;YACN4P;YACA8Y,WAAAA;YACAurC,iBAAiB,IAAA,CAAKtC,IAAAA,CAAKsC,eAAAA;YAC3Bt8C,SAASu8C,oBAAoB,CAAC;YAC9Bj6C,WAAAA,CAAY,IAAA,CAAK03C,IAAAA,CAAK13C,SAAAA,IAAa,CAAA,CAAA,EAAI1X,GAAAA,CAAI,CAAClB,MAAMwV,IAChD06C,uBAAuBlwD,MAAMwV,GAAGc,QAAQ7B,IAAI,CAC9C;YACAoE,gBAAAA,CAAiB,IAAA,CAAKy3C,IAAAA,CAAKz3C,cAAAA,IAAkB,CAAI3X,CAAAA,EAAAA,GAAAA,CAAI,CAAClB,MAAMwV,IAC1Dg8C,4BAA4BxxD,MAAMwV,GAAGc,QAAQ7B,IAAI,CACnD;QACF;IAAA;IAAA;;;GAAA,GAOF87C,MAAMW,QAAAA,EAAiD;QAC/CC,MAAAA,UAAU,IAAIoB,iBAAiB;QACrCpB,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;AC/PsB2B,eAAAA,uBACpBC,SAAAA,EACA/1D,EAAAA,EAC6B;IACvB4G,MAAAA,QAAQ,2CACRtF,cAAaU,4KAAAA,EAAehC,EAAE,GAC9BqG,sKAAUC,aAAAA,EAAWtG,EAAE;IAQ7B,OAAA,CANc,MAAM+1D,kKAAUrtD,gCAA6B,EAAEP,KAAAA,CAC3DvB,OACA;QAACtF;QAAY+E;IAAAA,GACb;QAACS,KAAK;IACR,CAAA,CAAA,CAAA,CAEa,CAAC,CAAA;AAChB;ACIO,MAAekvD,mBAEtB;IAAA,+BAAA,GAEY1C,OAAc,CAAC,EAAA;IAAA;;;GAAA,GAMzBtzD,GAAGA,EAAAA,EAA0B;QAC3B,OAAO,IAAA,CAAKuzD,KAAAA,CAAM;YAACvzD;QAAAA,CAAG;IAAA;IAAA;;GAAA,GAKxB40D,QAAqB;QACnB,OAAO,IAAA,CAAKtB,IAAAA,CAAKtzD,EAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBlE,MAAMA,KAAAA,EAA6B;QACjC,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;YAAOkE,IAAI,IAAA,CAAKszD,IAAAA,CAAKtzD,EAAAA,4IAAMi2D,UAAAA,EAAUn6D,KAAK;QAAA,CAAE;IAAA;IAAA;;GAAA,GAMjE23D,WAA2B;QACzB,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB4B,KAAKA,IAAAA,EAA2D;QAC9D,OAAO,IAAA,CAAK61D,KAAAA,CAAM;YAAC71D;QAAAA,CAAK;IAAA;IAAA;;GAAA,GAM1Bk2D,UAAyB;QACvB,OAAO,IAAA,CAAKN,IAAAA,CAAK51D,IAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB01D,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAe;QACpD,MAAA,EAACzX,EAAAA,EAAIlE,KAAAA,EAAO4B,IAAAA,EAAAA,GAAQ,IAAA,CAAK41D,IAAAA;QAC/B,IAAI,CAACtzD,IACG,MAAA,IAAIqyD,eACR,kCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,IAAI,CAAC/4D,OACG,MAAA,IAAIu2D,eACR,qCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASmB,cAAc;QAGhC,OAAA;YACL/zD,IAAI+0D,WAAW/0D,IAAIsZ,QAAQ7B,IAAAA,EAAM6B,QAAQ3U,KAAK;YAC9C7I;YACA4B;QACF;IAAA;AAQJ;AAEA,SAASw4D,eAAe56B,IAAAA,EAAyE;IACxF,OAAA,OAAQA,KAAgC83B,SAAAA,IAAc;AAC/D;AAGgB+C,SAAAA,mBACdnzD,IAAAA,EACA2B,KAAAA,EACA8S,IAAAA,EACM;IACN,OAAOy+C,eAAelzD,IAAI,IAAIA,KAAKowD,SAAAA,CAAU;QAAC37C;QAAM9S;IAAM,CAAA,IAAI3B;AAChE;ACzGA,MAAMozD,kBAAmB9C,CACvBz1D,WAAAA,mKAAAA,EAASy1D,IAAI,KAAKA,KAAK3xD,IAAAA,KAAS;AAM3B,MAAM00D,6BAA6BL,mBAGxC;IAAA,oEAAA,GAIA1D,YAKEgE,eAAAA,CACA;QACMhD,MAAAA,OAAO8C,gBAAgBE,eAAe,IAAI;YAAC,GAAGA,eAAAA;QAAAA,IAAmB;YAACh9C,SAAS,CAAA;QAAE;QAE7E,KAAA,CAAA,GACN,IAAA,CAAKg6C,IAAAA,GAAOA;QAEZ,MAAMiD,gBACJ,OAAOD,mBAAoB,aAAaA,kBAAkB,IAAA,CAAKhD,IAAAA,CAAKjpC,SAAAA;QAElEksC,iBAAAA,CAEF,IAAA,CAAKjD,IAAAA,GAAO,IAAA,CAAKjpC,SAAAA,CAAUksC,aAAa,EAAEjD,IAAAA;IAAAA;IAAAA;;;GAAAA,GAQ9CjpC,UAAUA,UAAAA,EAAoD;QAC5D,OAAO,IAAA,CAAKkpC,KAAAA,CAAM;YAAClpC,WAAAA;QAAAA,CAAU;IAAA;IAAA;;GAAA,GAM/BorC,eAAoD;QAClD,OAAO,IAAA,CAAKnC,IAAAA,CAAKjpC,SAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB/Q,QAAQA,OAAAA,EAAqD;QAC3D,OAAO,IAAA,CAAKi6C,KAAAA,CAAM;YAACj6C;QAAAA,CAAQ;IAAA;IAAA;;GAAA,GAM7Bo8C,aAAuC;QAC9B,OAAA,IAAA,CAAKpC,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC;IAAA;IAAA;;;;GAAA,GAQ/B85C,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAoB;QAC/D,MAAMtD,OAAO,KAAA,CAAMi/C,UAAU95C,OAAO,GAE9B+Q,aAAY,IAAA,CAAKipC,IAAAA,CAAKjpC,SAAAA;QAC5B,IAAI,OAAOA,cAAc,YACjB,MAAA,IAAIgoC,eACR,8EACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAAS4D,kBAAkB;QAGpC,OAAA;YACL,GAAGriD,IAAAA;YACHkW,WAAAA;YACA/Q,SAAS,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC;YAC/B3X,MAAM;QACR;IAAA;IAAA;;;GAAA,GAOF4xD,MAAMW,QAAAA,EAAyD;QACvDC,MAAAA,UAAU,IAAIkC,qBAAqB;QACzClC,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;ACvGO,MAAMsC,wBAAwBT,mBAAuD;IAAA,gDAAA,GAI1F1D,YAAYgB,IAAAA,CAA0B;QAC9B,KAAA,CAAA,GACN,IAAA,CAAKA,IAAAA,GAAO;YAACtzD,IAAI;YAAUlE,OAAO;YAAU,GAAIw3D,QAAc,CAAA,CAAA;QAAG;IAAA;IAAA;;;;GAAA,GAQnEF,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAe;QACnD,OAAA;YACL,GAAG,KAAA,CAAM27C,UAAU95C,OAAO,CAAA;YAC1B3X,MAAM;QACR;IAAA;IAAA;;;;GAAA,GAQF4xD,MAAMW,QAAAA,EAA+C;QAC7CC,MAAAA,UAAU,IAAIsC,gBAAgB;QACpCtC,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;ACrCauC,MAAAA,OAAQpD,CAA8C,OAAA,IAAImD,gBAAgBnD,IAAI,GAG9EjpC,YACXisC,CAAAA,kBACyB,IAAID,qBAAqBC,eAAe;;;;;;;;;;ACMnE,MAAMK,8BACJA,CAAC,EAACC,mBAAAA,EAAqBb,SAAAA,EAA2B,GAClD,OAAOc,QAAQ,EAAC52D,MAAAA,EAAQwX,IAAAA,EAAI,KAAM;QAChC,IAAI9V,OAAO1B,OAAO0B,IAAAA;QAElB,MAAM4wD,aAAa96C,KAAKrY,KAAAA,CAAM,GAAGqY,KAAKta,MAAAA,GAAS,CAAC,GAC1C25D,iBAAiBr/C,IAAAA,CAAKA,KAAKta,MAAAA,GAAS,CAAC,CAAA;QAM3C,IAJKwE,QAAAA,CACHA,OAAO,MAAMm0D,uBAAuBC,WAAWc,MAAM,CAAA,GAGnD,CAACl1D,MACH,MAAM,IAAI0wD,eACR,mEACAE,YACAuE,cACF;QAGF,OAAOF,oBAAoB;YAACt1D,YAAYu1D;YAAQ17D,YAAYwG;QAAAA,CAAK;IACnE;AA4CK,MAAMo1D,gBAAsD;IAAA,oEAAA,GAIjEzE,YAIYe,QAAAA,EACVC,IAAAA,CACA;QAAA,IAAA,CAFUD,QAAAA,GAAAA,UAGV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAC;IAAA;IAAA;;;GAAA,GAO7BtzD,GAAGA,EAAAA,EAA6B;QAC9B,OAAO,IAAA,CAAKuzD,KAAAA,CAAM;YAACvzD;QAAAA,CAAG;IAAA;IAAA;;GAAA,GAMxB40D,QAAmC;QACjC,OAAO,IAAA,CAAKtB,IAAAA,CAAKtzD,EAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBlE,MAAMA,KAAAA,EAAgC;QACpC,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;YAAOkE,IAAIk1D,mBAAmBp5D,OAAO,IAAA,CAAKw3D,IAAAA,CAAKtzD,EAAE;QAAA,CAAE;IAAA;IAAA;;GAAA,GAMxEyzD,WAAyC;QACvC,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBqgB,KAAKA,IAAAA,EAAgD;QACnD,OAAO,IAAA,CAAKo3C,KAAAA,CAAM;YAACp3C;QAAAA,CAAK;IAAA;IAAA;;GAAA,GAM1Bu3C,UAA+C;QAC7C,OAAO,IAAA,CAAKJ,IAAAA,CAAKn3C,IAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB5K,MAAMA,KAAAA,EAA+B;QACnC,OAAO,IAAA,CAAKgiD,KAAAA,CAAM;YAAChiD;QAAAA,CAAM;IAAA;IAAA;;GAAA,GAM3BikD,WAAyC;QACvC,OAAO,IAAA,CAAKlC,IAAAA,CAAK/hD,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBjQ,WAAWA,UAAAA,EAAqC;QAExC01D,MAAAA,SAAS,IAAA,CAAK1D,IAAAA,CAAKtzD,EAAAA,IAAMsB;QAC/B,OAAO,IAAA,CAAKiyD,KAAAA,CAAM;YAChBvzD,IAAIg3D;YACJ19C,SAAS;gBACP,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC,CAAA;gBAC1BtZ,IAAIsB;YAAAA;QACN,CACD;IAAA;IAAA;;GAAA,GAMH21D,gBAAgD;QACvC,OAAA,IAAA,CAAK3D,IAAAA,CAAKh6C,OAAAA,EAAStZ;IAAAA;IAAAA;;;GAAAA,GAO5B7E,WAAWoG,YAAAA,EAAoD;QAC7D,OAAO,IAAA,CAAKgyD,KAAAA,CAAM;YAChBj6C,SAAS;gBACP,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC,CAAA;gBAC1B3X,MAAM,OAAOJ,gBAAiB,WAAWA,eAAeA,aAAaa,IAAAA;YAAAA;QACvE,CACD;IAAA;IAAA;;GAAA,GAMH80D,gBAAkD;QACzC,OAAA,IAAA,CAAK5D,IAAAA,CAAKh6C,OAAAA,EAAS3X;IAAAA;IAAAA;;;;GAAAA,GAQ5Bw1D,qBAAqB95C,UAAAA,EAAoBG,UAAAA,EAAuD;QAC9F,OAAO,IAAA,CAAK+1C,KAAAA,CAAM;YAChBj6C,SAAS;gBACP,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC,CAAA;gBAC1B7X,UAAU4b;gBACV0zB,oBAAoBvzB;YAAAA;QACtB,CACD;IAAA;IAAA;;GAAA,GAMH45C,0BAAgE;QACvD,OAAA,IAAA,CAAK9D,IAAAA,CAAKh6C,OAAAA,EAAS7X;IAAAA;IAAAA;;GAAAA,GAM5B41D,oCAAoF;QAC3E,OAAA,IAAA,CAAK/D,IAAAA,CAAKh6C,OAAAA,EAASy3B;IAAAA;IAAAA;;;GAAAA,GAO5BvW,MAAMA,MAAAA,EAAgD;QACpD,OAAO,IAAA,CAAK+4B,KAAAA,CAAM;YAAC/4B,OAAAA;QAAAA,CAAM;IAAA;IAAA;;GAAA,GAM3B88B,WAAmC;QAC1B,OAAA,IAAA,CAAKhE,IAAAA,CAAK94B,KAAAA,IAAS,CAAE,CAAA;IAAA;IAAA;;;GAAA,GAO9B44B,UAAU,EAAC37C,OAAO,CAAE,CAAA,EAAE9S,KAAAA,EAAO8tD,IAAAA,EAAAA,GAA0B;QAACh7C,MAAM,CAAA,CAAA;IAAA,CAAA,EAAmB;QAC/E,MAAM8/C,QAAQ9/C,IAAAA,CAAK9S,SAAS8S,KAAKta,MAAAA,GAAS,CAAC,CAAA,EAGrC6C,KAAK,IAAA,CAAKszD,IAAAA,CAAKtzD,EAAAA,IAAOu3D,SAAS,GAAGA,KAAK,EAAA,IAAO,IAC9Cj+C,UAAoC;YACxCtZ;YACA2B,MAAM0C,KAAAA;YACN5C,UAAU4C,KAAAA;YACV0sC,oBAAoB1sC,KAAAA;YACpB,GAAG,IAAA,CAAKivD,IAAAA,CAAKh6C,OAAAA;QACf;QAEI,IAAA,OAAOtZ,MAAO,YAAY,CAACA,IACvB,MAAA,IAAIqyD,eACR,uCACA56C,MACA9S,OACA8tD,IACF,EAAEC,WAAAA,CAAYE,SAASiC,WAAW;QAGhC,IAAA,CAACv7C,WAAW,CAACA,QAAQtZ,EAAAA,EACjB,MAAA,IAAIqyD,eACR,qDACA56C,MACAzX,IACAyyD,IACF,EAAEC,WAAAA,CAAYE,SAAS4E,oBAAoB;QAGzC,IAAA,CAACl+C,WAAW,CAACA,QAAQ3X,IAAAA,EACvB,MAAM,IAAI0wD,eACR,+DACA56C,MACAzX,IACAyyD,IACF;QAGIj4B,MAAAA,SAAAA,CAAS,IAAA,CAAK84B,IAAAA,CAAK94B,KAAAA,IAAS,IAAA,CAAK84B,IAAAA,CAAK94B,KAAAA,CAAMr9B,MAAAA,GAAS,IAAI,IAAA,CAAKm2D,IAAAA,CAAK94B,KAAAA,GAAQ;YAACk8B,MAAM;SAAA,EAAGxyD,GAAAA,CACzF,CAAClB,MAAMwV,IAAM29C,mBAAmBnzD,MAAMwV,GAAGf,IAAI,CAC/C,GAEMggD,UAAUj9B,OAAMt2B,GAAAA,CAAKo3B,CAAAA,OAASA,KAAKt7B,EAAE,GACrC03D,SAAQC,4IAAAA,EAAKF,QAAQjzD,MAAAA,CAAO,CAACugC,QAAQvsB,IAAMi/C,QAAQvvC,QAAAA,CAAS6c,QAAQvsB,IAAI,CAAC,CAAC,CAAC;QACjF,IAAIk/C,MAAMv6D,MAAAA,GAAS,GACX,MAAA,IAAIk1D,eACR,CAAA,4CAAA,EAA+CqF,MAAM/zD,IAAAA,CAAK,KAAK,CAAC,EAAA,EAChE8T,MACAzX,IACAyyD,IACF;QAGK,OAAA;YACL,GAAG,IAAA,CAAKa,IAAAA;YACR/hD,OAAO,IAAA,CAAK+hD,IAAAA,CAAK/hD,KAAAA,IAASolD,4BAA4B,IAAA,CAAKtD,QAAQ;YACnErzD,IAAI+0D,WAAW/0D,IAAIyX,MAAM9S,KAAK;YAC9BhD,MAAM;YACN2X,SAASs+C,mBAAmBt+C,OAAO;YACnCkhB,OAAAA;QACF;IAAA;IAAA;;;GAAA,GAOF+4B,MAAMW,WAAgC,CAAA,CAAA,EAAqB;QACzD,MAAMC,UAAU,IAAI4C,gBAAgB,IAAA,CAAK1D,QAAQ,GAC3C/5C,UAAU;YAAC,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC,CAAA;YAAI,GAAI46C,SAAS56C,OAAAA,IAAW,CAAA,CAAA;QAAG;QAC1E66C,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAGY,QAAAA;YAAU56C;QAAAA,GACpC66C;IAAAA;AAEX;AAEA,SAASyD,mBAAmBtE,IAAAA,EAAiD;IAC3E,MAAM7jB,OAAwB;QAC5BzvC,IAAIszD,KAAKtzD,EAAAA,IAAM;QACf2B,MAAM2xD,KAAK3xD,IAAAA,IAAQ;IACrB;IAEI2xD,OAAAA,KAAK7xD,QAAAA,IAAAA,CACPguC,KAAKhuC,QAAAA,GAAW6xD,KAAK7xD,QAAAA,GAGnB6xD,KAAKviB,kBAAAA,IAAAA,CACPtB,KAAKsB,kBAAAA,GAAqBuiB,KAAKviB,kBAAAA,GAG1BtB;AACT;AAGgBooB,SAAAA,mBAAmBj0D,OAAAA,EAA2B0vD,IAAAA,EAAoC;IAChG,IAAInsD,MAAMmsD,MAAM3xD,OAAAA,yDAAAA;IAEZiC,QAAQgzD,mBAAAA,CAAoB;QAACz7D,YAAYm4D,KAAK3xD,IAAAA;IAAK,CAAA,IAAA,0CAAA;IAEnD,IAAIo1D,gBAAgBnzD,OAAO;IAE3B,IAAA,CAAC0vD,KAAansD,CAAAA,OAAAA;IAEZ,MAAA,EAACnH,EAAAA,EAAI2B,IAAAA,EAAMF,QAAAA,EAAUsvC,kBAAAA,EAAAA,GAAsBuiB,KAAKh6C,OAAAA;IACtDnS,OAAAA,MAAMA,IAAInH,EAAAA,CAAGszD,KAAKtzD,EAAE,EAAEsB,UAAAA,CAAWtB,EAAE,GAE/B2B,QAAAA,CACFwF,MAAMA,IAAIhM,UAAAA,CAAWwG,IAAI,CAAA,GAEvBF,YAAAA,CACF0F,MAAMA,IAAIgwD,oBAAAA,CAAqB11D,UAAUsvC,kBAAkB,CAAA,GAEzDuiB,KAAK/hD,KAAAA,IAAAA,CACPpK,MAAMA,IAAIoK,KAAAA,CAAM+hD,KAAK/hD,KAAK,CAAA,GAGrBpK;AACT;AAGO,SAAS2wD,mCACd,EAAClB,mBAAAA,EAAqBz5C,SAAAA,EAA2B,EACjDE,UAAAA,EACAG,UAAAA,EACiB;IACjB,MAAM/b,WAAW0b,UAAUhP,IAAAA,CAAM/S,CAAMA,IAAAA,EAAE4E,EAAAA,KAAOqd,UAAU;IAE1D,IAAI,CAAC5b,UACH,MAAM,IAAI/B,MAAM,CAAA,kBAAA,EAAqB2d,UAAU,CAAA,aAAA,CAAe;IAGhE,OAAOu5C,oBAAoB;QAACz7D,YAAYsG,SAAStG,UAAAA;IAAAA,CAAW,EAAEg8D,oBAAAA,CAC5D95C,YACAG,UACF;AACF;ACpXO,MAAMu6C,gCAAkF;IAAA,oFAAA,GAI7FzF,YAIYe,QAAAA,EACVC,IAAAA,CACA;QAAA,IAAA,CAFUD,QAAAA,GAAAA,UAGV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAC;IAAA;IAAA;;;GAAA,GAO7BtzD,GAAGA,EAAAA,EAA6C;QAC9C,OAAO,IAAA,CAAKuzD,KAAAA,CAAM;YAACvzD;QAAAA,CAAG;IAAA;IAAA;;GAAA,GAMxB40D,QAAiD;QAC/C,OAAO,IAAA,CAAKtB,IAAAA,CAAKtzD,EAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBlE,MAAMA,KAAAA,EAAgD;QACpD,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;QAAAA,CAAM;IAAA;IAAA;;GAAA,GAM3B23D,WAAuD;QACrD,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB6kB,YAAYA,WAAAA,EAAsD;QAChE,OAAO,IAAA,CAAK4yC,KAAAA,CAAM;YAAC5yC;QAAAA,CAAY;IAAA;IAAA;;GAAA,GAMjCq3C,iBAAmE;QACjE,OAAO,IAAA,CAAK1E,IAAAA,CAAK3yC,WAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBtD,WAAWA,UAAAA,EAAqD;QAExD25C,MAAAA,SAAS,IAAA,CAAK1D,IAAAA,CAAKtzD,EAAAA,IAAMqd;QAC/B,OAAO,IAAA,CAAKk2C,KAAAA,CAAM;YAChBvzD,IAAIg3D;YACJ35C;QAAAA,CACD;IAAA;IAAA;;GAAA,GAMH46C,gBAAiE;QAC/D,OAAO,IAAA,CAAK3E,IAAAA,CAAKj2C,UAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBG,WAAWA,UAAAA,EAAmE;QAC5E,OAAO,IAAA,CAAK+1C,KAAAA,CAAM;YAAC/1C;QAAAA,CAAW;IAAA;IAAA;;GAAA,GAMhC06C,gBAAiE;QAC/D,OAAO,IAAA,CAAK5E,IAAAA,CAAK91C,UAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB41C,UAAU,EAAC37C,OAAO,CAAE,CAAA,EAAE9S,KAAAA,EAAO8tD,IAAAA,EAAAA,GAA0B;QAACh7C,MAAM,CAAA,CAAA;IAAA,CAAA,EAA+B;QACrF,MAAA,EAAC67C,IAAAA,EAAMD,QAAAA,EAAAA,GAAY,IAAA,EACnB,EAACl2C,SAAAA,EAAAA,GAAak2C;QAEpB,IAAI,OAAOC,KAAKtzD,EAAAA,IAAO,YAAY,CAACszD,KAAKtzD,EAAAA,EACjC,MAAA,IAAIqyD,eACR,0DACA56C,MACA9S,OACA8tD,IACF,EAAEC,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,IAAI,CAACvB,KAAKj2C,UAAAA,EACF,MAAA,IAAIg1C,eACR,gFACA56C,MACA67C,KAAKtzD,EAAAA,EACLyyD,IACF,EAAEC,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,MAAMpzD,WAAW0b,UAAUhP,IAAAA,CAAM/S,CAAAA,IAAMA,EAAE4E,EAAAA,KAAOszD,KAAKj2C,UAAU;QAE/D,IAAI,CAAC5b,UACG,MAAA,IAAI4wD,eACR,gFACA56C,MACA67C,KAAKtzD,EAAAA,EACLyyD,IACF,EAAEC,WAAAA,CAAYE,SAASiC,WAAW;QAG7B,OAAA;YACL70D,IAAIszD,KAAKtzD,EAAAA;YACTqd,YAAYi2C,KAAKtzD,EAAAA;YACjB7E,YAAYsG,SAAStG,UAAAA;YACrBwG,MAAM;YACNgf,aAAa2yC,KAAK3yC,WAAAA,IAAelf,SAASkf,WAAAA;YAC1C7kB,OAAOw3D,KAAKx3D,KAAAA,IAAS2F,SAAS3F,KAAAA;YAC9Bq8D,UAAU7E,KAAK6E,QAAAA;YACfz6D,MAAM41D,KAAK51D,IAAAA,IAAQ+D,SAAS/D,IAAAA;YAC5B6f,mBAAmB+1C,KAAK/1C,iBAAAA;YACxBC,YAAY81C,KAAK91C,UAAAA;QACnB;IAAA;IAAA;;;GAAA,GAOF+1C,MAAMW,WAA8C,CAAA,CAAA,EAAqC;QACvF,MAAMC,UAAU,IAAI4D,gCAAgC,IAAA,CAAK1E,QAAQ;QACjEc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAGY,QAAAA;QAAAA,GAC1BC;IAAAA;AAEX;AAGO,SAASiE,iCACdx0D,OAAAA,EACmC;IAC7B,MAAA,EAAC9I,MAAAA,EAAQu9D,mBAAAA,EAAqBl7C,SAAAA,EAAavZ,GAAAA,SAG3Cm7C,YAAYjkD,OAAOw9D,YAAAA,CAAa;IAQtC,OAPgBn7C,UAGb3Y,MAAAA,CAAQ+zD,CAAQ,MAAA,CAACA,IAAI/6C,UAAAA,EAAYrgB,MAAM,EACvC+L,IAAAA,CAAK,CAACiP,GAAGC,IAAM2mC,UAAU3wC,OAAAA,CAAQ+J,EAAEhd,UAAU,IAAI4jD,UAAU3wC,OAAAA,CAAQgK,EAAEjd,UAAU,CAAC,EAGpE+I,GAAAA,CAAKq0D,CAAAA,MAAQF,oBAAoB,EAAEG,wBAAAA,CAAyBD,IAAIv4D,EAAE,CAAC;AACpF;AAGgBy4D,SAAAA,uCACdz1D,IAAAA,EACA2B,KAAAA,EACA8S,IAAAA,EAC0B;IACnBzU,OAAAA,gBAAgB+0D,kCAAkC/0D,KAAKowD,SAAAA,CAAU;QAAC37C;QAAM9S;IAAM,CAAA,IAAI3B;AAC3F;AAGgB01D,SAAAA,uCACd90D,OAAAA,EACA8Z,aAAAA,EACY;IACN,MAAA,EAAC5iB,MAAAA,EAAQqiB,SAAAA,EAAAA,GAAavZ;IACrB8Z,OAAAA,cAAcxZ,GAAAA,CAAKlB,CAAS,SAAA;QACjC,MAAMvB,WAAW0b,UAAUhP,IAAAA,CAAM/S,CAAMA,IAAAA,EAAE4E,EAAAA,KAAOgD,KAAKqa,UAAU,GACzDvhB,QAAQkH,KAAKlH,KAAAA,IAAS2F,UAAU3F,SAAS,UAEzCmE,SAA2B,CAAC;QAC9BwB,YAAYA,SAAStG,UAAAA,IAAAA,CACvB8E,OAAO0B,IAAAA,GAAOF,SAAStG,UAAAA,GAGrB6H,KAAKqa,UAAAA,IAAAA,CACPpd,OAAOwB,QAAAA,GAAWuB,KAAKqa,UAAAA;QAGzB,MAAMoD,eAA6Bzd,KAAKwa,UAAAA,GAAa;YAACvd;YAAQ+C,KAAKwa,UAAU;SAAA,GAAIvd,QAC3E9E,aAAasG,YAAY3G,OAAOI,GAAAA,CAAIuG,SAAStG,UAAU,GAEvDghB,OAAOnZ,KAAKmZ,IAAAA,IAAQ1a,UAAU0a;QAEpC,IAAIg4C,UAAU,IAAIhB,gBAAgBvvD,OAAO,EACtC9H,KAAAA,CAAMA,KAAK,EACX4B,IAAAA,CAAM+D,YAAYA,SAAS/D,IAAAA,IAASvC,YAAYuC,2JAAQygB,UAAO,EAC/DtM,MAAAA,CAAO;YAAClQ,MAAM;YAAU1B,QAAQwgB;QAAAA,CAAa;QAEhD,OAAItE,QAAAA,CACFg4C,UAAUA,QAAQh4C,IAAAA,CAAKA,IAAI,CAAA,GAGtBg4C,QAAQf,SAAAA,CAAU;IAAA,CAC1B;AACH;AC/KO,MAAMuF,yBAAyBt7D,OAAO,oCAAoC,GAyCpEu7D,uBAAsCA,CAACC,YAAY54D,QAAQ,EAACT,MAAAA,KAAAA,EAAI,KAAe;IAC1F,MAAMs5D,SAASD,eAAe,QACxBE,WAAWF,eAAe,UAC1BG,YAAYx5D,OACZy5D,aAAaD,UAAU1/C,OAAAA,EAAS9U,UAAU,IAC1CkpC,aAAasrB,UAAU1/C,OAAAA,EAASrZ,UAAU,CAC1C8+C,GAAAA,YAAYia,UAAUvH,cAAAA,GACxB;QAACuH,UAAUvH,cAAc;KAAA,GACzByH,uBAAuBD,YAAYvrB,UAAU,GAE3CoV,wBAAwBkW,UAAUlW,qBAAAA,IAAyB,CAAE,CAAA;IAE/DiW,OAAAA,YAAY94D,OAAOwB,QAAAA,GACdqhD,sBAAsBz7C,IAAAA,CAAMkxD,CAAQA,MAAAA,IAAIl7C,UAAAA,KAAepd,OAAOwB,QAAQ,IAI5Eq3D,UAAU74D,OAAOD,EAAAA,IAAM++C,UAAU72B,QAAAA,CAASjoB,OAAO0B,IAAI,KACrDo3D,YAAYha,UAAU72B,QAAAA,CAASjoB,OAAO0B,IAAI;AAE/C;AAEAi3D,qBAAqBO,QAAAA,GAAWR;ACxHzB,MAAMS,gBAAgB;IAAC;IAAW;IAAQ;IAAS;IAAU,OAAO;CAAA;ACwB3E,SAASC,kBAAkB,CAE3B;AAGaC,MAAAA,uBAAsCA,CAACT,YAAY54D,QAAQ,EAACT,MAAAA,KAAAA,EAAMmF,KAAAA,EAAK,GAC3EA,SAAS,KAAKi0D,qBAAqBC,YAAY54D,QAAQ;QAACT,MAAAA;QAAMmF;IAAK,CAAC;AAwFtE,MAAe40D,mBAEtB;IAAA,6CAAA,GAEYC,iCAAiC,CAAA,EAAA;IAAA,+BAAA,GAEjClG,OAAc,CAAC,EAAA;IAAA;;;GAAA,GAMzBtzD,GAAGA,EAAAA,EAA0B;QAC3B,OAAO,IAAA,CAAKuzD,KAAAA,CAAM;YAACvzD;QAAAA,CAAG;IAAA;IAAA;;GAAA,GAMxB40D,QAAqB;QACnB,OAAO,IAAA,CAAKtB,IAAAA,CAAKtzD,EAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBlE,MAAMA,KAAAA,EAA6B;QACjC,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;YAAOkE,IAAIk1D,mBAAmBp5D,OAAO,IAAA,CAAKw3D,IAAAA,CAAKtzD,EAAE;QAAA,CAAE;IAAA;IAAA;;GAAA,GAMxEyzD,WAA2B;QACzB,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBqgB,KAAKA,IAAAA,EAA6C;QAChD,OAAO,IAAA,CAAKo3C,KAAAA,CAAM;YAACp3C;QAAAA,CAAK;IAAA;IAAA;;GAAA,GAM1Bu3C,UAAyB;QACvB,OAAO,IAAA,CAAKJ,IAAAA,CAAKn3C,IAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB41C,cAAcA,aAAAA,EAA+C;QAC3D,OAAO,IAAA,CAAKwB,KAAAA,CAAM;YAACxB;QAAAA,CAAc;IAAA;IAAA;;GAAA,GAMnC0H,mBAA2C;QACzC,OAAO,IAAA,CAAKnG,IAAAA,CAAKvB,aAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBn2C,UAAUA,SAAAA,EAAqE;QAC7E,OAAO,IAAA,CAAK23C,KAAAA,CAAM;YAAC33C;QAAAA,CAAU;IAAA;IAAA;;GAAA,GAM/B6wB,eAAmC;QACjC,OAAO,IAAA,CAAK6mB,IAAAA,CAAK13C,SAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBC,eAAeA,cAAAA,EAAwE;QACrF,OAAO,IAAA,CAAK03C,KAAAA,CAAM;YAAC13C;QAAAA,CAAe;IAAA;IAAA;;GAAA,GAMpC85C,oBAA6C;QAC3C,OAAO,IAAA,CAAKrC,IAAAA,CAAKz3C,cAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBtK,MAAMA,KAAAA,EAA4B;QAChC,OAAO,IAAA,CAAKgiD,KAAAA,CAAM;YAAChiD;QAAAA,CAAM;IAAA;IAAA;;GAAA,GAM3BikD,WAA2B;QACzB,OAAO,IAAA,CAAKlC,IAAAA,CAAK/hD,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBqkD,gBAAgBA,eAAAA,EAA+C;QAC7D,OAAO,IAAA,CAAKrC,KAAAA,CAAM;YAACqC;QAAAA,CAAgB;IAAA;IAAA;;GAAA,GAMrC8D,qBAA+C;QAC7C,OAAO,IAAA,CAAKpG,IAAAA,CAAKsC,eAAAA;IAAAA;IAAAA;;;GAAAA,GAOnB5b,UAAUpmC,UAAU,CAAA,CAAA,EAAoB;QACtC,OAAO,IAAA,CAAK2/C,KAAAA,CAAM;YAChB3R,gBAAgB;gBAAC,GAAI,IAAA,CAAK0R,IAAAA,CAAK1R,cAAAA,IAAkB,CAAC,CAAA;gBAAI5H,WAAWpmC;YAAAA;QAAO,CACzE;IAAA;IAAA;;GAAA,GAMH+lD,eAAoC;QAClC,OAAO,IAAA,CAAKrG,IAAAA,CAAK1R,cAAAA,GAAiB,IAAA,CAAK0R,IAAAA,CAAK1R,cAAAA,CAAe5H,SAAAA,GAAY31C,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOzEy+C,sBACE3lC,SAAAA,EAIc;QACTq8C,OAAAA,IAAAA,CAAAA,8BAAAA,GAAiC,CAAA,GAC/B,IAAA,CAAKjG,KAAAA,CAAM;YAACzQ,uBAAuBh6C,MAAMkW,OAAAA,CAAQ7B,SAAS,IAAIA,YAAY;gBAACA,SAAS;aAAA;QAAA,CAAE;IAAA;IAAA;;GAAA,GAM/Fy8C,2BAA2D;QACzD,OAAO,IAAA,CAAKtG,IAAAA,CAAKxQ,qBAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBsQ,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAkB;QACvDzX,MAAAA,KAAK,IAAA,CAAKszD,IAAAA,CAAKtzD,EAAAA,IAAM,IACrByX,OAAO6B,QAAQ7B,IAAAA,EAEfs6C,gBAAgB,IAAA,CAAKuB,IAAAA,CAAKvB,aAAAA;QAChC,IAAIA,iBAAiB,CAACqH,cAAclxC,QAAAA,CAAS6pC,aAAa,GAClD,MAAA,IAAIM,eACR,CAAA,0BAAA,EAA6B+G,cAAcl1D,GAAAA,CAAKlB,CAAS,OAAA,CAAA,CAAA,EAAIA,IAAI,CAAA,CAAA,CAAG,EAAEW,IAAAA,CAAK,IAAI,CAAC,EAAA,EAChF8T,MACAzX,MAAMsZ,QAAQ3U,KAAAA,EACd,IAAA,CAAK2uD,IAAAA,CAAKx3D,KACZ;QAGF,MAAMgnD,wBAAAA,CAAyB,IAAA,CAAKwQ,IAAAA,CAAKxQ,qBAAAA,IAAyB,CAAA,CAAA,EAAI5+C,GAAAA,CAAI,CAAClB,MAAMwV,IAC/EigD,uCAAuCz1D,MAAMwV,GAAGf,IAAI,CACtD;QAEO,OAAA;YACLzX,IAAI+0D,WAAW/0D,IAAIsZ,QAAQ7B,IAAAA,EAAMzX,MAAMsZ,QAAQ3U,KAAK;YACpD7I,OAAO,IAAA,CAAKw3D,IAAAA,CAAKx3D,KAAAA;YACjBqgB,MAAM,IAAA,CAAKm3C,IAAAA,CAAKn3C,IAAAA;YAChBxa,MAAM;YACNowD;YACAxgD,OAAO,IAAA,CAAK+hD,IAAAA,CAAK/hD,KAAAA,IAAS8nD;YAC1BzD,iBAAiB,IAAA,CAAKtC,IAAAA,CAAKsC,eAAAA,IAAmB0D;YAC9C1X,gBAAgB,IAAA,CAAK0R,IAAAA,CAAK1R,cAAAA;YAC1BkB;YACAlnC,WAAAA,CAAY,IAAA,CAAK03C,IAAAA,CAAK13C,SAAAA,IAAa,CAAI1X,CAAAA,EAAAA,GAAAA,CAAI,CAAClB,MAAMwV,IAChD06C,uBAAuBlwD,MAAMwV,GAAGf,IAAI,CACtC;YACAoE,gBAAAA,CAAiB,IAAA,CAAKy3C,IAAAA,CAAKz3C,cAAAA,IAAkB,CAAA,CAAA,EAAI3X,GAAAA,CAAI,CAAClB,MAAMwV,IAC1Dg8C,4BAA4BxxD,MAAMwV,GAAGf,IAAI,CAC3C;QACF;IAAA;AAQJ;ACxTA,MAAMoiD,iBAAiBA,CAACvG,MAA2Bh6C,YAA8B;IAC/E,MAAM9U,UAAS8uD,KAAKh6C,OAAAA,EAAS9U,OAAO49C,KAAU,KAAA;IAE9C,IAAI;QAAC;QAAK,GAAG;KAAA,CAAEl6B,QAAAA,CAAS1jB,OAAAA,CAAO,CAAC,CAAC,GAC/B,MAAM,IAAI6tD,eACR,CAAA,+BAAA,EAAkC7tD,OAAAA,CAAO,CAAC,CAAC,CAAA,uDAAA,CAAA,EAC3C8U,QAAQ7B,IAAAA,EACR67C,KAAKtzD,EAAAA,EACLszD,KAAKx3D,KACP,EAAE42D,WAAAA,CAAYE,SAASkH,yBAAyB;IAG3Ct1D,OAAAA;AACT,GAEMu1D,qCACHn2D,CAAAA,UACD,CAACizD,QAAgBv9C,YAA8E;QACvF0gD,MAAAA,aAAa1gD,QAAQi0C,MAAAA,EACrB9rD,WAAW6X,QAAQrZ,MAAAA,EAAQwB,WAC7BmC,QAAQuZ,SAAAA,CAAUhP,IAAAA,CAAMoqD,CAAAA,MAAQA,IAAIv4D,EAAAA,KAAOsZ,QAAQrZ,MAAAA,CAAOwB,QAAQ,IAClE4C,KAAAA,GACE1C,OAAOF,WACTA,SAAStG,UAAAA,GACT6+D,WAAWvI,cAAAA,IAAkBqE,uBAAuBlyD,QAAQmyD,SAAAA,EAAWc,MAAM;QAE1EoD,OAAAA,QAAQC,OAAAA,CAAQv4D,IAAI,EAAEyvB,IAAAA,CAAMj2B,CACjCA,aAAAA,aACIyI,QAAQgzD,mBAAAA,CAAoB;gBAACz7D;gBAAYmG,YAAYu1D;YAAO,CAAA,IAC5D,IAAIE,gBAAgBnzD,OAAO,EAAE5D,EAAAA,CAAG,QAAQ,EAAEsB,UAAAA,CAAWu1D,MAAM,EAAE17D,UAAAA,CAAW,EAAE,CAChF;IACF;AA4DK,MAAMg/D,4BAA4BZ,mBAGvC;IAAA,2DAAA,GAIAjH,YAIYe,QAAAA,EACVC,IAAAA,CACA;QACA,KAAA,CAAO,GAAA,IAAA,CAHGD,QAAAA,GAAAA,UAIV,IAAA,CAAKC,IAAAA,GAAOA,QAAQ,CACpB,GAAA,IAAA,CAAKkG,8BAAAA,GAAiCvwD,CAAAA,CAAQqqD,MAAMxQ;IAAAA;IAAAA;;;GAAAA,GAOtD9yB,WAAWA,UAAAA,EAAyC;QAClD,OAAO,IAAA,CAAKujC,KAAAA,CAAM;YAACj6C,SAAS;gBAAC,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW;oBAAC9U,QAAQ;gBAAE,CAAA;gBAAIwrB;YAAAA;QAAU,CAAE;IAAA;IAAA;;GAAA,GAMnFoqC,gBAAoC;QAC3B,OAAA,IAAA,CAAK9G,IAAAA,CAAKh6C,OAAAA,EAAS0W;IAAAA;IAAAA;;;GAAAA,GAO5BxrB,OAAOA,OAAAA,EAAqC;QAC1C,OAAO,IAAA,CAAK+uD,KAAAA,CAAM;YAACj6C,SAAS;gBAAC,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC,CAAA;gBAAI9U,QAAAA;YAAAA;QAAM,CAAE;IAAA;IAAA;;GAAA,GAMrE61D,YAAgC;QACvB,OAAA,IAAA,CAAK/G,IAAAA,CAAKh6C,OAAAA,EAAS9U;IAAAA;IAAAA;;;GAAAA,GAO5BrJ,WAAWwG,IAAAA,EAAgD;QACzD,MAAM8vD,iBAAiB,OAAO9vD,QAAS,WAAWA,OAAOA,KAAKS,IAAAA;QAC9D,OAAO,IAAA,CAAKmxD,KAAAA,CAAM;YAAC9B;QAAAA,CAAe;IAAA;IAAA;;GAAA,GAMpCyF,gBAAoC;QAClC,OAAO,IAAA,CAAK5D,IAAAA,CAAK7B,cAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBxxD,OAAOA,MAAAA,EAAsD;QAC3D,OAAO,IAAA,CAAKszD,KAAAA,CAAM;YAChBj6C,SAAS;gBAAC,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW;oBAAC9U,QAAQ;gBAAE,CAAA;gBAAIvE;YAAAA;QAAM,CACzD;IAAA;IAAA;;GAAA,GAMH4zD,YAAiD;QACxC,OAAA,IAAA,CAAKP,IAAAA,CAAKh6C,OAAAA,EAASrZ;IAAAA;IAAAA;;;GAAAA,GAO5B+xD,gBAAgBzU,QAAAA,EAAmD;QAC7D,IAAA,CAACz0C,MAAMkW,OAAAA,CAAQu+B,QAAQ,GACnB,MAAA,IAAI79C,MAAM,qDAAqD;QAGvE,OAAO,IAAA,CAAK6zD,KAAAA,CAAM;YAChBj6C,SAAS;gBAAC,GAAI,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,IAAW;oBAAC9U,QAAQ;gBAAE,CAAA;gBAAIwtD,iBAAiBzU;YAAAA;QAAQ,CAC5E;IAAA;IAAA;;GAAA,GAMH+c,qBAAqD;QAC5C,OAAA,IAAA,CAAKhH,IAAAA,CAAKh6C,OAAAA,EAAS04C;IAAAA;IAAAA;;;GAAAA,GAO5BoB,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAmB;QAC9D,IAAI,OAAO,IAAA,CAAK67C,IAAAA,CAAKtzD,EAAAA,IAAO,YAAY,CAAC,IAAA,CAAKszD,IAAAA,CAAKtzD,EAAAA,EACjD,MAAM,IAAIqyD,eACR,uCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KAAAA,EACR,IAAA,CAAK2uD,IAAAA,CAAKx3D,KACZ,EAAE42D,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,IAAI,CAAC,IAAA,CAAKvB,IAAAA,CAAKh6C,OAAAA,IAAW,CAAC,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA,CAAQ9U,MAAAA,EAC3C,MAAM,IAAI6tD,eACR,2CACA/4C,QAAQ7B,IAAAA,EACR,IAAA,CAAK67C,IAAAA,CAAKtzD,EAAAA,EACV,IAAA,CAAKszD,IAAAA,CAAKx3D,KACZ,EAAE42D,WAAAA,CAAYE,SAAS2H,eAAe;QAIpC,OADoB,IAAA,CAAKjH,IAAAA,CAAKh6C,OAAAA,EAAS9U,WAAW,oBAC9B,IAAA,CAAK8uD,IAAAA,CAAKh6C,OAAAA,CAAQ9U,MAAAA,IAAU,CAAC,IAAA,CAAK8uD,IAAAA,CAAKh6C,OAAAA,CAAQ0W,UAAAA,IACrE/P,QAAQrK,IAAAA,CACN,CAAA,qEAAA,EAAwE,IAAA,CAAK09C,IAAAA,CAAKh6C,OAAAA,CAAQ9U,MAAM,CAAA,8DAAA,CAAA,wLAChGg2D,kBAAAA,EAAgB5H,SAAS6H,sCAAsC,CACjE,GAEK;YACL,GAAG,KAAA,CAAMrH,UAAU95C,OAAO,CAAA;YAC1B3X,MAAM;YACN8vD,gBAAgB,IAAA,CAAK6B,IAAAA,CAAK7B,cAAAA;YAC1BlgD,OAAO,IAAA,CAAK+hD,IAAAA,CAAK/hD,KAAAA,IAASwoD,mCAAmC,IAAA,CAAK1G,QAAQ;YAC1E/5C,SAAS;gBACP,GAAG,IAAA,CAAKg6C,IAAAA,CAAKh6C,OAAAA;gBAAAA,2FAAAA;gBAEb0W,YAAY,IAAA,CAAKsjC,IAAAA,CAAKh6C,OAAAA,CAAQ0W,UAAAA,IAActnB,wLAAAA,CAA8BsnB,UAAAA;gBAC1ExrB,QAAQq1D,eAAe,IAAA,CAAKvG,IAAAA,EAAMh6C,OAAO;YAAA;QAE7C;IAAA;IAAA;;;GAAA,GAOFi6C,MAAMW,QAAAA,EAAqD;QACzD,MAAMC,UAAU,IAAIgG,oBAAoB,IAAA,CAAK9G,QAAQ;QACrDc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GAE1C,IAAA,CAAKsF,8BAAAA,IAAAA,CACRrF,QAAQb,IAAAA,CAAKxQ,qBAAAA,GAAwB4X,2BAA2B,IAAA,CAAKrH,QAAAA,EAAUc,QAAQb,IAAI,CAAA,GAGxFa,QAAQb,IAAAA,CAAK7B,cAAAA,IAAAA,CAChB0C,QAAQb,IAAAA,CAAK7B,cAAAA,GAAiBkJ,cAAcxG,QAAQb,IAAI,CAAA,GAGnDa;IAAAA;IAAAA;;GAAAA,GAMTyG,UAA+B;QAC7B,OAAO,IAAA,CAAKtH,IAAAA;IAAAA;AAEhB;AAEA,SAASoH,2BACP92D,OAAAA,EACA0vD,IAAAA,EACwC;IAClC,MAAA,EAAC14D,UAAAA,SAAAA,EAAAA,GAAYgJ,SACb,EAAC6tD,cAAAA,EAAgBn4C,OAAAA,EAAAA,GAAWg6C,MAC5B,EAAC9uD,QAAAA,OAAAA,EAAQvE,MAAAA,EAAAA,GAAUqZ,WAAW;QAAC9U,QAAQ;QAAIvE,QAAQ,CAAA;IACnD8+C,GAAAA,YAAY0S,iBACd;QAACA,cAAc;KAAA,GACf3oD,MAAMC,IAAAA,CAAK,IAAIC,IAAIkwD,uBAAuB10D,SAAQvE,MAAM,CAAC,CAAC;IAE9D,IAAI8+C,UAAU5hD,MAAAA,KAAW,GAIzB,OAAO4hD,UACJoM,OAAAA,CAAShwD,CACRP,aAAAA,UAASi9C,yBAAAA,CAA0B;YACjCl2C,MAAM;YACNxG;QAAAA,CACD,CACH,EACC+I,GAAAA,CAAK22D,CAAY,SAAA,CAAA;YAAC,GAAGA,MAAAA;YAAQn9D,yJAAMygB,UAAAA;QAAAA,CAAAA,CAAS;AACjD;AAEA,SAASw8C,cAAcrH,IAAAA,EAA+C;IAC9D,MAAA,EAACh6C,OAAAA,EAAAA,GAAWg6C,MACZ,EAAC9uD,QAAAA,OAAAA,EAAQvE,MAAAA,EAAAA,GAAUqZ,WAAW;QAAC9U,QAAQ;QAAIvE,QAAQ,CAAA;IACnD8+C,GAAAA,YAAYma,uBAAuB10D,SAAQvE,MAAM;IACvD,OAAO8+C,UAAU5hD,MAAAA,KAAW,IAAI4hD,SAAAA,CAAU,CAAC,CAAA,GAAI16C,KAAAA;AACjD;AAGO,SAAS60D,uBACd10D,OAAAA,EACAvE,SAAkC,CAAA,CAAA,EACxB;IACN8+C,IAAAA,YAAY+b,+BAA+Bt2D,SAAQvE,MAAM;IAE7D,OAAI8+C,UAAU5hD,MAAAA,KAAW,KAAA,CACvB4hD,YAAYgc,8BAA8Bv2D,SAAQvE,MAAM,CAAA,GAGnD8+C;AACT;AAGA,SAAS+b,+BACPt2D,OAAAA,EACAvE,SAAkC,CAAA,CAAA,EACxB;IACJ+6D,MAAAA,UACJ,0FACIC,UAAoB,CAAE,CAAA;IACxBhG,IAAAA;IACJ,MAAA,CAAQA,QAAQ+F,QAAQE,IAAAA,CAAK12D,OAAM,CAAA,MAAO,MACxCy2D,QAAQn2D,IAAAA,CAAKmwD,KAAAA,CAAM,CAAC,CAAA,IAAKA,KAAAA,CAAM,CAAC,CAAC;IAG5BgG,OAAAA,QACJ/2D,GAAAA,CAAKi3D,CACaA,YAAAA,CAAAA,CAAAA,SAAAA,CAAU,CAAC,CAAA,KAAM,MAAMl7D,MAAAA,CAAOk7D,UAAU/7D,KAAAA,CAAM,CAAC,CAAC,CAAA,GAAI+7D,SAAAA,KACzB,EAAA,EAAI/Y,IAAAA,CAAOnjB,EAAAA,OAAAA,CAAQ,gBAAgB,EAAE,CAElF,EACAz6B,MAAAA,CAAOyE,OAAO;AACnB;AAGA,SAAS8xD,8BACPv2D,OAAAA,EACAvE,SAAkC,CAAA,CAAA,EACxB;IACV,MAAM+6D,UAAU,4BACVC,UAAUz2D,QAAOywD,KAAAA,CAAM+F,OAAO;IACpC,OAAKC,UAIEA,OAAAA,CAAQ,CAAC,CAAA,CACb/oD,KAAAA,CAAM,MAAM,EACZhO,GAAAA,CAAK+wD,CAAAA,QAAUA,MAAM7S,IAAAA,CAAK,EAAEnjB,OAAAA,CAAQ,kBAAkB,EAAE,CAAC,EACzD/6B,GAAAA,CAAKlB,CAAAA,OAAUA,IAAAA,CAAK,CAAC,CAAA,KAAM,MAAM/C,MAAAA,CAAO+C,KAAK5D,KAAAA,CAAM,CAAC,CAAC,CAAA,GAAI4D,IAAK,EAC9DwB,MAAAA,CAAOyE,OAAO,IAPR,CAAE,CAAA;AAQb;AC7VA,MAAMmyD,aAAcC,CACdA,QAAAA,iBAAiBC,cACZ,gBAGLC,UAAoBF,KAAK,IACpB,YAGFvyD,MAAMkW,OAAAA,CAAQq8C,KAAK,IAAI,UAAU,OAAOA,OAG3CG,aAAcx4D,CACXA,OAAAA,KAAKrB,IAAAA,KAAS,YAGjB85D,yBAAwCA,CAAC5C,YAAoB54D,QAAQ2D,UAAAA,CAC5DA,QAAQpE,IAAAA,CACFmtC,KAAAA,IAAS,EAAA,EAGvBnoC,MAAAA,CAAOk3D,kBAAkB,EACzBr0D,IAAAA,CAAMrE,CAASA,OAAAA,KAAK7H,UAAAA,CAAWiH,IAAAA,KAASnC,OAAO0B,IAAAA,IAAQqB,KAAK9E,GAAAA,KAAQ+B,OAAOD,EAAE,KAChFs5D,qBAAqBT,YAAY54D,QAAQ2D,OAAO,GAI9C+3D,sBAAqCA,CAAC9E,QAAgBv9C,YAAkC;IAG5F,MAAMkU,SAAAA,CAFalU,QAAQi0C,MAAAA,CACF5gB,KAAAA,CAAMnoC,MAAAA,CAAOg3D,UAAU,EAC1BrtD,IAAAA,CAAMnL,CAASA,OAAAA,KAAKhD,EAAAA,KAAO62D,MAAM,KAAK;QAACtlD,OAAOlN,KAAAA;IAAAA,CAAAA,EAAYkN,KAAAA;IAEhF,OAAI,CAACic,UAAU,OAAOA,UAAW,aACxBA,SAGF,OAAOA,UAAW,aAAaA,OAAOqpC,QAAQv9C,OAAO,IAAIkU;AAClE;AAEA,SAASouC,uBACP54D,IAAAA,EACA2B,KAAAA,EACA8S,IAAAA,EACoB;IACpB,IAAIzU,gBAAgB64D,iBAClB,OAAO74D,KAAKowD,SAAAA,CAAU;QAAC37C;QAAM9S;IAAAA,CAAM;IAGrC,MAAMm3D,WAAW94D;IACb84D,IAAAA,YAAYA,SAASn6D,IAAAA,KAAS,WACzBqB,OAAAA;IAGT,IAAI,CAAC84D,YAAYA,SAASn6D,IAAAA,KAAS,YAAY;QACvCo6D,MAAAA,UAAWD,YAAYA,SAASn6D,IAAAA,IAASy5D,WAAWU,QAAQ,GAC5DE,WAAWD,YAAY,UAAU,gDAAgD;QACvF,MAAM,IAAI1J,eACR,CAAA,4CAAA,EAA+C0J,OAAO,CAAA,CAAA,EAAIC,QAAQ,EAAA,EAClEvkD,MACA9S,KACF,EAAE+tD,WAAAA,CAAYE,SAASqJ,iBAAiB;IAAA;IAGnCj5D,OAAAA;AACT;AAEA,SAASu4D,UAAaF,KAAAA,EAAyC;IAC7D,QAAOx9D,sKAAAA,EAASw9D,KAAK,KAAK,OAAOA,MAAMjqC,IAAAA,IAAS;AAClD;AAqCO,MAAMkqC,oBAAoB/B,mBAA+C;IAAA,4DAAA,GAI9EjH,YAIYe,QAAAA,EACVC,IAAAA,CACA;QACA,KAAA,CAAA,GAAO,IAAA,CAHGD,QAAAA,GAAAA,UAIV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAA,GAC1B,IAAA,CAAKkG,8BAAAA,GAAiCvwD,CAAAA,CAAAA,CAAQqqD,QAAQA,KAAKxQ,qBAAAA;IAAAA;IAAAA;;;;GAAAA,GAQ7DnW,MAAMA,KAAAA,EAA8D;QAClE,OAAO,IAAA,CAAK4mB,KAAAA,CAAM;YAAC5mB;QAAAA,CAAM;IAAA;IAAA;;GAAA,GAM3BuvB,WAAmC;QACjC,OAAO,IAAA,CAAK5I,IAAAA,CAAK3mB,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBymB,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAW;QAChDzX,MAAAA,KAAK,IAAA,CAAKszD,IAAAA,CAAKtzD,EAAAA;QACjB,IAAA,OAAOA,MAAO,YAAY,CAACA,IACvB,MAAA,IAAIqyD,eACR,8BACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASiC,WAAW;QAG9BloB,MAAAA,QAAQ,OAAO,IAAA,CAAK2mB,IAAAA,CAAK3mB,KAAAA,GAAU,MAAc,CAAK,CAAA,GAAA,IAAA,CAAK2mB,IAAAA,CAAK3mB,KAAAA;QAClE,IAAA,CAAC7jC,MAAMkW,OAAAA,CAAQ2tB,KAAK,GAChB,MAAA,IAAI0lB,eACR,qCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASuJ,wBAAwB;QAG3C1kD,MAAAA,OAAAA,CAAQ6B,QAAQ7B,IAAAA,IAAQ,CAAA,CAAA,EAAIud,MAAAA,CAAOh1B,EAAE,GACrCo8D,kBAAkBzvB,MAAMzoC,GAAAA,CAAI,CAAClB,MAAM2B,QAAUi3D,uBAAuB54D,MAAM2B,OAAO8S,IAAI,CAAC,GACtFigD,QAAQ0E,gBAAgB53D,MAAAA,CAAO,CAAC63D,KAAK7jD,uIAAMrK,UAAAA,EAAKiuD,iBAAiB;gBAACp8D,IAAIq8D,IAAIr8D,EAAAA;YAAAA,GAAKwY,IAAI,CAAC,CAAC;QAEvFk/C,IAAAA,MAAMv6D,MAAAA,GAAS,GAAG;YACdm/D,MAAAA,UAAU5E,MAAMxzD,GAAAA,CAAKlB,CAAAA,OAASA,KAAKhD,EAAE,EAAEZ,KAAAA,CAAM,GAAG,CAAC,GACjDm9D,WAAW7E,MAAMv6D,MAAAA,GAAS,IAAI,GAAGm/D,QAAQ34D,IAAAA,CAAK,IAAI,CAAC,CAAA,GAAA,CAAA,GAAQ24D,QAAQ34D,IAAAA,CAAK,IAAI;YAClF,MAAM,IAAI0uD,eACR,CAAA,+BAAA,EAAkCkK,QAAQ,CAAA,CAAA,CAAA,EAC1CjjD,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAAS4J,4BAA4B;QAAA;QAG9C,OAAA;YACL,GAAG,KAAA,CAAMpJ,UAAU95C,OAAO,CAAA;YAC1B3X,MAAM;YACNi0D,iBAAiB,IAAA,CAAKtC,IAAAA,CAAKsC,eAAAA,IAAmB6F;YAC9ClqD,OAAO,IAAA,CAAK+hD,IAAAA,CAAK/hD,KAAAA,IAASoqD;YAC1BhvB,OAAOyvB;QACT;IAAA;IAAA;;;;GAAA,GAQF7I,MAAMW,QAAAA,EAAuC;QAC3C,MAAMC,UAAU,IAAImH,YAAY,IAAA,CAAKjI,QAAQ;QAC7Cc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;ACzEO,MAAM0H,gBAAkD;IAAA,yDAAA,GAI7DvJ,YAIYe,QAAAA,EACVC,IAAAA,CACA;QAAA,IAAA,CAFUD,QAAAA,GAAAA,UAGV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAC;IAAA;IAAA;;;GAAA,GAO7BtzD,GAAGA,EAAAA,EAA6B;QAC9B,OAAO,IAAA,CAAKuzD,KAAAA,CAAM;YAACvzD;QAAAA,CAAG;IAAA;IAAA;;;GAAA,GAOxB40D,QAA+B;QAC7B,OAAO,IAAA,CAAKtB,IAAAA,CAAKtzD,EAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBlE,MAAMA,KAAAA,EAAgC;QACpC,OAAO,IAAA,CAAKy3D,KAAAA,CAAM;YAACz3D;YAAOkE,IAAIk1D,mBAAmBp5D,OAAO,IAAA,CAAKw3D,IAAAA,CAAKtzD,EAAE;QAAA,CAAE;IAAA;IAAA;;;GAAA,GAOxEyzD,WAAqC;QACnC,OAAO,IAAA,CAAKH,IAAAA,CAAKx3D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBqgB,KAAKA,IAAAA,EAAgD;QACnD,OAAO,IAAA,CAAKo3C,KAAAA,CAAM;YAACp3C;QAAAA,CAAK;IAAA;IAAA;;GAAA,GAM1Bu3C,UAA+C;QAC7C,OAAO,IAAA,CAAKJ,IAAAA,CAAKn3C,IAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBze,KAAKA,IAAAA,EAA8D;QACjE,OAAO,IAAA,CAAK61D,KAAAA,CAAM;YAAC71D;QAAAA,CAAK;IAAA;IAAA;;;GAAA,GAO1B++D,SAAS7oD,UAAU,CAAA,CAAA,EAAuB;QACxC,OAAO,IAAA,CAAK2/C,KAAAA,CAAM;YAChB3R,gBAAgB;gBAAC,GAAI,IAAA,CAAK0R,IAAAA,CAAK1R,cAAAA,IAAkB,CAAC,CAAA;gBAAI6a,UAAU7oD;YAAAA;QAAO,CACxE;IAAA;IAAA;;;GAAA,GAOH8oD,cAAmC;QACjC,OAAO,IAAA,CAAKpJ,IAAAA,CAAK1R,cAAAA,GAAiB,IAAA,CAAK0R,IAAAA,CAAK1R,cAAAA,CAAe6a,QAAAA,GAAWp4D,KAAAA;IAAAA;IAAAA;;;GAAAA,GAOxEuvD,UAAmC;QACjC,OAAO,IAAA,CAAKN,IAAAA,CAAK51D,IAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnB6T,MAAMA,KAAAA,EAAmD;QACvD,OAAO,IAAA,CAAKgiD,KAAAA,CAAM;YAAChiD;QAAAA,CAAM;IAAA;IAAA;;;GAAA,GAO3BikD,WAAqC;QACnC,OAAO,IAAA,CAAKlC,IAAAA,CAAK/hD,KAAAA;IAAAA;IAAAA;;;;GAAAA,GAQnBpW,WAAWA,UAAAA,EAAkD;QAC3D,OAAO,IAAA,CAAKo4D,KAAAA,CAAM;YAACp4D;QAAAA,CAAW;IAAA;IAAA;;;GAAA,GAOhC+7D,gBAA+C;QACvC/7D,MAAAA,aAAa,IAAA,CAAKm4D,IAAAA,CAAKn4D,UAAAA;QAEzB,OAAA,OAAOA,cAAe,WACjB,IAAA,CAAKk4D,QAAAA,CAASv4D,MAAAA,CAAOI,GAAAA,CAAIC,UAAU,IAGrC,IAAA,CAAKm4D,IAAAA,CAAKn4D,UAAAA;IAAAA;IAAAA;;;GAAAA,GAOnBi4D,UAAU95C,UAAoC;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAe;QAC5D,MAAA,EAACzX,EAAAA,EAAIlE,KAAAA,EAAOyV,KAAAA,EAAAA,GAAS,IAAA,CAAK+hD,IAAAA;QAC5B,IAAA,OAAOtzD,MAAO,YAAY,CAACA,IACvB,MAAA,IAAIqyD,eACR,mCACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASiC,WAAW;QAGpC,IAAI,CAACv7C,QAAQqjD,eAAAA,IAAAA,CAAoB,OAAO7gE,SAAU,YAAY,CAACA,KAAAA,GACvD,MAAA,IAAIu2D,eAAe,sCAAsC/4C,QAAQ7B,IAAAA,EAAMzX,EAAE,EAAE0yD,WAAAA,CAC/EE,SAASmB,cACX;QAGE54D,IAAAA,aAAa,IAAA,CAAKm4D,IAAAA,CAAKn4D,UAAAA;QACvB,IAAA,OAAOA,cAAe,UAAU;YAClC,MAAMwG,OAAO,IAAA,CAAK0xD,QAAAA,CAASv4D,MAAAA,CAAOI,GAAAA,CAAIC,UAAU;YAChD,IAAI,CAACwG,MACG,MAAA,IAAI0wD,eACR,CAAA,qBAAA,EAAwBl3D,UAAU,CAAA,WAAA,CAAA,EAClCme,QAAQ7B,IAAAA,EACRzX,EACF,EAAE0yD,WAAAA,CAAYE,SAASgK,qBAAqB;YAGjCj7D,aAAAA;QAAAA;QAGf,MAAMk7D,mBAAmB;YAACplD,MAAM6B,QAAQ7B,IAAAA,CAAKud,MAAAA,CAAOh1B,EAAE;YAAGyyD,MAAM;QAAO;QACtE,IAAIqK,YACFvrD,iBAAiBgkD,oBACjBhkD,iBAAiB4oD,uBACjB5oD,iBAAiBwlD,mBACjBxlD,iBAAiB+pD,cACb/pD,MAAM6hD,SAAAA,CAAUyJ,gBAAgB,IAChCtrD;QAIF,IAAA,OAAOurD,aAAc,YAAY;YACnC,MAAMC,gBAAgBD;YACtBA,YAAYA,CAACjG,QAAQmG,eACZD,cAAclG,QAAQ;oBAAC,GAAGmG,YAAAA;oBAAcH;gBAAAA,CAAiB;QAAA;QAI7D,OAAA;YACL,GAAG,IAAA,CAAKvJ,IAAAA;YACRtzD,IAAI+0D,WAAW/0D,IAAIsZ,QAAQ7B,IAAAA,EAAM6B,QAAQ3U,KAAK;YAC9CxJ;YACAoW,OAAOurD;YACPhhE;YACA6F,MAAM;QACR;IAAA;IAAA;;;GAAA,GAOF4xD,MAAMW,QAAAA,EAA6C;QACjD,MAAMC,UAAU,IAAI0H,gBAAgB,IAAA,CAAKxI,QAAQ;QACjDc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;AC7SA,MAAM8I,6BACJA,CAACr5D,SAA2B0vD,OAAmChyD,CAAuB,eAAA;QAC9EnG,MAAAA,aACJm4D,KAAKn4D,UAAAA,IAAAA,CACJ,OAAOm4D,KAAKn4D,UAAAA,IAAe,WAAWm4D,KAAKn4D,UAAAA,GAAam4D,KAAKn4D,UAAAA,CAAWiH,IAAAA;QAEpEjH,OAAAA,aACHyI,QAAQgzD,mBAAAA,CAAoB;YAACz7D;YAAYmG;QAAAA,CAAW,IACpD,IAAIy1D,gBAAgBnzD,OAAO,EAAE5D,EAAAA,CAAG,gBAAgB,EAAEsB,UAAAA,CAAWA,UAAU;IAC7E;AAOK,MAAM47D,gCAAgCrB,gBAAgB;IAAA,+DAAA,GAI3DvJ,YAIYe,QAAAA,EACVC,IAAAA,CACA;QACMD,KAAAA,CAAAA,UAAUC,IAAI,GAAC,IAAA,CAHXD,QAAAA,GAAAA,UAIV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAC;IAAA;IAAA;;;;GAAA,GAQ7BF,UAAU95C,UAA4B;QAAC7B,MAAM,CAAA,CAAA;IAAA,CAAA,EAAuB;QAC5D67C,MAAAA,OAAO,KAAA,CAAMF,UAAU;YAAC,GAAG95C,OAAAA;YAASqjD,iBAAiB,CAAA;QAAA,CAAK;QAEhE,IAAI,CAACrJ,KAAKn4D,UAAAA,EACF,MAAA,IAAIk3D,eACR,oDACA/4C,QAAQ7B,IAAAA,EACR6B,QAAQ3U,KACV,EAAE+tD,WAAAA,CAAYE,SAASuK,oBAAoB;QAG7C,MAAM5rD,QAAQ+hD,KAAK/hD,KAAAA,IAAS0rD,2BAA2B,IAAA,CAAK5J,QAAAA,EAAUC,IAAI;QACnE,OAAA;YAAC,GAAGA,IAAAA;YAAM/hD;YAAOpW,YAAYm4D,KAAKn4D,UAAAA;YAAY+C,KAAKo1D,KAAKtzD,EAAAA;QAAE;IAAA;IAAA;;;GAAA,GAOnEuzD,MAAMW,QAAAA,EAA6D;QACjE,MAAMC,UAAU,IAAI+I,wBAAwB,IAAA,CAAK7J,QAAQ;QACzDc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAIY,YAAY,CAAA,CAAA;QAAC,GACxCC;IAAAA;AAEX;AAGO,SAASuH,mBAAmB14D,IAAAA,EAAyC;IACnEnF,QAAAA,sKAAAA,EAASmF,IAAI,KAAK,OAAOA,KAAK7H,UAAAA,GAAe,OAAe,OAAO6H,KAAK9E,GAAAA,IAAQ;AACzF;ACrFO,MAAMk/D,gCAAgCjD,oBAAoB;IAAA,2DAAA,GAI/D7H,YAIYe,QAAAA,EACVC,IAAAA,CACA;QACMD,KAAAA,CAAAA,QAAQ,GAAC,IAAA,CAHLA,QAAAA,GAAAA,UAIV,IAAA,CAAKC,IAAAA,GAAOA,QAAc,CAAC;IAAA;IAAA;;;;GAAA,GAQ7B/hD,MAAMA,KAAAA,EAAuC;QAC3C,OAAO,IAAA,CAAK8rD,gCAAAA,CAAiC;YAAC9rD;QAAAA,CAAM;IAAA;IAAA;;;GAAA,GAOtDgiD,MAAMW,QAAAA,EAAyD;QACvD3G,MAAAA,SAAS,KAAA,CAAMgG,MAAMW,QAAQ,GAC7BC,UAAU,IAAIiJ,wBAAwB,IAAA,CAAK/J,QAAQ;QACzDc,OAAAA,QAAQb,IAAAA,GAAO;YAAC,GAAG,IAAA,CAAKA,IAAAA;YAAM,GAAG/F,OAAOqN,OAAAA,CAAQ,CAAA;YAAG,GAAI1G,YAAY,CAAA,CAAA;QAAC,GAC7DC;IAAAA;IAAAA;;;GAAAA,GAOTkJ,iCAAiCnJ,QAAAA,EAAyD;QACxF,MAAM3G,SAAS,KAAA,CAAMgG,MAAMW,QAAQ,GAC7BC,UAAU,IAAIiJ,wBAAwB,IAAA,CAAK/J,QAAQ,GACnDuC,kBAAkB,IAAA,CAAKtC,IAAAA,CAAKsC,eAAAA,EAE5B0H,WADiB1H,mBAAmBA,gBAAgBuD,QAAAA,KAAaR,yBACrC;YAAC/C,iBAAiBvxD,KAAAA;QAAAA,IAAa,CAAC;QAClE8vD,OAAAA,QAAQb,IAAAA,GAAO;YACb,GAAG/F,OAAOqN,OAAAA,CAAQ,CAAA;YAClB,GAAG,IAAA,CAAKtH,IAAAA;YACR,GAAIY,YAAY,CAAC,CAAA;YACjB,GAAGoJ,QAAAA;QAAAA,GAEEnJ;IAAAA;AAEX;AC7DA,MAAMoJ,oBAAoB;IAAC;IAAqB,kBAAkB;CAAA;AAElE,SAASC,iBAAiBpgD,QAAAA,EAAkB;IACnCmgD,OAAAA,kBAAkBr1C,QAAAA,CAAS9K,QAAQ;AAC5C;AAEA,SAASqgD,eAAetiE,UAAAA,EAAwB;IACvCA,OAAAA,WAAWwG,IAAAA,EAAMS,SAAS;AACnC;AAEA,SAASs7D,OAAOC,UAAAA,EAA4C;IAC1D,OAAOA,WAAWh8D,IAAAA,KAAS;AAC7B;AAEO,SAASi8D,iBAAiB,EAAC9iE,MAAAA,EAAwB,EAAa;IACrE,OAAOA,OACJw9D,YAAAA,CAAAA,EACA9zD,MAAAA,CAAQq5D,CAAM,MAAA;QACP1iE,MAAAA,aAAaL,OAAOI,GAAAA,CAAI2iE,CAAC;QACxB1iE,OAAAA,cAAcsiE,eAAetiE,UAAU;IAAA,CAC/C,EACAqJ,MAAAA,CAAQq5D,CAAAA,IAAM,CAACL,iBAAiBK,CAAC,CAAC;AACvC;AAEO,SAASC,yBAAyBl6D,OAAAA,EAA8C;IACvEg6D,OAAAA,iBAAiBh6D,OAAO,EACzBM,GAAAA,CAAKkZ,CAAAA,WAAa2gD,wBAAwBn6D,SAASwZ,QAAQ,CAAC;AAC3E;AAEgB2gD,SAAAA,wBACdn6D,OAAAA,EACAwZ,QAAAA,EACiB;IACX,MAAA,EAACtiB,MAAAA,EAAU8I,GAAAA,SAEXjC,OAAO7G,OAAOI,GAAAA,CAAIkiB,QAAQ;IAChC,IAAI,CAACzb,MACH,MAAM,IAAIjC,MAAM,CAAA,uBAAA,EAA0B0d,QAAQ,CAAA,WAAA,CAAa;IAGjE,MAAMthB,QAAQ6F,KAAK7F,KAAAA,4IAASkiE,UAAAA,EAAU5gD,QAAQ;IAE9C,OAAO,IAAIy+C,gBAAgBj4D,OAAO,EAC/B5D,EAAAA,CAAGod,QAAQ,EACXthB,KAAAA,CAAMA,KAAK,EACXX,UAAAA,CAAWwG,IAAI,EACf4P,KAAAA,CAAM,CAACvR,IAAIi+D,iBAAiB;QAC3B,MAAM1Q,SAAS0Q,aAAa1Q,MAAAA,EACtByM,aAAa0D,OAAOnQ,MAAM,IAC3BA,OAAO5gB,KAAAA,CAAMx+B,IAAAA,CAAMnL,CAAAA,OAASA,KAAKhD,EAAAA,KAAOA,EAAE,IAC3C;QAEAk+D,IAAAA,OAAOC,oBAAoBv6D,SAASwZ,QAAQ;QAC5C48C,OAAAA,cAAcA,WAAWl+D,KAAAA,IAAAA,CAC3BoiE,OAAOA,KAAKpiE,KAAAA,CAAMk+D,WAAWl+D,KAAK,CAAA,GAG7BoiE;IAAAA,CACR;AACL;AAEgBC,SAAAA,oBACdv6D,OAAAA,EACAw6D,cAAAA,EACqB;IACf,MAAA,EAACtjE,MAAAA,EAAQ87D,mBAAAA,EAAAA,GAAuBhzD,SAEhCzI,aAAa,OAAOijE,kBAAmB,WAAWA,iBAAiBA,eAAejjE,UAAAA,EAClFiiB,WAAW,OAAOjiB,cAAe,WAAWA,aAAaA,WAAWiH,IAAAA,EACpEkxD,OACJ,OAAO8K,kBAAmB,WAAW;QAACjjE;IAAcijE,IAAAA,gBAEhDz8D,OAAO7G,OAAOI,GAAAA,CAAIkiB,QAAQ;IAChC,IAAI,CAACzb,MACH,MAAM,IAAIjC,MAAM,CAAA,uBAAA,EAA0B0d,QAAQ,CAAA,WAAA,CAAa;IAGjE,MAAMthB,QAAQ6F,KAAK7F,KAAAA,4IAASkiE,UAAAA,EAAU5gD,QAAQ;IAE9C,OAAO,IAAIggD,wBAAwBx5D,OAAO,EACvC5D,EAAAA,CAAGszD,KAAKtzD,EAAAA,IAAMod,QAAQ,EACtBthB,KAAAA,CAAMw3D,KAAKx3D,KAAAA,IAASA,KAAK,EACzB0I,MAAAA,CAAO,gBAAgB,EACvBvE,MAAAA,CAAO;QAAC0B,MAAMyb;IAAS,CAAA,EACvBjiB,UAAAA,CAAWwG,IAAI,EACfqwD,eAAAA,CAAgBgB,iCAAiCra,EAAE,EACnD98B,cAAAA,CACCy3C,KAAKz3C,cAAAA,IAAkB;QACrB;YACE7b,IAAI;YACJlE,OAAO;YACPqgB,MAAM;gBAACrgB,OAAO;oBAAC2V,KAAK;oBAAkCqhD,IAAI54D;gBAAAA;YAAwB;QAAC;QAErF;YACE8F,IAAI;YACJlE,OAAO;YACPqgB,MAAM;gBAACrgB,OAAO;oBAAC2V,KAAK;oBAAiCqhD,IAAI54D;gBAAAA;YAAwB;QAAC;QAEpF;YACE8F,IAAI;YACJlE,OAAO;YACPqgB,MAAM;gBAACrgB,OAAO;oBAAC2V,KAAK;oBAAkCqhD,IAAI54D;gBAAAA;YAAwB;QAAC,CACpF;KAEL,EACCqX,KAAAA,CACC+hD,KAAK/hD,KAAAA,IAAAA,CACDjQ,CAAAA,aAAuBs1D,oBAAoB;YAACz7D,YAAYiiB;YAAU9b;QAAAA,CAAW,CAAA,CACnF,EACCs0D,eAAAA,CAAgBtC,KAAKsC,eAAAA,IAAmBgD,oBAAoB,EAC5Dh9C,SAAAA,CACC03C,KAAK13C,SAAAA,IAAa;QAAA,qFAAA;QAAA,cAAA;WAIb04C,kCAAkC1wD,SAASjC,IAAI;QAAA,iBAAA;QAGlD,IAAIwxD,gBAAgBvvD,OAAO,EACxByY,KAAAA,CAAM,QAAQ,EACdF,IAAAA,CAAK;YAACrgB,OAAO;gBAAC2V,KAAK;gBAAkCqhD,IAAI54D;YAAAA;QAAwB,CAAE,EACnF4B,KAAAA,CAAM,cAAc,EACpB4B,IAAAA,oJAAK2gE,mBAAgB,EACrB37D,MAAAA,CAAO,WAAW,EAClBzC,MAAAA,CAAO;YAACtC,QAAQ;QAAA,CAAU;QAE7B,IAAIw1D,gBAAgBvvD,OAAO,EACxByY,KAAAA,CAAM,QAAQ,EACdF,IAAAA,CAAK;YAACrgB,OAAO;gBAAC2V,KAAK;gBAAmCqhD,IAAI54D;YAAAA;QAAwB,CAAE,EACpF4B,KAAAA,CAAM,eAAe,EACrB4B,IAAAA,oJAAK4gE,YAAS,EACd57D,MAAAA,CAAO,WAAW,EAClBzC,MAAAA,CAAO;YAACtC,QAAQ;QAAS,CAAA;KAIhC;AACJ;ACjHA,SAAS4gE,QAAQpjE,UAAAA,EAA2C;IAC1D,OAAI,CAACA,cAAc,OAAOA,cAAe,WAChC,CAAA,IAGF8N,CAAAA,CAAQ9N,WAAWuC,IAAAA;AAC5B;AAEA,SAAS8gE,oBAAoB56D,OAAAA,EAAwC;IAC7D+oC,MAAAA,QAAQmxB,yBAAyBl6D,OAAO;IACvC,OAAA,IAAI03D,YAAY13D,OAAO,EAC3B5D,EAAAA,CAAG,UAAU,EACblE,KAAAA,CAAM,SAAS,EACfqgB,IAAAA,CAAK;QAACrgB,OAAO;YAAC2V,KAAK;YAAoCqhD,IAAI54D;QAAAA;IAA0B,CAAA,EACrFyyC,KAAAA,CAAMA,KAAK,EACXqN,SAAAA,CAAUrN,MAAMtlC,IAAAA,CAAMrE,CAAAA,OAASu7D,QAAQv7D,KAAKk0D,aAAAA,CAAc,CAAC,CAAC,CAAC;AAClE;AAGO,SAASuH,uBAAuB,EACrCC,mBAAAA,EACA/mB,MAAAA,EACuB,EAAqB;IAC5C,MAAMgnB,2KAAgBC,8BAAAA,EAA2BjnB,MAAM,GACjD/zC,UAA4B;QAChC,GAAG+zC,MAAAA;QACH0gB,qBAAqBA,IAAMwG;QAC3BjI,qBAAsBt9C,CAAY,YAAA;YAC5B66C,IAAAA,UACFuK,sBAAsBG,kBAAkB;gBAAC,GAAGvlD,OAAAA;gBAAS,GAAGqlD,aAAAA;YAAAA,CAAc,KACtE,IAAI5H,gBAAgBnzD,OAAO;YAExBuwD,OAAAA,QAAQS,KAAAA,CACXT,KAAAA,CAAAA,UAAUA,QAAQn0D,EAAAA,CAAG,gBAAgB,CAAA,GAGnCsZ,QAAQhY,UAAAA,IAAAA,CACV6yD,UAAUA,QAAQ7yD,UAAAA,CAAWU,6KAAAA,EAAesX,QAAQhY,UAAU,CAAC,CAAA,GAG1D6yD,QAAQh5D,UAAAA,CAAWme,QAAQne,UAAU;QAAA;IAAA,GAI1C0jE,mBAAqC;QACzCC,UAAUA,IAAMN,oBAAoB56D,OAAO;QAC3Cm7D,kBAAkBA,CAAAA,GAAIC,OAASb,oBAAoBv6D,SAAS,GAAGo7D,IAAI;QACnEC,sBAAsBA,CAAAA,GAAID,OAASjB,wBAAwBn6D,SAAS,GAAGo7D,IAAI;QAC3EE,uBAAuBA,CAAAA,GAAIF,OAASlB,yBAAyBl6D,SAAS,GAAGo7D,IAAI;QAC7EpkE,UAAUA,CAAAA,GAAIokE,OAAS,IAAIjI,gBAAgBnzD,SAAS,GAAGo7D,IAAI;QAC3DG,kCAAkCA,CAAAA,GAAIH,OACpClH,mCAAmCl0D,SAAS,GAAGo7D,IAAI;QACrDI,iBAAiBx7D,QAAQgzD,mBAAAA;QAEzBsH,MAAMA,CAAAA,GAAIc,OAAS,IAAI1D,YAAY13D,SAAS,GAAGo7D,IAAI;QACnDlD,UAAUA,CAAAA,GAAIkD,OAAS,IAAInD,gBAAgBj4D,SAAS,GAAGo7D,IAAI;QAE3D33C,UAAUA,CAAAA,GAAI23C,OAAS,IAAI7L,gBAAgBvvD,SAAS,GAAGo7D,IAAI;QAC3DK,eAAeA,CAAAA,GAAIL,OAAS,IAAIvK,qBAAqB7wD,SAAS,GAAGo7D,IAAI;QACrEtG,wCAAwCA,CAAAA,GAAIsG,OAC1CtG,uCAAuC90D,SAAS,GAAGo7D,IAAI;QAEzDM,cAAcA,CAAAA,GAAIN,OAAS,IAAI7E,oBAAoBv2D,SAAS,GAAGo7D,IAAI;QACnEO,kBAAkBA,CAAAA,GAAIP,OAAS,IAAI9B,wBAAwBt5D,SAAS,GAAGo7D,IAAI;QAE3EQ,kBAAkBA,CAAAA,GAAIR,OAAS5K,oBAAoBxwD,SAAS,GAAGo7D,IAAI;QACnES,0BAA0BA,CAAAA,GAAIT,OAAS1K,kCAAkC1wD,SAAS,GAAGo7D,IAAI;QAEzFU,QAAQA,CAAAA,GAAIV,OAASnH,mBAAmBj0D,SAAS,GAAGo7D,IAAI;QAExD5G,kCAAkCA,CAAAA,GAAI4G,OACpC5G,iCAAiCx0D,SAAS,GAAGo7D,IAAI;QAEnDxG,0BAA0BA,CACxBn7C,YACAG,aAEA,IAAIu6C,gCAAgCn0D,SAAS;gBAC3C5D,IAAIqd;gBACJG;gBACAH;YAAAA,CACD;QAEHgN,WAAYipC,CAAAA,OACHqM,wLAAAA,EAAmBrM,IAAI,IAC1B,IAAIiC,iBAAiB,EAAElrC,SAAAA,CAAUipC,IAAqB,IACtD,IAAIiC,iBAAiBjC,IAAsB;QAGjDjkD,SAASA,IAAAA,CAAgB;gBAACrP,2IAAI4/D,UAAAA,EAAS,aAAa;gBAAGj+D,MAAM;YAAA,CAAA;QAE7D25B,MAAMd;QACN52B;IACF;IAEOi7D,OAAAA;AACT;ACpIO,MAAMgB,gBAAyCplE,CAAU,UAAA;IACxD,MAAA,EAACkuB,QAAAA,EAAAA,GAAYluB;IAEnB,OAAIkuB,WACK;QACLqW,OAAO;QACPjjC,OAAO;IAAA,IAIJ;AACT;AACA8jE,cAAc1vD,WAAAA,GAAc;ACV5B,MAAM7Q,QAEF;IAACwgE,aAAa,CAAA,CAAA;AAAE;AAEb,SAASC,eAAe1gE,KAAAA,EAAoD;IACjFC,MAAMwgE,WAAAA,GAAczgE;AACtB;AAQO,SAAS2gE,eACdnuD,MAAAA,EACA5R,MAAAA,EACAggE,WAAAA,EACA//D,OAAAA,EAC2F;IAC3F,MAAMb,QAAQ4gE,aAAa5gE,SAAS,CAC9BygE,CAAAA,EAAAA,cAAcxgE,MAAMwgE,WAAAA,IAAe,CACnCI,CAAAA,EAAAA,iBAAiBjgE,OAAOD,EAAAA,iOAAM+gC,OAAAA,KAC9Bo/B,aAAatuD,WAAW,YAAY5R,OAAOwB,QAAAA;IAGjD,IAAA,IAAS+W,IAAIsnD,YAAY3iE,MAAAA,GAAS,GAAGqb,KAAK,GAAGA,IAAK;QAC1ChZ,MAAAA,QAAOsgE,WAAAA,CAAYtnD,CAAC,CAAA;QAE1B,IAAI,OAAOhZ,SAAS,YAAA,CAKlBA,MAAKo2D,eAAAA,GAAkB/jD,QAAQ5R,QAAQ;YACrCT,MAAAA;YACAmF,OAAO6T;QAAAA,CACR,KAAA,uCAAA;QAEAhZ,MAAKmC,IAAAA,KAAS,kBACbnC,MAAKiyD,cAAAA,KAAmBxxD,OAAO0B,IAAAA,IAC/BnC,MAAK8Z,OAAAA,CAAQ9U,MAAAA,KAAW,gBAAA,GAC1B;YACA,MAAMkpC,aAAayyB,aAAa;gBAAC1+D,UAAUxB,OAAOwB,QAAAA;YAAAA,IAAYgkB;YAEvD,OAAA;gBACLpmB,OAAOA,MACJD,KAAAA,CAAM,GAAGoZ,CAAC,EACVwc,MAAAA,CAAO;oBAAC;wBAAC;4BAACh1B,IAAIkgE;4BAAgBjgE,QAAQytC;4BAAYxtC;wBAAAA,CAAQ;qBAAC;iBAAC;YACjE;QAAA;IACF;IAGK,OAAA;QAAC2R;QAAgB5R;QAAQC;IAAO;AACzC;ACjDO,MAAMkgE,2BAAuE;IAClFC,2JAAQliD,UAAAA;IACR9E,2JAAQ8mB,YAAAA;IACRmgC,iKAAcn3C,YAAAA;IACdo3C,4JAASpiD,UAAAA;IACTqiD,8JAAWC,WAAAA;IACXC,6JAAUD,WAAAA;IACVrqC,4JAASkN,cAAAA;IACTE,WAAWC,mKAAAA;AACb;ACdO,SAASk9B,8BAA8Bh/D,IAAAA,EAA4C;IACxF,OAAOy+D,wBAAAA,CAAyBz+D,IAAI,CAAA;AACtC;ACOA,SAASi/D,sBAAsBp1C,WAAAA,EAAqB;IAElD,IAAIA,YAAY,CAAA;IAEVq1C,MAAAA,cAAcjmE,SAASmsD,cAAAA,CAAe+Z,wBAAwB;IAEpE,IAAID,aAAa;QACTE,MAAAA,gBAAgBF,YAAYx/D,QAAAA,CAAS,CAAC,CAAA;QAE5C,IAAI,CAAA,CADiB0/D,cAAcC,YAAAA,GAAeD,cAAcE,YAAAA,GAC7C;YAEXC,MAAAA,eAAeC,iBAAiBJ,aAAa,EAAEtU,SAAAA;YAErDsU,cAAcvxD,KAAAA,CAAMi9C,SAAAA,GAAY,UAChCthD,WAAW,MAAM;gBAEf41D,cAAcvxD,KAAAA,CAAMi9C,SAAAA,GAAYyU;YAAAA,GAC/B,CAAC;QAAA;IACN;AAEJ;AAEA,MAAME,0LAAWnlE,UAAAA,qJAAOgyD,kBAAe,CAAA,CAAA;;;;;AAAA,CAAA;AAOhC,SAAAoT,6BAAArmE,EAAAA,EAAA;IAAAN,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAAsC,EAAA6wB,YAAAA,WAAAA,EAAAtQ,QAAAA,EAAAA,GAAAlgB,IAO3C,EAAAI,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC;IAACoB,IAAAA;IAAAZ,CAAAA,CAAA8wB,CAAAA,CAAAA,KAAAA,eAAA9wB,CAAAA,CAAAA,EAAAA,KAAAwgB,WAAAA,CAGlD5f,KAAA6J,CAAA,MAAA;QACEA,EAACwpC,eAAAA,CAAiB,GAClBiyB,sBAAsBp1C,WAAU,GAChCtQ,SAAS;IACVxgB,GAAAA,CAAAA,CAAAA,EAAAA,GAAA8wB,aAAA9wB,CAAAA,CAAAA,EAAAA,GAAAwgB,UAAAxgB,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IALH,MAAA4mE,oBAA0BhmE;IAOzBI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA8wB,cAAAA,CAKS9vB,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;QAAwB8vB,iBAAAA;IAAc,CAAA,GAAA9wB,CAAAA,CAAAA,EAAAA,GAAA8wB,aAAA9wB,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAA8wB,CAAAA,CAAAA,KAAAA,eAAA9wB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAElCO,KACLP,EADKowB,cACH,uCACA,kCADoC,GACD9wB,CAAAA,CAAAA,EAAAA,GAAA8wB,aAAA9wB,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CAH7B4B,KAAA;QAAAyH,SACHrJ;IAEgC,GAC1CjB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAA4mE,EAAAA,CAAAA,KAAAA,qBAAA5mE,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAA6C,KAAAA,CAPHC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAA,SAAA,EAAA;QACM,MAAA;QACC,MAAA9B;QACQ,cAAA6B;QAKL+jE,SAAgB;IACzB,CAAA,GAAA5mE,CAAAA,CAAAA,GAAAA,GAAA4mE,mBAAA5mE,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EATF8C;AASE;ACpEO+jE,MAAAA,eAAetlE,yLAAAA,mJAAO06B,QAAK,CAAA,CAAA;;AAAA,CAAA,EAI3B6qC,cAAcvlE,yLAAAA,mJAAOa,OAAI,CAAA,CAAA;cAAA,EACrBrC,CAAAA,QAAUA,MAAMgnE,UAAU,CAAA;;AAAA,CAAA,EAI9Bh2D,wLAAOxP,UAAAA,mJAAOC,MAAG,EAAwB,CAAC,EAACwlE,QAAAA,EAAQ,+KACvDpuD,MAAAA,CAAAA;;;;;IAAAA,EAKHouD,wLACFpuD,MAAAA,CAAAA;;;IAAAA,CAGC,CAAA;EAAA,CAEJ,GCjBYquD,iCAA8E;IACzFpB,SAAS;IACTF,QAAQ;IACRjqC,SAAS;IACTsqC,UAAU;IACVF,WAAW;IACXh9B,WAAW;IACX88B,cAAc;IACdjnD,QAAQ;AACV;ACNO,SAAAuoD,gBAAA5mE,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,CAAA,GAAyB,EAAAknE,SAAAA,EAAAC,OAAAA,EAAAr7B,IAAAA,EAAAs7B,aAAAzmE,EAAAA,EAAAA,GAAAN,IAI9B+mE,cAAAzmE,OAAkB+I,KAAAA,IAAAA,CAAAA,IAAlB/I;IAAkBI,IAAAA;IAAA,IAAAhB,CAAAA,CAAAonE,CAAAA,CAAAA,KAAAA,WAAApnE,CAAAA,CAAAA,EAAAA,KAAAqnE,aAAA;QAAApmE,IAAAA;QAAAjB,CAAAA,CAAAA,EAAAA,KAAAqnE,cAAAA,CAIDpmE,MAAAqmE,CAAAA,SAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JACV,aAAA,EAA8BA;gBAAAA,MAAAA;gBAAqBD;YAAAA,GAA9B,MAA6C,GACpErnE,CAAAA,CAAAA,EAAAA,GAAAqnE,aAAArnE,CAAAA,CAAAA,EAAAA,GAAAiB,GAAAA,IAAAA,MAAAjB,CAAAA,CAAA,CAAA,CAAA,EAFAgB,KAAAomE,QAAO59D,GAAAA,CAAKvI,GAEZ,GAACjB,CAAAA,CAAAA,EAAAA,GAAAonE,SAAApnE,CAAAA,CAAAA,EAAAA,GAAAqnE,aAAArnE,CAAAA,CAAAA,EAAAA,GAAAgB;IAAA,OAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAA,OAAAjB,CAAAA,CAAAmnE,CAAAA,CAAAA,KAAAA,aAAAnnE,CAAAA,CAAAA,EAAAA,KAAA+rC,QAAA/rC,CAAAA,CAAA,CAAA,CAAA,KAAAgB,KAAAA,CAHJC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,cAAA,EAAuBkmE;QAAAA;QAAiBp7B;QACtC/qC,UAGH;IAAA,CAAA,GAAchB,CAAAA,CAAAA,EAAAA,GAAAmnE,WAAAnnE,CAAAA,CAAAA,EAAAA,GAAA+rC,MAAA/rC,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAJdiB;AAIc;ACAX,MAAMsmE,0LAAUhmE,SAAAA,mJAAOa,OAAI,EAAuCrC,CAAU,UAAA;IACjF,MAAMgC,oLAAQylE,cAAAA,EAAYznE,MAAMgC,KAAK,GAC/BV,QAAQtB,MAAM0nE,MAAAA;IAEb7uD,mLAAAA,MAAAA,CAAAA;uBAAAA,EACgB7W,MAAMV,KAAAA,CAAMqmE,MAAAA,CAAOrmE,KAAK,CAAA,CAAE0X,EAAE,CAAA;sBAAA,EAC7BhX,MAAMV,KAAAA,CAAMqmE,MAAAA,CAAOrmE,KAAK,CAAA,CAAE2X,EAAE,CAAA;;;;WAAA,EAIvCjX,MAAM2lE,MAAAA,CAAOt1C,KAAAA,CAAM,CAAC,CAAA,CAAE2Z,IAAI,CAAA;YAAA,EACzBhqC,MAAM2lE,MAAAA,CAAOt1C,KAAAA,CAAM,CAAC,CAAA,CAAE2Z,IAAI,CAAA;;;;EAAA,CAAA;AAKxC,CAAC,GAEK47B,2BAA4F;IAChG9B,SAAS;IACTF,QAAQ;IACRjqC,SAAS;IACTsqC,UAAU;IACVF,WAAW;IACXh9B,WAAW;IACX88B,cAAc;IACdjnD,QAAQ;IACRipD,iBAAiB;AACnB,GAUMC,wBAA6C;IACjDC,SAAS,CAAA;IACT3gC,mBAAmB,CAAA;AACrB,GAEM4gC,iMAAiBxmE,SAAAA,EAAOymE,4JAAQ,EAAGjoE,CAAU,UAAA;IAC3CgC,MAAAA,oLAAQylE,cAAAA,EAAYznE,MAAMgC,KAAK;IAC9B6W,mLAAAA,MAAAA,CAAAA;;WAAAA,EAEI7W,MAAM2lE,MAAAA,CAAOt1C,KAAAA,CAAM,CAAC,CAAA,CAAE2Z,IAAI,CAAA;YAAA,EACzBhqC,MAAM2lE,MAAAA,CAAOt1C,KAAAA,CAAM,CAAC,CAAA,CAAE2Z,IAAI,CAAA;EAAA,CAAA;AAExC,CAAC,GAEKk8B,+LAAe1mE,SAAAA,mJAAOymE,WAAQ,EAAGjoE,CAAU,UAAA;IACzCgC,MAAAA,oLAAQylE,cAAAA,EAAYznE,MAAMgC,KAAK;IAC9B6W,mLAAAA,MAAAA,CAAAA;;YAAAA,EAEK7W,MAAMmmE,IAAAA,CAAKt4D,IAAAA,CAAKwiB,KAAAA,CAAM,CAAC,CAAA,CAAEhE,UAAU,CAAA;EAAA,CAAA;AAEjD,CAAC,GAEK+5C,WAAW7nE,CAAA,OAAA;IAAAN,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GAAC,EAAAqnE,MAAAA,EAAAA,GAAAhnE,IAChB,CAAA8nE,MAAAruD,OAAA,CAAA,+JAAwBsuD,UAAAA,EAAQf,MAAM;IAAC1mE,IAAAA;IAAAZ,CAAAA,CAAA+Z,CAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAAA,EAAAA,KAAAooE,OAAAA,CAInCxnE,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAKmZ,UAAO,WAAA,CAAKquD,OAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,gBAAA;YAAe,UAAA,CAAA;QAAQ,CAAA,IAAO,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,aAAA,EAAA;YAAiBA;QAAO,CAAA;IAAE,CAAA,GAAMpoE,CAAAA,CAAAA,EAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,EAAAA,GAAAooE,MAAApoE,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAA+Z,CAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAAA,EAAAA,KAAAooE,OAAAA,CACxFpnE,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QACE+Y,UAAAA,WAAAA,CAAYquD,MAAI3yD,cACd,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;YAAW,MAAC;YACX,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,cAAa;gBAAA,UAAO,CAAA;YACvB,CAAA;QAAA,CAAA,IAEC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;YAAK,OAAI,CAAA;YAAQ,MAAA;YACf2yD,UAAI3yD,KAAAA,WAAAA;QAAAA,CACP;IAEJ,CAAA,GAAMzV,CAAAA,CAAAA,EAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,EAAAA,GAAAooE,MAAApoE,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,OAAAA,CAAAA,CAAAY,CAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,EAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAsnE,SAAAA,CAZRrmE,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,mJAAC,OAAA,EAAW;QAAA,OAAA;QAAc,KAAA;QAAyB,SAAC;QAClDL,UAAAA;YAAAA;YACAI;SAAAA;IAAAA,GAFgCsmE,MAalC,GAAOtnE,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAsnE,QAAAtnE,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,EAbPiB;AAaO,GAGLqnE,iBAAiBhoE,CAAA,OAAA;IAAAN,MAAAA,gMAAAC,IAAAA,EAAA,CAAA,GAAC,EAAAsoE,aAAAA,EAAAA,GAAAjoE,IACtB,EAAAI,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAe,QAAQ;IAACC,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAK3BE,KAAAF,EAAE,wBAAwB,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CAFhCI,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAa;QAAA,SAAA;QAAkB,eAAA;QAC9B,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAC,QAAA,EAAA;YAAW,MAAA;YAAU,QAAA;YACnBJ,UACH;QAAA,CAAA;IACF,CAAA,GAAMZ,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAuoE,gBAAAA,CACLtnE,KAAAsnE,cAAa/+D,GAAAA,CAAAO,OAEb,GAAC/J,CAAAA,CAAAA,EAAAA,GAAAuoE,eAAAvoE,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA,OAAA7C,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CARJ4B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,QAAA,EAAqB;QAAA,eAAC;QACrB7B,UAAAA;YAAAA;YAKCC;SAAAA;IAGH,CAAA,GAAQjB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA,EATR6C;AASQ;AAGL,SAAA2lE,aAAAloE,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAAsB,EAAAwoE,KAAAA,EAAA/oB,UAAAA,EAAAgpB,QAAAA,EAAAH,aAAAA,EAAAI,WAAAA,EAAAA,GAAAroE,IAO3B,EAAAI,CAAAA,EAAAA,GAAYC,6KAAAA,EAAe,QAAQ,GACnC,EAAAsG,IAAAA,EAAA2hE,cAAAC,SAAAA,EAAwCJ,GAAAA,OACxCK,gBAAsB7C,8BAA8Bh/D,IAAI;IAACrG,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAyoE,MAAAM,OAAAA,GAAAA,CACnCnoE,KAAAwN,MAAAC,IAAAA,CAAWo6D,MAAKM,OAAQ,GAAC/oE,CAAAA,CAAA,CAAA,CAAA,GAAAyoE,MAAAM,OAAAA,EAAA/oE,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAA/C,MAAAgpE,gBAAsBpoE;IAAyBI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAuoE,gBAAAA,CACjBvnE,KAAAunE,gBAAgBn6D,MAAAC,IAAAA,CAAWk6D,aAAa,IAAM,CAAA,CAAA,EAAAvoE,CAAAA,CAAAA,EAAAA,GAAAuoE,eAAAvoE,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAA5EipE,MAAAA,wBAA8BjoE,IAC9BkoE,eAAqBjiE,SAAS;IAAQhG,IAAAA;IAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACD3B,KAAA;QAAAkoE,WAAY;QAAQC,WAAa;IAAA,GAAQppE,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAA9EqpE,MAAAA,yKAAmBC,oBAAAA,EAAkBroE,EAAyC;IAAC4B,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAA6oE,YAAAA,CAClEhmE,KAAA,IAAAu1B,KAASywC,SAAS,GAAC7oE,CAAAA,CAAAA,EAAAA,GAAA6oE,WAAA7oE,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAEhC,MAAAupE,6KAAuBliC,kBAAAA,EAFVxkC,MAEkC,IAAEglE,qBAAuB;IAAC,IAAA/kE,IAAAoB;IAAA,IAAAlE,CAAAA,CAAAqpE,CAAAA,CAAAA,KAAAA,cAAArpE,CAAAA,CAAAA,EAAAA,KAAA6oE,WAAA;QAGvEW,MAAAA,aAAA,IAAApxC,KAA4BywC,SAAS;QACf3kE,KAAAmlE,WAAUp6B,MAAAA,CAAQu6B,UAAU,GAACxpE,CAAAA,CAAAA,EAAAA,GAAAqpE,YAAArpE,CAAAA,CAAAA,EAAAA,GAAA6oE,WAAA7oE,CAAAA,CAAAA,EAAAA,GAAAkE;IAAA,OAAAA,KAAAlE,CAAAA,CAAA,CAAA,CAAA;IAA7BkE,KAAAA;IAFxB,MAAAulE,qBAA2B3mE;IAKAqD,IAAAA;IAAAnG,CAAAA,CAAAyoE,EAAAA,CAAAA,KAAAA,SAAAzoE,CAAAA,CAAAA,GAAAA,KAAAkpE,gBAAAlpE,CAAAA,CAAA,EAAA,CAAA,KAAA0oE,WAAAA,CAGzBviE,KAAAujE,CAAA,QAAA;QACEA,IAAGl4D,cAAAA,IACHk4D,IAAGz1B,eAAAA,IAECi1B,gBACFR,SAASD,KAAK;IAAA,GAEjBzoE,CAAAA,CAAAA,GAAAA,GAAAyoE,OAAAzoE,CAAAA,CAAAA,GAAAA,GAAAkpE,cAAAlpE,CAAAA,CAAAA,GAAAA,GAAA0oE,UAAA1oE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IARH+X,MAAAA,cAAoB5R,IAajBuC,sJAAAtG,OAAAA,EAAWgE,KAAQ,UAAMC,KAAA,GACvBsC,sJAAAY,OAAAA,EACIhD,MAAQ,UAEFE,MAAA,GAEDoC,MAAA,GACAM,MAAc,gBACVC,MAAsB,wBAGjCR,sJAAAxG,OAAAA,EAAWiH,MAAQ,UAAMC,MAAA;IAACU,IAAAA;IAAAhK,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACboH,MAAA;QAAAkkB,UAAW;IAAA,GAAWluB,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA;IAAA6U,IAAAA;IAAA7U,CAAAA,CAAAA,GAAAA,KAAAgpE,gBAAAA,CAChCn0D,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,iBAA2B;QAAA,WAAC;QAAWm0D,SAAAA;QAAqB,MAAA;IAAA,CAAK,GAAAhpE,CAAAA,CAAAA,GAAAA,GAAAgpE,eAAAhpE,CAAAA,CAAAA,GAAAA,GAAA6U,GAAAA,IAAAA,MAAA7U,CAAAA,CAAA,EAAA,CAAA;IACjE,MAAA2pE,KAAApC,SAAcxyD,MAAQ,UAASC,MAAQ,UAASC,MAAA0yD,wBAAAA,CAAyB1gE,IAAI,CAAA,EAC3E2iE,sJAAAtwD,OAAAA,EAAWpE,MAAA,GAAIC,MAAA2zD,2NAAiBl5C,gBAAAA,EAAck5C,aAAa;IAAC1zD,IAAAA;IAAApV,CAAAA,CAAA4pE,EAAAA,CAAAA,KAAAA,MAAA5pE,CAAAA,CAAAA,GAAAA,KAAAmV,MAAAA,CAA7DC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,IAAW;QAAA,MAAAF;QAAIC,UAAAA;IAAAA,CAA8C,GAAOnV,CAAAA,CAAAA,GAAAA,GAAA4pE,IAAA5pE,CAAAA,CAAAA,GAAAA,GAAAmV,KAAAnV,CAAAA,CAAAA,GAAAA,GAAAoV,GAAAA,IAAAA,MAAApV,CAAAA,CAAA,EAAA,CAAA;IAAAqV,IAAAA;IAAArV,CAAAA,CAAA2pE,EAAAA,CAAAA,KAAAA,MAAA3pE,CAAAA,CAAAA,GAAAA,KAAAiV,OAAAjV,CAAAA,CAAA,EAAA,CAAA,KAAAoV,MAAAA,CADvEC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,IAAA;QAAc,OAAAN;QAAiB,SAAAC;QAAiB,QAAAC;QAC/CG,UAAAA;IAAAA,CACF,GAAUpV,CAAAA,CAAAA,GAAAA,GAAA2pE,IAAA3pE,CAAAA,CAAAA,GAAAA,GAAAiV,KAAAjV,CAAAA,CAAAA,GAAAA,GAAAoV,KAAApV,CAAAA,CAAAA,GAAAA,GAAAqV,GAAAA,IAAAA,MAAArV,CAAAA,CAAA,EAAA,CAAA;IAAAsV,IAAAA;IAAAtV,CAAAA,CAAAgK,EAAAA,CAAAA,KAAAA,OAAAhK,CAAAA,CAAAA,GAAAA,KAAA6U,OAAA7U,CAAAA,CAAA,EAAA,CAAA,KAAAqV,MAAAA,CAJZC,MAKM,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,OAAA;QALM,OAAAtL;QACV6K,UAAAA;YAAAA;YACAQ;SAAAA;IAAAA,CAGF,GAAMrV,CAAAA,CAAAA,GAAAA,GAAAgK,KAAAhK,CAAAA,CAAAA,GAAAA,GAAA6U,KAAA7U,CAAAA,CAAAA,GAAAA,GAAAqV,KAAArV,CAAAA,CAAAA,GAAAA,GAAAsV,GAAAA,IAAAA,MAAAtV,CAAAA,CAAA,EAAA,CAAA;IAAAuV,IAAAA;IAAAvV,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAAA,GAAAA,KAAAiH,OAAAA,CAGDsO,MAAA7U,EAACumE,8BAAAA,CAAgChgE,IAAI,CAAC,KAAwB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA;QAAT,UAAE;IAAA,CAAA,GAAOjH,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAiH,MAAAjH,CAAAA,CAAAA,GAAAA,GAAAuV,GAAAA,IAAAA,MAAAvV,CAAAA,CAAA,EAAA,CAAA;IAAAwV,IAAAA;IAAAxV,CAAAA,CAAAA,GAAAA,KAAAuV,MAAAA,CADjEC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAU,QAAA;QACnBD,UAAAA;IAAAA,CACH,GAAOvV,CAAAA,CAAAA,GAAAA,GAAAuV,KAAAvV,CAAAA,CAAAA,GAAAA,GAAAwV,GAAAA,IAAAA,MAAAxV,CAAAA,CAAA,EAAA,CAAA;IAAA6pE,IAAAA;IAAA7pE,CAAAA,CAAAypE,EAAAA,CAAAA,KAAAA,sBAAAzpE,CAAAA,CAAAA,GAAAA,KAAA6oE,aAAA7oE,CAAAA,CAAA,EAAA,CAAA,KAAAupE,iBAAAA,CAEPM,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,OAAA,EAAQ;QAAA,IAAA;QAAa,MAAA;QAAG,OAAI,CAAA;QAAYhB,UAAAA;QAAkBY,OAAiB;QACzEF,UAAAA;IAAAA,CACH,GAAOvpE,CAAAA,CAAAA,GAAAA,GAAAypE,oBAAAzpE,CAAAA,CAAAA,GAAAA,GAAA6oE,WAAA7oE,CAAAA,CAAAA,GAAAA,GAAAupE,gBAAAvpE,CAAAA,CAAAA,GAAAA,GAAA6pE,GAAAA,IAAAA,MAAA7pE,CAAAA,CAAA,EAAA,CAAA;IAAA8pE,IAAAA;IAAA9pE,CAAAA,CAAAwV,EAAAA,CAAAA,KAAAA,OAAAxV,CAAAA,CAAAA,GAAAA,KAAA6pE,MAAAA,CAPTC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,QAAA,EAAa;QAAA,OAAC;QACbt0D,UAAAA;YAAAA;YAIAq0D;SAAAA;IAGF,CAAA,GAAQ7pE,CAAAA,CAAAA,GAAAA,GAAAwV,KAAAxV,CAAAA,CAAAA,GAAAA,GAAA6pE,KAAA7pE,CAAAA,CAAAA,GAAAA,GAAA8pE,GAAAA,IAAAA,MAAA9pE,CAAAA,CAAA,EAAA,CAAA;IAAA+pE,IAAAA;IAAA/pE,CAAAA,CAAAA,GAAAA,KAAAipE,wBAAAA,CAEPc,MAAAd,sBAAqBxmE,MAAAA,GAAW,KAC/B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAW;QAAA,MAAA;QAAW,SAAA;QAAiB,OAAA;QACtC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,UAAA,EACW;YAAA,WAAA;YACD,SAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,gBAAA;gBAA8BwmE,eAAAA;YAAAA,CAAwB;YAChE,QAAK,CAAA;YAEL,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAA;gBAAiB,aAAA;gBAAa,UAAA;gBAC7B,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iBAAA;oBACY,WAAA;oBACFA,SAAAA;oBACH,MAAC;oBACM,aAAA,CAAA;gBAAA,CAEjB;YAAA,CAAA;QAAA,CACF;IACF,CAAA,GACDjpE,CAAAA,CAAAA,GAAAA,GAAAipE,uBAAAjpE,CAAAA,CAAAA,GAAAA,GAAA+pE,GAAAA,IAAAA,MAAA/pE,CAAAA,CAAA,EAAA,CAAA;IAAAgqE,IAAAA;IAAAhqE,CAAAA,CAAA,EAAA,CAAA,KAAA4I,MAAA5I,CAAAA,CAAAsV,EAAAA,CAAAA,KAAAA,OAAAtV,CAAAA,CAAA8pE,EAAAA,CAAAA,KAAAA,OAAA9pE,CAAAA,CAAAA,GAAAA,KAAA+pE,MAAAA,CAlCHC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,EAAC,IAAW;QAAA,OAAA3gE;QAAc,KAAAC;QACxBgM,UAAAA;YAAAA;YAMAw0D;YAUCC;SAAAA;IAAAA,CAkBH,GAAO/pE,CAAAA,CAAAA,GAAAA,GAAA4I,IAAA5I,CAAAA,CAAAA,GAAAA,GAAAsV,KAAAtV,CAAAA,CAAAA,GAAAA,GAAA8pE,KAAA9pE,CAAAA,CAAAA,GAAAA,GAAA+pE,KAAA/pE,CAAAA,CAAAA,GAAAA,GAAAgqE,GAAAA,IAAAA,MAAAhqE,CAAAA,CAAA,EAAA,CAAA;IAAAiqE,IAAAA;IAAAjqE,CAAAA,CAAAA,GAAAA,KAAA2I,MAAA3I,CAAAA,CAAAyoE,EAAAA,CAAAA,KAAAA,MAAAnjE,EAAAA,IAAAtF,CAAAA,CAAA+X,EAAAA,CAAAA,KAAAA,eAAA/X,CAAAA,CAAA,EAAA,CAAA,KAAA0/C,cAAA1/C,CAAAA,CAAAA,GAAAA,KAAAgqE,MAAAA,CA7CTC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,IACI;QAAA,IAAA1jE;QACMwR,SAAU;QACV,SAAAtR;QACAi5C,SAAS;QACV,QAAA72C;QACA,WAAAM;QACI,eAAAC;QACG,iBAAAq/D,MAAKnjE,EAAAA;QAEpB0kE,UAAAA;IAoCF,CAAA,GAAOhqE,CAAAA,CAAAA,GAAAA,GAAA2I,IAAA3I,CAAAA,CAAA,EAAA,CAAA,GAAAyoE,MAAAnjE,EAAAA,EAAAtF,CAAAA,CAAAA,GAAAA,GAAA+X,aAAA/X,CAAAA,CAAAA,GAAAA,GAAA0/C,YAAA1/C,CAAAA,CAAAA,GAAAA,GAAAgqE,KAAAhqE,CAAAA,CAAAA,GAAAA,GAAAiqE,GAAAA,IAAAA,MAAAjqE,CAAAA,CAAA,EAAA,CAAA;IAAAkqE,IAAAA;IAAA,OAAAlqE,CAAAA,CAAA0I,EAAAA,CAAAA,KAAAA,MAAA1I,CAAAA,CAAAA,GAAAA,KAAA2oE,eAAA3oE,CAAAA,CAAA,EAAA,CAAA,KAAAiqE,MAAAA,CA/CTC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,IAAA;QAAW,OAAA9jE;QAAc,KAAAC;QACxB4jE,UAAAA;YAAAA;YA+CW;SAAA;IAAA,CACb,GAAOjqE,CAAAA,CAAAA,GAAAA,GAAA0I,IAAA1I,CAAAA,CAAAA,GAAAA,GAAA2oE,aAAA3oE,CAAAA,CAAAA,GAAAA,GAAAiqE,KAAAjqE,CAAAA,CAAAA,GAAAA,GAAAkqE,GAAAA,IAAAA,MAAAlqE,CAAAA,CAAA,EAAA,CAAA,EAjDPkqE;AAiDO;AAtGY,SAAAngE,QAAAu9D,MAAAA,EAAA;IAUf,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UAA8BA;QAAAA;IAAAA,GAAhBA,MAA0B;AAAA;AClGpC6C,MAAAA,oBAAqB1B,CAAAA,QAChCA,MAAMxhE,IAAAA,KAAS,WAEJmjE,iBAAkB3B,CAAAA,QAAwCA,MAAMxhE,IAAAA,KAAS;AAQtF,SAASojE,yBAAyBC,MAAAA,EAAiB;IACjD,IAAIC,kBAAuC;IAE3C,IAAA,IAAStgE,QAAQqgE,OAAO7nE,MAAAA,GAAS,GAAGwH,SAAS,GAAGA,QAAS;QACjDw+D,MAAAA,QAAQ6B,MAAAA,CAAOrgE,KAAK,CAAA;QACtBmgE,IAAAA,eAAe3B,KAAK,GAAG;YACPA,kBAAAA;YAClB;QAAA;QAEF,IAAIA,MAAMxhE,IAAAA,KAAS,aAEZ;IAAA;IAGFsjE,OAAAA;AACT;AAQO,SAASC,kBAAkBF,MAAAA,EAA8C;IAC9E,MAAM7vC,SAAsC,CAAE,CAAA;IAE9C,KAAA,MAAWguC,SAAS6B,OAAQ;QACtBF,IAAAA,eAAe3B,KAAK,GAAG;YACzBhuC,OAAOrwB,IAAAA,CAAK;gBACV,GAAGq+D,KAAAA;gBACHxhE,MAAM;gBACNN,UAAU,CAAE,CAAA;gBACZ4hE,eAAAA,aAAAA,GAAAA,IAAmBj6D,IAAI;YAAA,CACxB;YACD;QAAA;QAEE67D,IAAAA,kBAAkB1B,KAAK,GAAG;YACtB8B,MAAAA,kBAAkBF,yBAAyB5vC,MAAM;YACvD,IAAIguC,MAAMxhE,IAAAA,KAAS,eAAesjE,iBAAiBtjE,SAAS,WAAW;gBACrEmH,MAAMC,IAAAA,CAAKo6D,MAAMM,OAAO,EAAEptB,OAAAA,CAASr2C,CAAO,OAAA;oBACxBijE,gBAAAA,aAAAA,CAAc9pD,GAAAA,CAAInZ,EAAE;gBAAA,CACrC,GACDilE,gBAAgB5jE,QAAAA,CAASyD,IAAAA,CAAKq+D,MAAMnjE,EAAE,GACtCm1B,OAAOrwB,IAAAA,CAAK;oBACV,GAAGq+D,KAAAA;oBACH3uC,UAAUywC,gBAAgBjlE,EAAAA;gBAAAA,CAC3B;gBACD;YAAA;QACF;QAEE6kE,kBAAkB1B,KAAK,KACzBhuC,OAAOrwB,IAAAA,CAAKq+D,KAAK;IAAA;IAIdhuC,OAAAA;AACT;AChDa2rC,MAAAA,2BAA2B,yBAE3BqE,WAAWA,CAAC,EACvBH,MAAAA,EACAI,aAAAA,EACAC,WAAWC,aAAAA,EACXC,UAAAA,EACAnC,QAAAA,EACAoC,gBAAgB,qBAAA,EACH,KAAM;IACnB,MAAM,CAAC5hD,SAASC,UAAU,CAAA,6MAAIlZ,WAAAA,EAAS,CAAA,CAAK,GACtC,EAACvP,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAe,QAAQ,GAC7BoqE,kBAAkBH,eAAetlE,IACjC0lE,+NAAqBtlD,UAAAA,EAAQ,IAAM8kD,kBAAkBF,MAAM,GAAG;QAACA,MAAM;KAAC,GAEtE,CAACW,iBAAiBC,kBAAkB,CAAA,6MAAIj7D,WAAAA,EAAsB,MAAM;QACxE,IAAI86D,iBAAiB;YAEnB,MAAMj4D,WAAWk4D,mBAAmBv3D,IAAAA,CAAMg1D,CAAUA,QAAAA,MAAMnjE,EAAAA,KAAOylE,eAAe;YAChF,IAAIj4D,YAAYq3D,kBAAkBr3D,QAAQ,KAAKA,SAASgnB,QAAAA,EACtD,OAAWxrB,aAAAA,GAAAA,IAAAA,IAAI;gBAACwE,SAASgnB,QAAQ;aAAC;QAAA;QAGtC,OAAA,aAAA,GAAA,IAAWxrB,IAAI;IAAA,CAChB;IAEDqC,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QAEd,IAAIo6D,iBAAiB;YACnB,MAAMj4D,aAAWk4D,mBAAmBv3D,IAAAA,CAAMg1D,CAAUA,UAAAA,QAAMnjE,EAAAA,KAAOylE,eAAe;YAChF,IAAIj4D,cAAYq3D,kBAAkBr3D,UAAQ,KAAKA,WAASgnB,QAAAA,EAAU;gBAChE,MAAMA,WAAWhnB,WAASgnB,QAAAA;gBAC1BoxC,mBAAoB7+C,CAAS,SAAA;oBAC3B,IAAIA,KAAKnM,GAAAA,CAAI4Z,QAAQ,EAAUzN,CAAAA,OAAAA;oBACzBC,MAAAA,OAAO,IAAIhe,IAAI+d,IAAI;oBACpB5N,OAAAA,KAAAA,GAAAA,CAAIqb,QAAQ,GACVxN;gBAAAA,CACR;YAAA;QACH;IACF,GACC;QAAC0+C;QAAoBD,eAAe;KAAC;IAElCI,MAAAA,2NAAiBzlD,UAAAA,EAAQ,IACtBslD,mBAAmBlhE,MAAAA,CAAQ2+D,CAC5B2B,UAAAA,eAAe3B,OAAK,KAAK,CAACA,QAAM3uC,QAAAA,GAAiB,CAAA,IAE9CmxC,gBAAgB/qD,GAAAA,CAAIuoD,QAAM3uC,QAAQ,CAC1C,GACA;QAACkxC;QAAoBC,eAAe;KAAC;IAExCt6D,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QAKVw6D,eAAe1oE,MAAAA,GAAS,MAAMioE,iBAChCG,WAAW;IAEZ,GAAA;QAACM;QAAgBT;QAAeG,UAAU;KAAC;IAE9C,MAAMO,+NAAqB9lD,cAAAA,EACxBwU,CAAqB,aAAA,IACpBoxC,mBAAoB7+C,CAAS,WAAA;gBACrBC,MAAAA,SAAO,IAAIhe,IAAI+d,MAAI;gBAErBA,OAAAA,OAAKnM,GAAAA,CAAI4Z,UAAQ,IAAGxN,OAAK3N,MAAAA,CAAOmb,UAAQ,IACvCxN,OAAK7N,GAAAA,CAAIqb,UAAQ,GAEfxN;YAAAA,CACR,GACH,CAAA,CACF,GAEM++C,iBAAgB3lD,mNAAAA,EACpB,IACEqlD,kBAAkBI,eAAe9wC,SAAAA,CAAWouC,CAAAA,UAAUA,QAAMnjE,EAAAA,KAAOylE,eAAe,IAAI,CAAA,GACxF;QAACA;QAAiBI,cAAc;KAClC,GACMG,8NAAoBhmD,cAAAA,EACvBmjD,CAAqC,YAAA;QACpC,MAAM8C,gBAAgBjB,OAAO72D,IAAAA,CAAM+3D,CAAAA,KAAMA,GAAElmE,EAAAA,KAAOmjE,QAAMnjE,EAAE;QACtDimE,gBAAe7C,SAAS6C,aAAa,IAAA,CAEvChmD,QAAQzkB,KAAAA,CAAM,+BAA+B,GAC7C4nE,SAASD,OAAK,CAAA;IAAA,GAGlB;QAAC6B;QAAQ5B,QAAQ;KACnB,GAEMjpB,uNAAan6B,cAAAA,EACjB,CAACmjD,SAAO,EAAC/3B,WAAAA,EAAAA,GAIJ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,MAAA,EAAA;YACC,eAAe;YACf,YALYA,gBAAgB,IAKN,IAAI;YAC1B,cAAc;YACd,aAAay5B,kBAAkB1B,OAAK,KAAKA,QAAM3uC,QAAAA,GAAW,IAAI;YAE9D,UAAA;gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,cAAA;oBACC,OAAO2uC;oBACP,YAAYsC,oBAAoBtC,QAAMnjE,EAAAA;oBACtC,UAAUgmE;oBACV,eAAelB,eAAe3B,OAAK,IAAIA,QAAMF,aAAAA,GAAgB5+D,KAAAA;oBAC7D,aACEygE,eAAe3B,OAAK,KAAKA,QAAM9hE,QAAAA,CAASlE,MAAAA,GAAS,IAC9C,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,8BAAA;wBACC,YAAYwoE,gBAAgB/qD,GAAAA,CAAIuoD,QAAMnjE,EAAE;wBACxC,UAAU8lE,mBAAmB3C,QAAMnjE,EAAE;oBAAA,CACrC,IACA;gBAAA,CACL;gBAEForC,gBAAgBy6B,eAAe1oE,MAAAA,GAAS,KAAKioE,iBAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,0JAAkB,eAAA,EAAe,CAAA,CAAA;aAAA;QAAA,CACjF,GAGJ;QACEO;QACAE,eAAe1oE,MAAAA;QACf2oE;QACAE;QACAZ;QACAK,eAAe;KAEnB;IAEAp6D,iNAAAA,YAAAA,EAAU,IAAMwY,WAAW,CAAA,CAAI,GAAG,CAAE,CAAA,GAGlC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAACpY,QAAA;QASC,UAAU,CAACs6D,iBAAiBniD;QAC5B,WAAQ;QAEPiiD,UAAAA;YAAAA,eAAe1oE,MAAAA,KAAW,KACzB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,cAAA;gBAAa,SAAS;gBAAG,OAAO;gBAC/B,UAAA;oBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;wBAAK,MAAM;wBAAG,QAAO;wBACnB/B,UAAAA,EAAE,0CAA0C;oBAAA,CAC/C;oBACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;wBAAK,OAAK,CAAA;wBAAC,MAAM;wBACfA,UAAAA,EAAE,gDAAgD;oBACrD,CAAA;iBAAA;YAAA,CACF;YAGDyqE,eAAe1oE,MAAAA,GAAS,KACtB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,aAAA;gBAAY,WAAU;gBAAS,YAAYqoE;gBAAe,IAAI1E;gBAC7D,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,cAAA,EAAA;oBACC,oBAAmB;oBACnB,WAAW1lE,EAAE,0BAA0B;oBACvC,WAAU;oBACV,cAAc2qE;oBACd,oBAAmB;oBACnB,YAAY;oBACZ,OAAOF;oBACP,cAAcN;oBACd,yBAAyB;oBACzB,UAAU;oBACV;oBACA,YAAY,CAAA;gBAAA,CAAM;YAEtB,CAAA;SAAA;IAAA;AAIR;AAEAJ,SAASh1D,WAAAA,GAAc;AC7MhB,SAAAg2D,gBAAA;IAAAzrE,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAS,CAAAA,EAAAA,GAAYC,6KAAAA,EAAe,QAAQ;IAACL,IAAAA;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAIhCtC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAkB;QAAA,MAAA;QACjB,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,qJAAA,mBAAA,EAAA,CAAA,CAAgB;IAAA,CACnB,GAAeN,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAGVE,KAAAF,EAAE,4CAA4C,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CADlDI,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,yJAAC,gBAAA,EAAmB;QAAA,MAAC;QAAO,MAAA;QAAkB,QAAA;QAC3CJ,UACH;IAAA,CAAA,GAAeZ,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAEZO,KAAAP,EAAE,kDAAkD,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CADxD4B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA;QAAmB,MAAA;QAAQ,MAAA;QACzB5B,UAAAA;IAAAA,CACH,GAAejB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA,OAAA9C,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAA6C,KAAAA,CAVnBC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,mJAAC,OAAA,EAAA;QAAW,OAAA;QAAkB,KAAA;QAAY,SAAC;QACzCxC,UAAAA;YAAAA;YAGA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,QAAA,EAAa;gBAAA,OAAC;gBACbU,UAAAA;oBAAAA;oBAGA6B;iBAAAA;YAGF,CAAA;SAAA;IACF,CAAA,GAAO7C,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA,EAZP8C;AAYO;ACKX,MAAMiO,OAAOxP,yLAAAA,oLAAOmqE,UAAO,CAAA,CAAA;;;AAAA,CAAA,EAKdC,uBAAuB;AAE7B,SAAAC,aAAAtrE,EAAAA,EAAA;IAAAN,MAAAA,KAAAC,+LAAAA,EAAA,EAAA,GAAsB,EAAAwoE,KAAAA,EAAAn1C,IAAAA,EAAAhd,SAAAA,EAAAA,GAAAhW,IAC3B,EAAA23C,gBAAAA,EAAAlB,eAAAA,EAAAC,aAAAA,EAAA1mC,KAAAA,EAAA6vB,aAAAA,EAAAA,GAAiF7W,mBACjF,CAAAmwB,MAAAoyB,OAAA,CAAA,6MAAwB57D,WAAAA,EAAAA,CAAAA,CAAc,GACtC,CAAA67D,QAAAC,SAAA,CAAA,4MAA4B97D,YAAAA,EAAAA,IAAuC,GACnE,CAAA+7D,YAAAC,aAAA,CAAA,6MAAoCh8D,WAAAA,EAAAA,IAAiC,GAErE7H,QAAcC,gKAAAA,CAEdiiE,IAAAA,qKAAenpC,sBAAAA,EAAoBhB,eAAap2B,OAAyB,GACzEgQ,sKAAgBonB,sBAAAA,EAAoBhB,eAAazxB,QAA4B,GAC7Eg8D,gBAAsBvpC,kLAAAA,EAAoBhB,eAAaxxB,QAAgC,GACvFu9D,2KAAqB/qC,sBAAAA,EAAoBhB,eAAavxB,QAA+B,GACrFu9D,uKAAkBhrC,uBAAAA,EAAoBhB,eAAaisC,QAA4B,GAE/E,EAAA1rE,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAe,QAAQ;IAACC,IAAAA;IAAAZ,CAAAA,CAAAszB,CAAAA,CAAAA,KAAAA,QAAAtzB,CAAAA,CAAAA,EAAAA,KAAA+2C,kBAAAA,CAELn2C,KAAAA,MAAA;QACb0yB,gBAAAA,IAAI,GACpBu4C,QAAAA,CAAAA,CAAY;IACb7rE,GAAAA,CAAAA,CAAAA,EAAAA,GAAAszB,MAAAtzB,CAAAA,CAAAA,EAAAA,GAAA+2C,iBAAA/2C,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAAqsE,aAAmBzrE;IAGQI,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAA+2C,kBAAAA,CAEK/1C,KAAAA,MAAA;QACd,gBAAA,QAAQ,GACxB6qE,QAAAA,CAAAA,CAAa;IAAC,GACf7rE,CAAAA,CAAAA,EAAAA,GAAA+2C,iBAAA/2C,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAHD,MAAA0vB,cAAoB1uB;IAGCC,IAAAA;IAAAjB,CAAAA,CAAA8rE,CAAAA,CAAAA,KAAAA,UAAA9rE,CAAAA,CAAAA,EAAAA,KAAA0vB,eAAA1vB,CAAAA,CAAA,CAAA,CAAA,KAAAy5C,OAAAA,CAGnBx4C,KAAAsQ,CAAA,UAAA;QACMkoC,QAAAA,CAASloC,MAAKwF,GAAAA,KAAS,YAAYxF,MAAKwF,GAAAA,KAAS,KAAA,KAAA,CACnD2Y,YAAAA,GACAo8C,QAAMne,MAAA,CAAA;IAAA,GAET3tD,CAAAA,CAAAA,EAAAA,GAAA8rE,QAAA9rE,CAAAA,CAAAA,EAAAA,GAAA0vB,aAAA1vB,CAAAA,CAAAA,EAAAA,GAAAy5C,MAAAz5C,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA,sJAIHwiC,oBAAAA,EAV4BvhC,EAUQ;IAAC4B,IAAAA;IAAA7C,CAAAA,CAAA8rE,CAAAA,CAAAA,KAAAA,UAAA9rE,CAAAA,CAAAA,GAAAA,KAAAgsE,aAAAA,CACKnpE,KAAAA,IAAOipE;YAAAA;YAAQE,UAAU;SAAA,EAAChsE,CAAAA,CAAAA,EAAAA,GAAA8rE,QAAA9rE,CAAAA,CAAAA,GAAAA,GAAAgsE,YAAAhsE,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,uJAApEyiC,uBAAAA,EAAqBgX,QAAQ/pB,aAAa7sB,EAA0B;IAACC,IAAAA;IAAA9C,CAAAA,CAAA+2C,EAAAA,CAAAA,KAAAA,mBAAA/2C,CAAAA,CAAA,EAAA,CAAA,KAAAi4C,oBAAAj4C,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAmgC,iBAAAngC,CAAAA,CAAAA,GAAAA,KAAAoI,QAAAA,CAGnEtF,KAAAwpE,CAAA,aAAA;QAAA,IAAA;YAEI,MAAAC,CAAAA,SAAAC,KAAA,CAAA,GAAyBrsC,cAAassC,eAAAA,CAAiBH,QAAQ;YAC/Dv1B,gBAAgB,QAAQ,GACxBkB,iBAAiBs0B,SAASC,KAAK;QAAA,EAAA,OAACtoE,KAAA;YACzB2yB,MAAAA,MAAAA;YACPzuB,MAAKgC,IAAAA,CAAA;gBAAAwjB,UAAA,CAAA;gBAAA3H,aAEU4Q,IAAG31B,OAAAA;gBAAA6C,QACR;gBAAO3C,OACRV,EAAE,wCAAwC;YAAA,CAClD;QAAA;IAAC,GAELV,CAAAA,CAAAA,GAAAA,GAAA+2C,iBAAA/2C,CAAAA,CAAAA,GAAAA,GAAAi4C,kBAAAj4C,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmgC,eAAAngC,CAAAA,CAAAA,GAAAA,GAAAoI,OAAApI,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAdH,MAAA0sE,YAAkB5pE;IAgBjBoB,IAAAA;IAAAlE,CAAAA,CAAA+2C,EAAAA,CAAAA,KAAAA,mBAAA/2C,CAAAA,CAAA,EAAA,CAAA,KAAAi4C,oBAAAj4C,CAAAA,CAAAU,EAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAA,EAAA,CAAA,KAAAmgC,iBAAAngC,CAAAA,CAAAA,GAAAA,KAAAoI,QAAAA,CAGClE,KAAAyoE,CAAA,eAAA;QAAA,IAAA;YAEI,MAAAC,CAAAA,WAAAC,OAAA,CAAA,GAAyB1sC,cAAa2sC,iBAAAA,CAAmBH,UAAU;YACnE51B,gBAAgB,QAAQ,GACxBkB,iBAAiBs0B,WAASC,OAAK;QAAA,EAAA,OAACrmE,KAAA;YACzB0wB,MAAAA,QAAAA;YACPzuB,MAAKgC,IAAAA,CAAA;gBAAAwjB,UAAA,CAAA;gBAAA3H,aAEU4Q,MAAG31B,OAAAA;gBAAA6C,QACR;gBAAO3C,OACRV,EAAE,wCAAwC;YAAA,CAClD;QAAA;IAAC,GAELV,CAAAA,CAAAA,GAAAA,GAAA+2C,iBAAA/2C,CAAAA,CAAAA,GAAAA,GAAAi4C,kBAAAj4C,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmgC,eAAAngC,CAAAA,CAAAA,GAAAA,GAAAoI,OAAApI,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAdH,MAAA+sE,cAAoB7oE;IAgBnBiC,IAAAA;IAAAnG,CAAAA,CAAA+Z,EAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAAA,GAAAA,KAAAmgC,gBAAAA,CAEkCh6B,KAAAA,MAAA;QAC5B4T,WACHomB,cAAa6sC,QAAAA,CAAU;IAE1BhtE,GAAAA,CAAAA,CAAAA,GAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,GAAAA,GAAAmgC,eAAAngC,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAJD,MAAAitE,iBAAuB9mE;IAIKC,IAAAA;IAAA,KAAA;QAAA,IAGtB4wC,eAAa;YAAA3wC,IAAAA;YAAArG,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAASyD,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA,CAAgB,CAAA,GAAArG,CAAAA,CAAAA,GAAAA,GAAAqG,GAAAA,IAAAA,MAAArG,CAAAA,CAAA,EAAA,CAAA,EAAxBoG,KAAOC;YAAiBmO,MAAAA;QAAAA;QAAA,IAEvC8e,SAAS,OAAK;YAAAjtB,IAAAA;YAAArG,CAAAA,CAAAsqE,EAAAA,CAAAA,KAAAA,UAAAtqE,CAAAA,CAAA,EAAA,CAAA,KAAAitE,kBAAAjtE,CAAAA,CAAA0qE,EAAAA,CAAAA,KAAAA,iBAAA1qE,CAAAA,CAAA,EAAA,CAAA,KAAAksE,gBAAAlsE,CAAAA,CAAAA,GAAAA,KAAA0sE,YAAAA,CAEdrmE,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UACSikE;gBAAAA;gBACOI;gBACJwB,WAAW;gBACVe,YAAAA;gBACFP,UAAQ;YAClB,CAAA,GAAA1sE,CAAAA,CAAAA,GAAAA,GAAAsqE,QAAAtqE,CAAAA,CAAAA,GAAAA,GAAAitE,gBAAAjtE,CAAAA,CAAAA,GAAAA,GAAA0qE,eAAA1qE,CAAAA,CAAAA,GAAAA,GAAAksE,cAAAlsE,CAAAA,CAAAA,GAAAA,GAAA0sE,WAAA1sE,CAAAA,CAAAA,GAAAA,GAAAqG,GAAAA,IAAAA,MAAArG,CAAAA,CAAA,EAAA,CAAA,EAPJoG,KACEC;YAODmO,MAAAA;QAAAA;QAAAnO,IAAAA;QAAArG,CAAAA,CAAAsqE,EAAAA,CAAAA,KAAAA,UAAAtqE,CAAAA,CAAAA,GAAAA,KAAAksE,eAAAA,CAGoB7lE,MAAA6lE,eACnB5B,OAAMxgE,MAAAA,CAAA0hE,CAAAA,KAAeA,GAACvhE,KAAAA,GAASiiE,aAAYjiE,KAAM,IACjDqgE,QAAMtqE,CAAAA,CAAAA,GAAAA,GAAAsqE,QAAAtqE,CAAAA,CAAAA,GAAAA,GAAAksE,cAAAlsE,CAAAA,CAAAA,GAAAA,GAAAqG,GAAAA,IAAAA,MAAArG,CAAAA,CAAA,EAAA,CAAA;QAFV,MAAAmrE,iBAAuB9kE;QAEbE,IAAAA;QAAAvG,CAAAA,CAAAmrE,EAAAA,CAAAA,KAAAA,kBAAAnrE,CAAAA,CAAA,EAAA,CAAA,KAAAitE,kBAAAjtE,CAAAA,CAAA0qE,EAAAA,CAAAA,KAAAA,iBAAA1qE,CAAAA,CAAA,EAAA,CAAA,KAAA+sE,eAAA/sE,CAAAA,CAAAA,GAAAA,KAAAmsE,YAAAA,CAER5lE,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UACS4kE;YAAAA,QAAa;YACNT;YACJyB,WAAQ;YACPc,YAAAA;YACFF,UAAU;QACpB,CAAA,GAAA/sE,CAAAA,CAAAA,GAAAA,GAAAmrE,gBAAAnrE,CAAAA,CAAAA,GAAAA,GAAAitE,gBAAAjtE,CAAAA,CAAAA,GAAAA,GAAA0qE,eAAA1qE,CAAAA,CAAAA,GAAAA,GAAA+sE,aAAA/sE,CAAAA,CAAAA,GAAAA,GAAAmsE,WAAAnsE,CAAAA,CAAAA,GAAAA,GAAAuG,IAAAA,IAAAA,OAAAvG,CAAAA,CAAA,EAAA,CAAA,EAPJoG,KACEG;IAAAA;IAnBJ,MAAA+D,UAAgBlE;IAqCd,IAAA8mE,UAAA7mE;IAAA,IAAArG,CAAAA,CAAAyoE,EAAAA,CAAAA,KAAAA,SAAAzoE,CAAAA,CAAAA,GAAAA,KAAAU,GAAA;QAEF,MAAAysE,eAAA;YAAAtE,WAAA;gBAAAM,WACyB;gBAAQC,WAAa;YAAA;QAAO;QAGrD8D,WAAiBzE,QACb/nE,EAACumE,8BAAAA,CAAgCwB,MAAKxhE,IAAA,CAAA,EAAA;YAAAiC,SAC3B;YAAW2/D,WAAAzwC,IAAAA,KACAqwC,OAAKG,YAAA;YAAAuE;QAAAA,CAE1B,IACDzsE,EAAE,0BAA0B,GAEb2F,KAAAoiE,QACf/nE,EAAE,kBAAgB;YAAAmoE,WAAAzwC,IAAAA,KACIqwC,OAAKG,YAAA;YAAAuE;QAAAA,CAE1B,IACDzsE,EAAE,gCAAgC,GAACV,CAAAA,CAAAA,GAAAA,GAAAyoE,OAAAzoE,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAktE,UAAAltE,CAAAA,CAAAA,GAAAA,GAAAqG;IAAA,OAAA6mE,WAAAltE,CAAAA,CAAA,EAAA,CAAA,EAAAqG,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAEvCotE,MAAAA,cAAoB95C,SAAS,QAAQ45C,WAPlB7mE;IAOuCE,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAAgsE,aAAAA,CAGnBzlE,MAAA;QAAA,CAAAolE,oBAAA,CAAA,EAAyBK;IAAU,GAAChsE,CAAAA,CAAAA,GAAAA,GAAAgsE,YAAAhsE,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAI5D,MAAAyG,MAAAgzC,QAAQnvC,SAUAzB,MAAA4wC,OAAO,+BAA+B,6BACzCtwC,MAAAA,CAACmH,OAEFlH,MAAAqwC,OAAO/pB,cAAc28C;IAAUhjE,IAAAA;IAAArJ,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAMjCyG,MAAA;QAAAwJ,UACK;IAAA,GACX7S,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAAAsJ,IAAAA;IAAAtJ,CAAAA,CAAAotE,EAAAA,CAAAA,KAAAA,eAAAptE,CAAAA,CAAAA,GAAAA,KAAAsQ,SAAAtQ,CAAAA,CAAA,EAAA,CAAA,KAAAU,IAAAA,CAEK4I,MAAAgH,QAAQ88D,cAAc1sE,EAAE,0BAA0B,GAACV,CAAAA,CAAAA,GAAAA,GAAAotE,aAAAptE,CAAAA,CAAAA,GAAAA,GAAAsQ,OAAAtQ,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAAAgK,IAAAA;IAAAhK,CAAAA,CAAAy5C,EAAAA,CAAAA,KAAAA,QAAAz5C,CAAAA,CAAA,EAAA,CAAA,KAAA6I,OAAA7I,CAAAA,CAAAmJ,EAAAA,CAAAA,KAAAA,OAAAnJ,CAAAA,CAAA,EAAA,CAAA,KAAAoJ,OAAApJ,CAAAA,CAAAA,GAAAA,KAAAsJ,MAAAA,CAf7DU,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAY,OAAA;QACX,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2LAAA,EACc;YAAA,eAAAnB;YACH,UAAAM;YACL,MAAA;YACI,SAAAC;YACJ2iE,KAAAA;YACKtyB,UAAG;YACP,OAAA;YACQ,cAAA;YACL,SAAA;YACF,OAAApwC;YAGIgkE,WAAAA,kJAAAA,CAAAA,kBAAAA;YACL,MAAA/jE;QAEV,CAAA;IAAA,CAAA,GAAOtJ,CAAAA,CAAAA,GAAAA,GAAAy5C,MAAAz5C,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAgK,GAAAA,IAAAA,MAAAhK,CAAAA,CAAA,EAAA,CAAA;IAAA6U,IAAAA;IAAA7U,CAAAA,CAAA,EAAA,CAAA,KAAAy5C,QAAAz5C,CAAAA,CAAAsW,EAAAA,CAAAA,KAAAA,aAAAtW,CAAAA,CAAAyG,EAAAA,CAAAA,KAAAA,OAAAzG,CAAAA,CAAAA,GAAAA,KAAAgK,MAAAA,CA5BT6K,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,MAAA;QACa,eAAA;QACZ,eAAA,CAAA;QACS,SAAApO;QACD,WAAA;QACFgzC;QACKnjC;QACX,qBAAkB,CAAA;QAClB,QAAA,CAAA;QACK21D,KAAAA;QAELjiE,UAkBF;IAAA,CAAA,GAAOhK,CAAAA,CAAAA,GAAAA,GAAAy5C,MAAAz5C,CAAAA,CAAAA,GAAAA,GAAAsW,WAAAtW,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAAgK,KAAAhK,CAAAA,CAAAA,GAAAA,GAAA6U,GAAAA,IAAAA,MAAA7U,CAAAA,CAAA,EAAA,CAAA;IAAA+U,IAAAA;IAAA,OAAA/U,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAA6U,MAAAA,CA9BTE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,iBAAA,EAAoC;QAAA,qBAAAxO;QACnCsO,UA8BF;IAAA,CAAA,GAAiB7U,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAA6U,KAAA7U,CAAAA,CAAAA,GAAAA,GAAA+U,GAAAA,IAAAA,MAAA/U,CAAAA,CAAA,EAAA,CAAA,EA/BjB+U;AA+BiB;AA7Kd,SAAAq3D,SAAAkB,OAAAA,EAAA;IAAA,OAY2D1oE,QAAKunE,SAAAA;AAAA;AAZhE,SAAAv9D,SAAA2+D,OAAAA,EAAA;IAAA,OAW8D3oE,QAAKsnE,YAAAA;AAAA;AAXnE,SAAAv9D,SAAA6+D,OAAAA,EAAA;IAAA,OAU+D5oE,QAAK8lE,aAAAA;AAAA;AAVpE,SAAAh8D,SAAA++D,OAAAA,EAAA;IAAA,OASyD7oE,QAAKhB,SAAAA;AAAA;AAT9D,SAAAmG,QAAAnF,MAAAA,EAAA;IAAA,OAQwDA,OAAK0lE,MAAAA;AAAA;ACnBpE,MAAMjrC,6LAAW99B,SAAAA,0JAAO+9B,kBAAe,CAAA,CAAA;;;;;AAAA,CAAA,EAOjCqD,uLAAOphC,SAAAA,mJAAOC,MAAG,CAAA,CAAA;;;;;;;AAAA,CAAA;AAShB,SAAAksE,iBAAAptE,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,EAAA,GAA0B,EAAA0tE,WAAAA,EAAAA,GAAArtE,IAC/B,EAAAsG,UAAAA,EAAAnG,UAAAA,EAAAu2C,aAAAA,EAAA7W,aAAAA,EAAAt/B,KAAAA,EAAAA,GAAsEyoB,gBAAgB,GACtF,CAAAskD,WAAAC,YAAA,CAAA,GAAkC59D,qNAAAA,EAAAA,IAAoC,GAEtE+pB,kKAAYmH,sBAAAA,EAAoBhB,eAAap2B,OAA0B,GACvE+jE,mKAAa3sC,sBAAAA,EAAoBhB,eAAazxB,QAAuB,GACrE6hC,8KAAwBpP,sBAAAA,EAAoBhB,eAAaxxB,QAAkC,GAC3Fo/D,6KAAuB5sC,sBAAAA,EAAoBhB,eAAavxB,QAAiC,GACzFu9D,wKAAkBhrC,sBAAAA,EAAoBhB,eAAaisC,MAA4B,GAC/EryD,UAAgBg0D,mBAAmB,WACnCC,qBAAAA,CAA4Bz9B,iBAI5B,EAAA7vC,GAAAutE,UAAAA,EAAAA,+JAAwBttE,iBAAAA,EAAAnB,wBAAuC;IAAC,IAAAoB,IAAAI;IAAAhB,CAAAA,CAAA8tE,CAAAA,CAAAA,KAAAA,QAAA9tE,CAAAA,CAAA,CAAA,CAAA,KAAA4G,cAAA5G,CAAAA,CAAAguE,CAAAA,CAAAA,KAAAA,sBAAAhuE,CAAAA,CAAA,CAAA,CAAA,KAAAS,cAAAT,CAAAA,CAAAA,EAAAA,KAAAa,QAAAA,CAGvDG,KAAA;QAAA4F;QAAAnG;QAAAytE,sKAAAC,qBAAAA;QAAAC,UAIKN;QAAIE;QAAAntE;QAAAwtE,eAAA,CAAA;IAIfruE,GAAAA,CAAAA,CAAAA,EAAAA,GAAA8tE,MAAA9tE,CAAAA,CAAAA,EAAAA,GAAA4G,YAAA5G,CAAAA,CAAAA,EAAAA,GAAAguE,oBAAAhuE,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAAa,OAAAb,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAAAY,KARMI;IADT,MAAAstE,kBAAuD1tE;IAWtDK,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAiuE,aAAAA,CAOUhtE,KAAAgtE,WAAW,oBAAoB,GAACjuE,CAAAA,CAAAA,EAAAA,GAAAiuE,YAAAjuE,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,EAAAA,KAAAiB,KAAAA,CADnC4B,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAG,OAAA,CAAA;QACZ5B,UAAAA;IAAAA,CACH,GAAOjB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,CAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAAA,GAAAA,KAAAmsE,YAAAA,CAEPrpE,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,cAAkB;QAAA,MAAA;QAAeqpE,OAAAA;QAAqB,WAAA;IAAA,CAAiB,GAAAnsE,CAAAA,CAAAA,GAAAA,GAAAmsE,WAAAnsE,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAAiuE,aAAAA,CAErE/pE,KAAA+pE,WAAW,kBAAkB,GAACjuE,CAAAA,CAAAA,GAAAA,GAAAiuE,YAAAjuE,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CADjCiC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAG,OAAA,CAAA;QACZjC,UAAAA;IAAAA,CACH,GAAOlE,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAAAoG,IAAAA;IAAApG,CAAAA,CAAAA,GAAAA,KAAAg6B,MAAAA,CACP5zB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,cAAoB4zB;QAAAA,OAAE;QAAQ,MAAA;QAAgB,WAAA;IAAA,CAAe,GAAAh6B,CAAAA,CAAAA,GAAAA,GAAAg6B,KAAAh6B,CAAAA,CAAAA,GAAAA,GAAAoG,EAAAA,IAAAA,KAAApG,CAAAA,CAAA,EAAA,CAAA;IAAAqG,IAAAA;IAAArG,CAAAA,CAAA,EAAA,CAAA,KAAA6C,MAAA7C,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAAmG,EAAAA,CAAAA,KAAAA,MAAAnG,CAAAA,CAAAA,GAAAA,KAAAoG,KAAAA,CAVlEC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAa;QAAA,SAAC;QACb,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,MAAe;YAAA,UAAC;YAAiB,eAAA;YAChCxD,UAAAA;gBAAAA;gBAIAC;gBACAqD;gBAGAC;aACF;QAAA,CAAA;IACF,CAAA,GAAMpG,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAAA,GAAAA,KAAA8tE,QAAA9tE,CAAAA,CAAAsuE,EAAAA,CAAAA,KAAAA,mBAAAtuE,CAAAA,CAAA+Z,EAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAA,EAAA,CAAA,KAAAS,cAAAT,CAAAA,CAAAA,GAAAA,KAAA2tE,eAAA3tE,CAAAA,CAAA,EAAA,CAAA,KAAAg3C,gBAAAA,CAMGzwC,MAAAonE,eACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,SACOG;QAAAA;QACWQ;QACVt3B,OAAAA;QACEj9B;QACGtZ;IAEf,CAAA,GAAAT,CAAAA,CAAAA,GAAAA,GAAA8tE,MAAA9tE,CAAAA,CAAAA,GAAAA,GAAAsuE,iBAAAtuE,CAAAA,CAAAA,GAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,GAAAA,GAAAS,YAAAT,CAAAA,CAAAA,GAAAA,GAAA2tE,aAAA3tE,CAAAA,CAAAA,GAAAA,GAAAg3C,eAAAh3C,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAAA,GAAAA,KAAAuG,MAAAA,CAVLE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA44B,YAAA;QAAiB,WAAA;QAAgBwuC,KAAAA;QAChC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;YAAU,MAAC;YAAY,UAAA;YAAU,QAAA;YAC/BtnE,UAAAA;QAAAA,CASH;IACF,CAAA,GAAWvG,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAAA6I,IAAAA;IAAA7I,CAAAA,CAAA4tE,EAAAA,CAAAA,KAAAA,aAAA5tE,CAAAA,CAAAA,GAAAA,KAAAyG,MAAAA,CAdfoC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;QAAW,MAAA;QAAa,UAAA;QAAa,UAAC;QACrC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,0BAAA,EAAA;YAAiC+kE,SAAAA;YAChCnnE,UAAAA;QAaF,CAAA;IACF,CAAA,GAAOzG,CAAAA,CAAAA,GAAAA,GAAA4tE,WAAA5tE,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAA6I,GAAAA,IAAAA,MAAA7I,CAAAA,CAAA,EAAA,CAAA;IAAAmJ,IAAAA;IAAA,OAAAnJ,CAAAA,CAAA6I,EAAAA,CAAAA,KAAAA,OAAA7I,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CA/BT8C,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,OAAA,EAAA;QAAiB,eAAA;QAAgC,WAAA;QAAgB,QAAA;QAAgB,UAAA;QAChF9C,UAAAA;YAAAA;YAcAwC;SAAAA;IAiBF,CAAA,GAAO7I,CAAAA,CAAAA,GAAAA,GAAA6I,KAAA7I,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA,EAhCPmJ;AAgCO;AA9DJ,SAAAijE,OAAAkB,OAAAA,EAAA;IAAA,OAQ2D1oE,QAAKunE,SAAAA;AAAA;AARhE,SAAAv9D,SAAA2+D,OAAAA,EAAA;IAAA,OAOgE3oE,QAAKmpE,cAAAA;AAAA;AAPrE,SAAAp/D,SAAA6+D,OAAAA,EAAA;IAAA,OAMiE5oE,QAAK2rC,eAAAA;AAAA;AANtE,SAAA7hC,SAAA++D,OAAAA,EAAA;IAAA,OAKsD7oE,QAAKkpE,IAAAA;AAAA;AAL3D,SAAA/jE,QAAAnF,MAAAA,EAAA;IAAA,OAIqDA,OAAKolC,OAAAA;AAAA;AA8DjE,SAAAxhB,QAAAloB,EAAAA,EAAA;IAAAN,MAAAA,oMAAAC,EAAA,CAAA,GAAiB,EAAAa,KAAAA,EAAAgtE,IAAAA,EAAAQ,eAAAA,EAAAv0D,OAAAA,EAAAtZ,UAAAA,EAAAA,GAAAH;IAYhB,IACKQ,OAAK;QAAAF,IAAAA;QAAA,OAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACAhC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EAAY,CAAA,CAAA,GAAAZ,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAbY;IAAAA;IAAa,IAGlBmZ,SAAO;QAAAnZ,IAAAA;QAAAZ,OAAAA,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACFhC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAA,eAAA,EAAA;YAAa,UAAA,CAAA;QAAW,CAAA,GAAAZ,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAzBY;IAAAA;IAAyB,IAAA,CAG7BktE,MAAI;QAAAltE,IAAAA;QAAA,OAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACAhC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,0JAAC,YAAA,EAAY,CAAA,CAAA,GAAAZ,CAAAA,CAAAA,EAAAA,GAAAY,GAAAA,IAAAA,MAAAZ,CAAAA,CAAA,CAAA,CAAA,EAAbY;IAAAA;IAAaA,IAAAA;IAAAZ,CAAAA,CAAA8tE,CAAAA,CAAAA,KAAAA,QAAA9tE,CAAAA,CAAAA,EAAAA,KAAAS,aAAAA,CAKlBG,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,yJAAA,cAAA,EAAiBktE;QAAAA;QAAkBrtE;IAAc,CAAA,GAAAT,CAAAA,CAAAA,EAAAA,GAAA8tE,MAAA9tE,CAAAA,CAAAA,EAAAA,GAAAS,YAAAT,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAA,OAAAhB,CAAAA,CAAAsuE,CAAAA,CAAAA,KAAAA,mBAAAtuE,CAAAA,CAAAA,EAAAA,KAAAY,KAAAA,CADpDI,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,gJAAA,wBAAA,CAAA,QAAA,EAAA;QAAuCstE,OAAAA;QACrC1tE,UAAAA;IACF,CAAA,GAAiCZ,CAAAA,CAAAA,EAAAA,GAAAsuE,iBAAAtuE,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAFjCgB;AAEiC;AC1HrC,MAAMq+B,2LAAW99B,SAAAA,0JAAO+9B,kBAAe,CAAA,CAAA;;;;;AAAA,CAAA;AAOhC,SAAAivC,gBAAAjuE,EAAAA,EAAA;IAAAN,MAAAA,gMAAAC,IAAAA,EAAA,EAAA,GAAyB,EAAAuuE,QAAAA,EAAAA,GAAAluE,IAC9B,EAAA02C,aAAAA,EAAAD,eAAAA,EAAAkB,gBAAAA,EAAA9X,aAAAA,EAA0E7W,GAAAA,gBAAAA,GAC1E,CAAAskD,WAAAC,YAAA,CAAA,GAAkC59D,qNAAAA,EAAAA,IAAoC,GACtE,CAAAw+D,YAAAC,aAAA,CAAA,GAAoCz+D,qNAAAA,EAAAA,CAAU;IAACrP,IAAAA;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAA2C,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEZhC,KAAAkc,CAAA,OAAA;QAMnBA,cAAAA,IAAEypD,eAAiBzpD,GAAEypD,YAAAA,GAAiB,IAAA,CAAI,GACxDsH,aAAa/wD,EAAE;IAAA,GAChB9c,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IARD2uE,MAAAA,iBAAuB/tE,IAUvB0pE,UAAenpC,iLAAAA,EAAoBhB,eAAap2B,KAAyB,GACzEmiE,2KAAqB/qC,sBAAAA,EAAoBhB,eAAazxB,MAA+B,GACrFg8D,4KAAsBvpC,sBAAAA,EAAoBhB,eAAaxxB,MAAgC,GACvFoL,sKAAgBonB,sBAAAA,EAAoBhB,eAAavxB,MAA4B,GAE7E,EAAAlO,CAAAA,EAAYC,+JAAAA,iBAAAA,EAAe,QAAQ,GACnCyH,6JAAcC,WAAAA,CAAS;IAACrH,IAAAA;IAAAhB,CAAAA,CAAA+2C,CAAAA,CAAAA,KAAAA,mBAAA/2C,CAAAA,CAAA,CAAA,CAAA,KAAAi4C,oBAAAj4C,CAAAA,CAAAU,CAAAA,CAAAA,KAAAA,KAAAV,CAAAA,CAAA,CAAA,CAAA,KAAAmgC,iBAAAngC,CAAAA,CAAAA,EAAAA,KAAAoI,QAAAA,CAEtBpH,KAAAsrE,CAAA,aAAA;QAAA,IAAA;YAEI,MAAAC,CAAAA,SAAAC,KAAA,CAAA,GAAyBrsC,cAAassC,eAAAA,CAAiBH,QAAQ;YAC/Dv1B,gBAAgB,QAAQ,GACxBkB,iBAAiBs0B,SAASC,KAAK;QAAA,EAAA,OAACvrE,KAAA;YACzB41B,MAAAA,MAAAA;YACPzuB,MAAKgC,IAAAA,CAAA;gBAAAwjB,UAAA,CAAA;gBAAA3H,aAEU4Q,IAAG31B,OAAAA;gBAAA6C,QACR;gBAAO3C,OACRV,EAAE,wCAAwC;YAAA,CAClD;QAAA;IAAC,GAELV,CAAAA,CAAAA,EAAAA,GAAA+2C,iBAAA/2C,CAAAA,CAAAA,EAAAA,GAAAi4C,kBAAAj4C,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAmgC,eAAAngC,CAAAA,CAAAA,EAAAA,GAAAoI,OAAApI,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAdH,MAAA0sE,YAAkB1rE;IAgBjBC,IAAAA;IAAAjB,CAAAA,CAAA+Z,CAAAA,CAAAA,KAAAA,WAAA/Z,CAAAA,CAAAA,EAAAA,KAAAmgC,gBAAAA,CAEkCl/B,KAAAA,MAAA;QAE5B8Y,WACHomB,cAAa6sC,QAAAA,CAAU;IAE1BhtE,GAAAA,CAAAA,CAAAA,EAAAA,GAAA+Z,SAAA/Z,CAAAA,CAAAA,EAAAA,GAAAmgC,eAAAngC,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IALD,MAAAitE,iBAAuBhsE;IAKK4B,IAAAA;IAAA,OAAA7C,CAAAA,CAAA,EAAA,CAAA,KAAAsqE,UAAAtqE,CAAAA,CAAAitE,EAAAA,CAAAA,KAAAA,kBAAAjtE,CAAAA,CAAAA,GAAAA,KAAA0qE,iBAAA1qE,CAAAA,CAAA,EAAA,CAAA,KAAAyuE,cAAAzuE,CAAAA,CAAAksE,EAAAA,CAAAA,KAAAA,gBAAAlsE,CAAAA,CAAA4tE,EAAAA,CAAAA,KAAAA,aAAA5tE,CAAAA,CAAA,EAAA,CAAA,KAAA0sE,aAAA1sE,CAAAA,CAAAwuE,EAAAA,CAAAA,KAAAA,YAAAxuE,CAAAA,CAAAA,GAAAA,KAAAg3C,gBAAAA,CAG1Bn0C,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAiB;QAAA,eAAA;QAAgC,WAAA;QAAgB,QAAA;QAChE,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;YAAW,MAAC;YAAW,SAAC;YAAc,YAAA;YACpCm0C,UACC,gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAa,CAAA,CAAA,IAEb,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,0BAAA,EAAA;gBAAiC42B,SAAAA;gBAChC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,UAAA;oBAAiB,WAAA;oBAAgBe,KAAAA;oBAC/BF,UAAAA,cAEDD,WACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,UACSlE;wBAAAA;wBACOI;wBACJwB,WAAAA;wBACCe,YAAa;wBACfP,UAAQ;wBACH,eAAG+B,GAAAA,UAAU,CAAA,EAAA,CAAA;oBAC5B,CAAA,IAAA;gBAEN,CAAA;YACF,CAAA;QAEJ,CAAA;IACF,CAAA,GAAOzuE,CAAAA,CAAAA,GAAAA,GAAAsqE,QAAAtqE,CAAAA,CAAAA,GAAAA,GAAAitE,gBAAAjtE,CAAAA,CAAAA,GAAAA,GAAA0qE,eAAA1qE,CAAAA,CAAAA,GAAAA,GAAAyuE,YAAAzuE,CAAAA,CAAAA,GAAAA,GAAAksE,cAAAlsE,CAAAA,CAAAA,GAAAA,GAAA4tE,WAAA5tE,CAAAA,CAAAA,GAAAA,GAAA0sE,WAAA1sE,CAAAA,CAAAA,GAAAA,GAAAwuE,UAAAxuE,CAAAA,CAAAA,GAAAA,GAAAg3C,eAAAh3C,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA,EAvBP6C;AAuBO;AAvEJ,SAAA+L,OAAA2+D,OAAAA,EAAA;IAAA,OAkByD3oE,QAAKhB,SAAAA;AAAA;AAlB9D,SAAA+K,OAAA6+D,OAAAA,EAAA;IAAA,OAiB+D5oE,QAAK8lE,aAAAA;AAAA;AAjBpE,SAAAh8D,OAAA++D,OAAAA,EAAA;IAAA,OAgB8D7oE,QAAKsnE,YAAAA;AAAA;AAhBnE,SAAAniE,MAAAnF,MAAAA,EAAA;IAAA,OAewDA,OAAK0lE,MAAAA;AAAA;ACnBpE,MAAMsE,6LAAartE,SAAAA,mJAAOa,OAAI,CAAA,CAAA;;;;;;AAAA,CAAA,EAOxBysE,OAAO;IAAC;IAAW,QAAQ;CAAA,EAC3BC,aAAcC,CAAAA,MAAAA,wDAAAA;IAElBA,OAAOF,KAAKrhD,QAAAA,CAASuhD,GAAG;AAEnB,SAAAC,YAAAjvE,KAAAA,EAAA;IAAAC,MAAAA,IAAAC,gMAAAA,EAAA,EAAA,GACL,EAAAsF,MAAAA,EAAAykB,SAAAA,EAAA,GAA4B9iB,iBAC5B,EAAAxG,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAAnB,wBAAuC,GACnDyvE,UAAgB1pE,QAAMglB,YAAAoB,wBAEtBujD,gBAAsBJ,WAAWvpE,QAAM6uC,mBAAqB,IACxD7uC,OAAM6uC,mBAAAA,GAAAy6B,IAAAA,CACC,CAAA,CAAA;IAAAvuE,IAAAA;IAAAN,CAAAA,CAAAuF,CAAAA,CAAAA,KAAAA,UAAAvF,CAAAA,CAAAA,EAAAA,KAAAgqB,YAAAA,CACc1pB,KAAAyuE,CAAAA,MACvB/kD,UAAS;YAAA,GACJzkB,MAAAA;YAAM6uC,qBACY26B;QAAAA,CACtB,GAAC/uE,CAAAA,CAAAA,EAAAA,GAAAuF,QAAAvF,CAAAA,CAAAA,EAAAA,GAAAgqB,WAAAhqB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAJJ,MAAAmvE,mBAAyB7uE,IAO8CM,KAAAquE,UAAU,KAAEtlE,KAAAA;IAAY3I,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAM9EM,KAAAN,EAAE,qBAAqB,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAmvE,mBAAAA,CACtBluE,KAAAA,IAAMkuE,iBAAiB,SAAS,GAACnvE,CAAAA,CAAAA,EAAAA,GAAAmvE,kBAAAnvE,CAAAA,CAAAA,EAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,CAAA,CAAA;IAChC,MAAA6C,KAAAqsE,kBAAkB;IAASpsE,IAAAA;IAAA9C,CAAAA,CAAAgB,CAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,EAAAA,KAAAiB,MAAAjB,CAAAA,CAAA,CAAA,CAAA,KAAA6C,KAAAA,CALvCC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,MAAA,EACe;QAAA,iBAAA;QACX,IAAA;QACI,OAAA9B;QACE,SAAAC;QACC,UAAA4B;IACV,CAAA,GAAA7C,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,EAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAIOwD,KAAAxD,EAAE,4BAA4B,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAAnG,CAAAA,CAAAA,GAAAA,KAAAmvE,mBAAAA,CAC7BhpE,KAAAA,IAAMgpE,iBAAiB,QAAQ,GAACnvE,CAAAA,CAAAA,GAAAA,GAAAmvE,kBAAAnvE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA;IAC/B,MAAAoG,KAAA8oE,kBAAkB;IAAQ7oE,IAAAA;IAAArG,CAAAA,CAAAkE,EAAAA,CAAAA,KAAAA,MAAAlE,CAAAA,CAAAA,GAAAA,KAAAmG,MAAAnG,CAAAA,CAAA,EAAA,CAAA,KAAAoG,KAAAA,CALtCC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,MAAA,EACe;QAAA,iBAAA;QACX,IAAA;QACI,OAAAnC;QACE,SAAAiC;QACC,UAAAC;IACV,CAAA,GAAApG,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,IAAAnG,CAAAA,CAAAA,GAAAA,GAAAoG,IAAApG,CAAAA,CAAAA,GAAAA,GAAAqG,EAAAA,IAAAA,KAAArG,CAAAA,CAAA,EAAA,CAAA;IAAAuG,IAAAA;IAAAvG,CAAAA,CAAA8C,EAAAA,CAAAA,KAAAA,MAAA9C,CAAAA,CAAAA,GAAAA,KAAAqG,KAAAA,CAdJE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,UAAA,EAAA;QAAe,OAAA;QAAS,MAAA;QACvBzD,UAAAA;YAAAA;YAOAuD;SAAAA;IAOF,CAAA,GAAUrG,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAqG,IAAArG,CAAAA,CAAAA,GAAAA,GAAAuG,GAAAA,IAAAA,MAAAvG,CAAAA,CAAA,EAAA,CAAA;IAAAyG,IAAAA;IAAAzG,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CAGM+F,MAAA/F,EAAE,4BAA4B,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAyG,GAAAA,IAAAA,MAAAzG,CAAAA,CAAA,EAAA,CAAA;IAGlC,MAAA6I,MAAA9I,MAAKyuB,OAAAA;IAAQrlB,IAAAA;IAAAnJ,CAAAA,CAAAA,GAAAA,KAAAU,IAAAA,CACEyI,MAAAzI,EAAE,yCAAyC,GAACV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAAA,GAAAA,GAAAmJ,GAAAA,IAAAA,MAAAnJ,CAAAA,CAAA,EAAA,CAAA;IAAAoJ,IAAAA;IAAApJ,CAAAA,CAAAA,GAAAA,KAAAmJ,MAAAA,CAAtDC,MAAA;QAAAkB,SAAUnB;IAA4C,GAACnJ,CAAAA,CAAAA,GAAAA,GAAAmJ,KAAAnJ,CAAAA,CAAAA,GAAAA,GAAAoJ,GAAAA,IAAAA,MAAApJ,CAAAA,CAAA,EAAA,CAAA;IAAAqJ,IAAAA;IAAArJ,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAyuB,OAAAA,IAAAxuB,CAAAA,CAAA,EAAA,CAAA,KAAAyG,OAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAAoJ,MAAAA,CANzEC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAS,MAAA;QACR,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,SAAA,EACa;YAAA,cAAA5C;YACNgoB,yJAAAA,YAAAA;YACD,MAAA;YACI,SAAA5lB;YACK,cAAAO;QAAAA,CAElB;IAAA,CAAA,GAAMpJ,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyuB,OAAAA,EAAAxuB,CAAAA,CAAAA,GAAAA,GAAAyG,KAAAzG,CAAAA,CAAAA,GAAAA,GAAAoJ,KAAApJ,CAAAA,CAAAA,GAAAA,GAAAqJ,GAAAA,IAAAA,MAAArJ,CAAAA,CAAA,EAAA,CAAA;IAAAsJ,IAAAA;IAAAtJ,CAAAA,CAAAuG,EAAAA,CAAAA,KAAAA,OAAAvG,CAAAA,CAAAA,GAAAA,KAAAqJ,MAAAA,CAzBRC,MAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;QAAW,OAAA;QAAkB,SAAC;QAAO,KAAA;QACpC/C,UAAAA;YAAAA;YAgBA8C;SAAAA;IASF,CAAA,GAAOrJ,CAAAA,CAAAA,GAAAA,GAAAuG,KAAAvG,CAAAA,CAAAA,GAAAA,GAAAqJ,KAAArJ,CAAAA,CAAAA,GAAAA,GAAAsJ,GAAAA,IAAAA,MAAAtJ,CAAAA,CAAA,EAAA,CAAA;IAKG,MAAAgK,MAAAklE,kBAAkB,WAGCr6D,MAAAq6D,kBAAkB;IAASn6D,IAAAA;IAAA/U,CAAAA,CAAAA,GAAAA,KAAA6U,MAAAA,CAAtDE,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,iBAAA;QAA0B,UAAAF;IAA+B,CAAA,GAAA7U,CAAAA,CAAAA,GAAAA,GAAA6U,KAAA7U,CAAAA,CAAAA,GAAAA,GAAA+U,GAAAA,IAAAA,MAAA/U,CAAAA,CAAA,EAAA,CAAA;IAAAgV,IAAAA;IAAAhV,CAAAA,CAAAgK,EAAAA,CAAAA,KAAAA,OAAAhK,CAAAA,CAAAA,GAAAA,KAAA+U,MAAAA,CAN5DC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,mJAAC,WAAA,EACiB;QAAA,mBAAA;QACT,QAAA;QACC,QAAAhL;QACL,IAAA;QAEH+K,UAAAA;IAAAA,CACF,GAAW/U,CAAAA,CAAAA,GAAAA,GAAAgK,KAAAhK,CAAAA,CAAAA,GAAAA,GAAA+U,KAAA/U,CAAAA,CAAAA,GAAAA,GAAAgV,GAAAA,IAAAA,MAAAhV,CAAAA,CAAA,EAAA,CAAA;IAID,MAAAiV,MAAAi6D,kBAAkB,UAIKh6D,MAAAg6D,kBAAkB;IAAQ/5D,IAAAA;IAAAnV,CAAAA,CAAAA,GAAAA,KAAAkV,MAAAA,CAAzDC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,kBAAA;QAA8B,aAAAD;IAA8B,CAAA,GAAAlV,CAAAA,CAAAA,GAAAA,GAAAkV,KAAAlV,CAAAA,CAAAA,GAAAA,GAAAmV,GAAAA,IAAAA,MAAAnV,CAAAA,CAAA,EAAA,CAAA;IAAAoV,IAAAA;IAAApV,CAAAA,CAAAiV,EAAAA,CAAAA,KAAAA,OAAAjV,CAAAA,CAAAA,GAAAA,KAAAmV,MAAAA,CAN/DC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,4JAAA,EACiB;QAAA,mBAAA;QACR,QAAAH;QACL,IAAA;QACI,QAAA;QAEPE,UAAAA;IAAAA,CACF,GAAWnV,CAAAA,CAAAA,GAAAA,GAAAiV,KAAAjV,CAAAA,CAAAA,GAAAA,GAAAmV,KAAAnV,CAAAA,CAAAA,GAAAA,GAAAoV,GAAAA,IAAAA,MAAApV,CAAAA,CAAA,EAAA,CAAA;IAAAqV,IAAAA;IAAArV,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAAY,MAAAZ,CAAAA,CAAAsJ,EAAAA,CAAAA,KAAAA,OAAAtJ,CAAAA,CAAAgV,EAAAA,CAAAA,KAAAA,OAAAhV,CAAAA,CAAAA,GAAAA,KAAAoV,MAAAA,CA7CbC,MAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,YAAqB;QAAA,WAAA;QAAkB,SAAC;QAAS,QAAA;QAAmB,cAAAzU;QACnE0I,UAAAA;YAAAA;YA4BA0L;YASAI;SAQF;IAAA,CAAA,GAAapV,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAsJ,KAAAtJ,CAAAA,CAAAA,GAAAA,GAAAgV,KAAAhV,CAAAA,CAAAA,GAAAA,GAAAoV,KAAApV,CAAAA,CAAAA,GAAAA,GAAAqV,GAAAA,IAAAA,MAAArV,CAAAA,CAAA,EAAA,CAAA,EA9CbqV;AA8Ca;AC9EV,MAAM+5D,mBAAsC;IACjD1nE,MAAMikB;IACNa,aAAaA,MAAM;QACX,MAAA,EAACiD,QAAAA,EAAQ,GAAIvE,oBACb,EAACxqB,CAAAA,EAAAA,GAAKC,6KAAAA,CAAe;QAEpB,OAAA;YACL+T,QAAQ,CAAC+a,SAASupB,aAAAA;YAClBh2C,yJAAMksC,cAAAA;YACN9tC,OAAOV,EAAE,eAAe;QAC1B;IACF;IACAivB,WAAWq/C;IACXxgD,SAASA,CAAC,EAACjpB,MAAAA,EAAAA,GAAAA,CAAa;YACtBA,QAAQ;gBAAC,GAAGA,MAAAA;gBAAQ6xC,OAAOztC,KAAAA;gBAAWqwB,KAAKrwB,KAAAA;gBAAWyqC,qBAAqBzqC,KAAAA;YAAAA;QAAS,CAAA;IAEtFkvC,QAAQA,CAAC,EAACtzC,MAAAA,EAAAA,GAAAA,CAAa;YAACA,QAAQ;gBAAC,GAAGA,MAAAA;gBAAQ6xC,OAAO;YAAA;QAAiB,CAAA;AACtE;ACnBO,SAASi4B,cAAczwD,OAAAA,EAIY;IAClC,MAAA,EAAC7B,IAAAA,EAAMtc,UAAAA,EAAYI,KAAAA,EAAAA,GAAS+d,SAC5B6b,SAAgD,CAAE,CAAA;IAEpDgK,IAAAA,IAAIhkC,YACJ4jB,IAAaxjB;IAEjB,KAAA,MAAWqgD,WAAWnkC,KAAM;QAEtB,IAAA,OAAOmkC,WAAY,UAAU;YAC/B,IAAI,CAAC/9C,uKAAAA,EAASkhB,CAAC,KAAKA,MAAM1a,KAAAA,GACxB,MAAM,IAAI3E,MAAM,CAAA,yDAAA,EAA4Dk8C,OAAO,EAAE;YAGvF,IAAIzc,EAAEoc,QAAAA,KAAa,UACjB,MAAM,IAAI77C,MACR,CAAA,oEAAA,EAAuEk8C,OAAO,EAChF;YAGF78B,IAAIA,GAAAA,CAAI68B,OAAO,CAAA;YAEf,MAAMhD,QAAQzZ,EAAEod,MAAAA,CAAOpuC,IAAAA,CAAM67D,CAAMA,IAAAA,EAAE5nE,IAAAA,KAASw5C,OAAO;YAErD,IAAI,CAAChD,OACHzjB,OAAAA,OAAOrwB,IAAAA,CAAK;gBAAC1C,MAAMw5C;YAAQ,CAAA,GACpBzmB;YAGTgK,IAAIyZ,MAAMj3C,IAAAA,EAEVwzB,OAAOrwB,IAAAA,CAAKq6B,CAAC;YAEb;QAAA;QAIE,IAAA,OAAOyc,WAAY,UAAU;YAC/B,IAAI,6JAAC58B,UAAAA,EAAQD,CAAC,KAAKA,MAAM1a,KAAAA,GACvB,MAAM,IAAI3E,MAAM,CAAA,wDAAA,EAA2Dk8C,OAAO,CAAA,CAAA,CAAG;YAGvF,IAAIzc,EAAEoc,QAAAA,KAAa,SACjB,MAAM,IAAI77C,MACR,CAAA,mEAAA,EAAsEk8C,OAAO,CAAA,CAAA,CAC/E;YAGF78B,IAAIA,GAAAA,CAAI68B,OAAO,CAAA;YAEf,MAAMquB,WAAW9qC,EAAE33B,EAAAA,CAAG2G,IAAAA,CAAMquC,CACtB,SAAA,OAAOz9B,KAAM,WACRy9B,OAAOjB,QAAAA,KAAa,WAGzB,OAAOx8B,KAAM,WACRy9B,OAAOjB,QAAAA,KAAa,WAGzB,OAAOx8B,KAAM,YACRy9B,OAAOjB,QAAAA,KAAa,wKAGzB19C,WAAAA,EAASkhB,CAAC,IACLy9B,OAAOp6C,IAAAA,KAAS2c,GAAG9jB,QAGrB,CAAA,CACR;YAED,IAAI,CAACgvE,UACH,MAAM,IAAIvqE,MAAM,CAAA,sBAAA,EAAyBk8C,OAAO,CAAA,CAAA,CAAG;YAGjDquB,IAAAA,UAEJ90C,OAAOrwB,IAAAA,CAAKq6B,CAAC;YAEb;QAAA;QAIF,KAAIthC,sKAAAA,EAAS+9C,OAAO,KAAKA,QAAQsuB,IAAAA,EAAM;YACjC,IAAA,EAAClrD,qKAAAA,EAAQD,CAAC,GACZ,MAAM,IAAIrf,MACR,CAAA,gEAAA,EAAmEk8C,OAAO,CAAA,CAAA,CAC5E;YAGF,IAAIzc,EAAEoc,QAAAA,KAAa,SACjB,MAAM,IAAI77C,MACR,CAAA,mEAAA,EAAsEk8C,OAAO,EAC/E;YAOF,IAFA78B,IAAAA,CAFeA,KAAK,CAET5Q,CAAAA,EAAAA,IAAAA,CAAMqK,CAAAA,gKAAM3a,WAAAA,EAAS2a,CAAC,KAAKA,EAAE0xD,IAAAA,KAAStuB,QAAQsuB,IAAI,GAEzD,KAACrsE,mKAAAA,EAASkhB,CAAC,GACb,MAAM,IAAIrf,MAAM,CAAA,+BAAA,EAAkCk8C,QAAQsuB,IAAI,CAAA,CAAA,CAAG;YAG7D1tB,MAAAA,SAASrd,EAAE33B,EAAAA,CAAG2G,IAAAA,CAAMqK,CAAAA,QAAM3a,mKAAAA,EAASkhB,CAAC,KAAKvG,EAAEpW,IAAAA,KAAS2c,GAAG9jB,KAAK;YAElE,IAAI,CAACuhD,QACH,MAAM,IAAI98C,MAAM,CAAA,4BAAA,EAA+Bqf,GAAG9jB,KAAK,EAAE;YAGvDuhD,IAAAA,QAEJrnB,OAAOrwB,IAAAA,CAAKq6B,CAAC;YAEb;QAAA;QAGF,MAAM,IAAIz/B,MAAM,CAAA,sBAAA,EAAyB4f,KAAKC,SAAAA,CAAUq8B,OAAO,CAAC,EAAE;IAAA;IAG7DzmB,OAAAA;AACT;AC3GA,MAAMg1C,cAAmE;IACvE3uE,0JAAO6zB,mBAAAA;IACP0X,4JAASnR,qBAAAA;IACTg1B,yJAAMwf,kBAAAA;AACR,GAEMC,cAA8D;IAClE7uE,OAAO;IACPurC,SAAS;IACT6jB,MAAM;AACR;AAEO,SAAA0f,oBAAA7vE,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GACL,EAAAuuB,OAAAA,EAAAA,GAAkBzuB,OAClB,EAAAg9B,OAAAA,EAAAlT,UAAAA,EAAAppB,UAAAA,EAAAo8B,UAAAA,EAAAh8B,KAAAA,EAAA,GAA6DyoB,mBAC7D,EAAA5oB,CAAAA,EAAAA,+JAAYC,iBAAAA,EAAe,YAAY;IAACL,IAAAA;IAAAN,CAAAA,CAAA+8B,CAAAA,CAAAA,KAAAA,WAAA/8B,CAAAA,CAAAA,EAAAA,KAAA6pB,aAAAA,CAGtCvpB,KAAAyc,CAAA,SAAA;QACaA,WAAAA,IAAI,GACfggB,QAAQhgB,IAAI;IACb/c,GAAAA,CAAAA,CAAAA,EAAAA,GAAA+8B,SAAA/8B,CAAAA,CAAAA,EAAAA,GAAA6pB,YAAA7pB,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAJH,MAAAqsE,aAAmB/rE;IAMlBM,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAMuBE,KAAAF,EAAE,+BAA+B,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAAA,EAAAA,KAAAU,IAAAA,CAG7CM,KAAAN,EAAE,aAAa,GAACV,CAAAA,CAAAA,EAAAA,GAAAU,GAAAV,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAwuB,CAAAA,CAAAA,KAAAA,WAAAxuB,CAAAA,CAAAA,EAAAA,KAAAY,MAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAgB,KAAAA,CALzBC,KAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,yBAAA;QACI,IAAA;QACe,kBAAAL;QACb,MAAA;QACI4tB;QACF,OAAAxtB;IACP,CAAA,GAAAhB,CAAAA,CAAAA,EAAAA,GAAAwuB,SAAAxuB,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAA6C,IAAAA;IAAA7C,CAAAA,CAAAA,GAAAA,KAAAU,KAAAV,CAAAA,CAAA68B,EAAAA,CAAAA,KAAAA,WAAAp6B,MAAAA,GAAAA,CAGCI,KAAAg6B,WAAUp6B,MAAAA,KAAAA,KACR,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,MAAA,EAAA;QAAa,SAAA;QACZ,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAA;YAAK,OAAA,CAAA;YAAY,MAAA;YACf/B,UAAAA,EAAE,yBAAyB;QAAA,CAC9B;IAAA,CACF,GACDV,CAAAA,CAAAA,GAAAA,GAAAU,GAAAV,CAAAA,CAAA,EAAA,CAAA,GAAA68B,WAAAp6B,MAAAA,EAAAzC,CAAAA,CAAAA,GAAAA,GAAA6C,EAAAA,IAAAA,KAAA7C,CAAAA,CAAA,EAAA,CAAA;IAAA8C,IAAAA;IAAA9C,CAAAA,CAAA,EAAA,CAAA,KAAAqsE,cAAArsE,CAAAA,CAAAS,EAAAA,CAAAA,KAAAA,cAAAT,CAAAA,CAAA68B,EAAAA,CAAAA,KAAAA,cAAA78B,CAAAA,CAAAA,GAAAA,KAAAa,QAAAA,CAEAiC,KAAA+5B,WAAUp6B,MAAAA,GAAA,KACR,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,QAAA,EAAA;QAAa,OAAA;QACXo6B,UAAUrzB,WAAAA,GAAAA,CAAAqmE,CAAAA,QAAA/xD,IACR,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,gBAAA;gBAGS+xD;gBACAxD,QAAAA;gBACI5rE;gBACLI;YAJF,GAAA,CAMR,CAAA;IACH,CAAA,GACDb,CAAAA,CAAAA,GAAAA,GAAAqsE,YAAArsE,CAAAA,CAAAA,GAAAA,GAAAS,YAAAT,CAAAA,CAAAA,GAAAA,GAAA68B,YAAA78B,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAA8C,EAAAA,IAAAA,KAAA9C,CAAAA,CAAA,EAAA,CAAA;IAAAkE,IAAAA;IAAAlE,CAAAA,CAAA6C,EAAAA,CAAAA,KAAAA,MAAA7C,CAAAA,CAAAA,GAAAA,KAAA8C,KAAAA,CAtBHoB,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,wJAAA,EAAA;QAAW,MAAC;QAAW,UAAA;QAAgB,SAAA;QACrCrB,UAAAA;YAAAA;YAQAC;SAAAA;IAcH,CAAA,GAAO9C,CAAAA,CAAAA,GAAAA,GAAA6C,IAAA7C,CAAAA,CAAAA,GAAAA,GAAA8C,IAAA9C,CAAAA,CAAAA,GAAAA,GAAAkE,EAAAA,IAAAA,KAAAlE,CAAAA,CAAA,EAAA,CAAA;IAAAmG,IAAAA;IAAA,OAAAnG,CAAAA,CAAAiB,EAAAA,CAAAA,KAAAA,MAAAjB,CAAAA,CAAAA,GAAAA,KAAAkE,KAAAA,CAhCTiC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAA;QAAe,WAAA;QAAgB,QAAA;QAAgB,UAAA;QAC9ClF,UAAAA;YAAAA;YAQAiD;SAAAA;IAwBF,CAAA,GAAOlE,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAkE,IAAAlE,CAAAA,CAAAA,GAAAA,GAAAmG,EAAAA,IAAAA,KAAAnG,CAAAA,CAAA,EAAA,CAAA,EAjCPmG;AAiCO;AAIX,SAAA2pE,eAAA/vE,KAAAA,EAAA;IAAAC,MAAAA,oMAAAC,EAAA,EAAA,GAME,EAAA4vE,MAAAA,EAAAh3B,MAAAA,EAAAp4C,UAAAA,EAAAI,KAAAA,EAAAA,GAA4Cd;IAAKO,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAA6vE,OAAA9yD,IAAAA,IAAA/c,CAAAA,CAAAA,EAAAA,KAAA64C,SAAAA,CAClBv4C,KAAAA,IAAMu4C,OAAOg3B,OAAM9yD,IAAK,GAAC/c,CAAAA,CAAA,CAAA,CAAA,GAAA6vE,OAAA9yD,IAAAA,EAAA/c,CAAAA,CAAAA,EAAAA,GAAA64C,QAAA74C,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAxD,MAAAqsE,aAAmB/rE,IACnB,CAAAyvE,WAAAC,YAAA,CAAA,6MAAkC//D,WAAAA,EAAAA,IAAqD;IAACrP,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAA+vE,YAAAA,CAInFnvE,KAAAmvE,aACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAc;QAAA,SAAC;QAAU,QAAA;QAAQ,MAAA;QAChC,UAAC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAA,OAAA,EAAA;YAAW,MAAC;YAAGA,UAASjvE,UAAAA,KAAAA,CAAAI,OAAAA;QAAe,CAAA;IAC1C,CAAA,GACDlB,CAAAA,CAAAA,EAAAA,GAAA+vE,WAAA/vE,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAA+vE,aAAA/vE,CAAAA,CAAAqsE,CAAAA,CAAAA,KAAAA,cAAArsE,CAAAA,CAAA6vE,CAAAA,CAAAA,KAAAA,OAAAI,KAAAA,IAAAjwE,CAAAA,CAAA,CAAA,CAAA,KAAA6vE,OAAA3uE,OAAAA,IAAAlB,CAAAA,CAAA,CAAA,CAAA,KAAA6vE,OAAA9yD,IAAAA,IAAA/c,CAAAA,CAAAS,EAAAA,CAAAA,KAAAA,cAAAT,CAAAA,CAAAA,GAAAA,KAAAa,QAAAA,CAEAG,KAAC+uE,CAAAA,aACA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,kJAAC,QAAA,EACC;QAAA,sBAAA,CAAA;QACG,IAAA;QACM1D,SAAAA;QACA,SAAA;QACD,QAAA;QACF,MAAAsD,WAAAA,CAAYE,OAAMI,KAAA,CAAA;QAExB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAC,OAAA,EAAW;YAAA,OAAA;YAAkB,KAAA;YAC5B,UAAA;gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,MAAA,EAAS;oBAAA,MAAA;oBACR,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAAC,OAAA,EAAW;wBAAA,MAAA;wBAAIrgD,oNAAAA,gBAAAA,EAAA6/C,WAAAA,CAA0BI,OAAMI,KAAA,CAAO;oBAAE,CAAA;gBAAA,CAC3D;gBAEC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,mJAAA,QAAA,EAAA;oBAAY,MAAA;oBAAU,OAAA;oBACrB,UAAA;wBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,6BACO;4BAAA,MAAAJ,OAAM9yD,IAAAA;4BACAtc;4BACLI;wBAAAA,CAAK;wBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,mJAGb,OAAA,EAAK;4BAAA,OAAI,CAAA;4BAAQ,MAAC;4BAChBgvE,UAAAA,OAAM3uE,OAAAA;wBACT,CAAA;qBAAA;gBACF,CAAA;aAAA;QACF,CAAA;IACF,CAAA,GACDlB,CAAAA,CAAAA,EAAAA,GAAA+vE,WAAA/vE,CAAAA,CAAAA,EAAAA,GAAAqsE,YAAArsE,CAAAA,CAAA,CAAA,CAAA,GAAA6vE,OAAAI,KAAAA,EAAAjwE,CAAAA,CAAA,CAAA,CAAA,GAAA6vE,OAAA3uE,OAAAA,EAAAlB,CAAAA,CAAA,CAAA,CAAA,GAAA6vE,OAAA9yD,IAAAA,EAAA/c,CAAAA,CAAAA,GAAAA,GAAAS,YAAAT,CAAAA,CAAAA,GAAAA,GAAAa,OAAAb,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAA,OAAAjB,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAA,GAAAA,KAAAgB,KAAAA,CAlCHC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,oLAAC,gBAAA,EAAuB+uE;QAAAA,SAAAA;QACrBpvE,UAAAA;YAAAA;YAMAI;SAAAA;IA4BH,CAAA,GAAgBhB,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA,EAnChBiB;AAmCgB;AAIpB,SAASivE,4BAA4BnwE,KAAAA,EAIlC;IACK,MAAA,EAACgd,IAAAA,EAAMtc,UAAAA,EAAYI,KAAAA,EAAAA,GAASd,OAE5BowE,aAAazqD,oNAAAA,EAAQ,MAAM;QAC3B,IAAA;YACF,OAAO2pD,cAAc;gBAACtyD;gBAAMtc;gBAAYI;YAAAA,CAAM;QAAA,EAAA,OACvC4J,GAAG;YACV8a,QAAQzkB,KAAAA,CAAM2J,CAAC;QAAA;QAEV,OAAA;IACN,GAAA;QAACsS;QAAMtc;QAAYI,KAAK;KAAC;IAE5B,OAAKsvE,YAAY1tE,SAGd,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,wJAAA,EAAA;QAAK,MAAM;QACT0tE,UAAW3mE,WAAAA,GAAAA,CAAI,CAAC9I,GAAGod,IAClB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,wMAACsyD,WAAAA,EACEtyD;gBAAAA,UAAAA;oBAAI,IAAA,KAAM,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA;wBAAK,OAAO;4BAACzc,OAAO;4BAA8B6lB,SAAS;wBAAA;wBAAM,UAAG;oBAAA,CAAA;oBAC/E,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,QAAA;wBAAK,OAAO;4BAACmpD,YAAY;wBAAO3vE;wBAAAA,UAAAA,EAAEU,KAAAA,IAASV,EAAEgH,IAAAA;oBAAK,CAAA;iBAFtCoW;YAAAA,GAAAA,CAGf,CACD;IACH,CAAA,IAV8B;AAYlC;ACnJA,SAAS0O,YAAYzsB,KAAAA,EAAqE;IAClF,MAAA,EAAC6G,UAAAA,EAAYC,YAAAA,EAAAA,GAAgB9G,OAC7B,EAACW,CAAAA,EAAAA,+JAAKC,iBAAAA,EAAe,YAAY,GACjC,EAACk8B,YAAYyzC,iBAAAA,EAAAA,+JAAqB5oC,sBAAAA,EAAoB9gC,YAAYC,YAAY,GAE9Eg2B,uNAAmCnX,UAAAA,EACvC,IACE4qD,kBAAkB9mE,GAAAA,CAAKlB,CAAU,OAAA,CAAA;gBAC/B2nE,OAAO3nE,KAAK2nE,KAAAA;gBACZ/uE,SAASoH,KAAKpH,OAAAA;gBACd6b,MAAMzU,KAAKyU,IAAAA;YAAAA,CAAAA,CACX,GACJ;QAACuzD,iBAAiB;KACpB,GAEMC,YAAY1zC,WAAWlwB,IAAAA,CAAK6jE,uKAAiB,GAC7CC,cAAc5zC,WAAWlwB,IAAAA,oJAAK+jE,sBAAmB,GAEjD1tE,iNAAO0iB,UAAAA,EAAQ,IACf6qD,+JAAkB57C,mBAAAA,GAClB87C,iKAAoBv1C,qBAAAA,GACjBy1C,yKAAAA,EACN;QAACJ;QAAWE,WAAW;KAAC,GAErBtgE,iNAAOuV,UAAAA,EAAQ,IACf6qD,YAAkB,aAClBE,cAAoB,YACjB,YACN;QAACF;QAAWE,WAAW;KAAC;IAEpB,OAAA;QACL/7D,QAAQmoB,WAAWp6B,MAAAA,KAAW;QAC9BO;QACA5B,OAAOV,EAAE,aAAa;QACtByP;QACA2R,cAAc,CAAA;IAChB;AACF;AAEO,MAAM8uD,sBAAyC;IACpDlpE,MAAMkkB;IACN+D,WAAWigD;IACXpjD;AACF,GCtDMzB,eAAe,CAAC;AAKf,SAAS8lD,wBAAwBtrE,MAAAA,EAAyC;IAC3E,IAAA;QACF,OAAOqf,KAAKE,KAAAA,CAAMgsD,mBAAmBvrE,MAAM,CAAC;IAAA,EAAA,OAChC;QAEJ2V,OAAAA,QAAAA,IAAAA,CAAK,iCAAiC,GACvC,CAAC;IAAA;AAEZ;AAEO,SAAS61D,mBAAmBpsE,KAAAA,EAA4B;IAC7D,OAAA,CAAQA,SAAS,EAAA,EACd6E,GAAAA,CAAKmY,CAAAA,QAAUA,MAAMnY,GAAAA,CAAIwnE,YAAY,EAAE/nE,IAAAA,CAAK,GAAG,CAAC,EAChDO,GAAAA,CAAIynE,kBAAkB,EACtBhoE,IAAAA,CAAK,GAAG;AACb;AAKO,SAASioE,uBAAuB3rE,MAAAA,EAAyC;IACvEqf,OAAAA,KAAKC,SAAAA,CAAUtf,MAAM;AAC9B;AAOO,SAAS4rE,QAAQrZ,WAAAA,EAAwC;IACvDsZ,OAAAA,kBAAkBN,mBAAmBhZ,WAAW,CAAC;AAC1D;AAKO,SAASuZ,OAAO1sE,KAAAA,EAAkC;IACvD,OAAOosE,mBAAmBpsE,KAAK;AACjC;AAEa2sE,MAAAA,kKAASC,QAAAA,CAAM5L,MAAAA,CAAO,KAAK;IAAA,wCAAA;6JAEtC4L,QAAAA,CAAMC,OAAAA,CAAQ,SAAS;IAAA,0DAAA;6JAGvBD,QAAAA,CAAM5L,MAAAA,CAAO,+BAA+B;QAC1C4L,iKAAAA,CAAM5L,MAAAA,CAAO;YACX5oD,MAAM;YACN00D,WAAW;gBAAClsE,QAAQ;oBAAC4rE,SAASN;oBAAyBQ,QAAQH;gBAAAA;YAAsB;QACtF,CAAA,CAAC;KACH;IAAA,wEAAA;IAGDK,iKAAAA,CAAM5L,MAAAA,CAAO;QACX5oD,MAAM;QAAA,wCAAA;QAENpW,UAAU;qKAAC4qE,QAAAA,CAAM5L,MAAAA,CAAO,YAAY4L,iKAAAA,CAAM5L,MAAAA,CAAO,wBAAwB,CAAC,CAAC;SAAA;QAC3E8L,WAAW;YACT9sE,OAAO;gBAACwsE;gBAASE;YAAAA;QAAM;IAE1B,CAAA;CACF,GAKKK,cAAc,uCACdC,UAAW17D,CAAAA,MAAgB,oBAAoB0kD,IAAAA,CAAK1kD,GAAG,GACvD27D,gBAAiB37D,CAAgB,MAAA,8BAA8B0kD,IAAAA,CAAK1kD,GAAG,GACvE47D,kBAAkB;IAAC;IAAQ;IAAS;IAAO;IAAW,SAAS;CAAA,EAa/DC,WAAWvjE;AAEjB,SAASwjE,YAAYzH,MAAAA,EAAkBzE,OAAAA,EAA+C;IACpF,MAAMmM,UAA6B;QAAC,GAAGnM,OAAAA;QAAStgE,QAAQwlB;QAAcvlB,SAASmE,KAAAA;IAAS;IACxF,OAAO2gE,OAAO/mD,MAAAA,CAAO,CAACze,OAAM2jE,UAAU;QAChCkJ,IAAAA,QAAQlJ,KAAK,GAAG;YAClB,MAAM1xD,MAAM0xD,MAAM/jE,KAAAA,CAAM,GAAG+jE,MAAM/0D,OAAAA,CAAQ,GAAG,CAAC,GACvC7S,QAAQ4nE,MAAM/jE,KAAAA,CAAMqS,IAAItU,MAAAA,GAAS,CAAC;YACxCqC,MAAKS,MAAAA,GAAS;gBAAC,GAAGT,MAAKS,MAAAA;gBAAQ,CAACurE,mBAAmB/5D,GAAG,CAAC,CAAA,EAAG+5D,mBAAmBjwE,KAAK;YAAC;QAC9E,MAAI+wE,CAAAA,cAAcnJ,KAAK,IAC5B3jE,MAAKU,OAAAA,GAAUysE,sBAAsBxJ,KAAK,IAG1CljD,QAAQrK,IAAAA,CAAK,uCAAuCutD,KAAK;QAGpD3jE,OAAAA;IAAAA,GACNktE,OAAO;AACZ;AAEA,SAAShB,aAAalsE,KAAAA,EAAyBmF,KAAAA,EAAe0X,KAAAA,EAAgC;IACtF,MAAA,EAACnc,OAAAA,EAASD,SAAS,CAAC,CAAA,EAAGD,EAAAA,EAAMR,GAAAA,OAC7B,CAACotE,YAAY,CAAA,GAAIvwD,OACjBwwD,qBAAqBrtE,UAASotE,cAC9BE,cAAcnoE,UAAU,KAAK3E,OAAO4sE,aAAa5sE,EAAAA,EACjD+sE,iBACJ,OAAO7sE,UAAY,MAAcmE,KAAAA,iKAAY2oE,mBAAAA,EAAiB9sE,OAAc,GAExE+sE,gBAAgBhuD,OAAOC,OAAAA,CAAQjf,MAAM,EACxCuE,MAAAA,CAAQs2C,CAAqC,UAAA;QACtC,MAAA,CAACrpC,KAAKlW,KAAK,CAAA,GAAIu/C;QACjB,IAAA,CAACv/C,MAAc,CAAA,OAAA,CAAA;QACnB,IAAIsxE,mBAA2B,CAAA,OAAA,CAAA;QAGzBK,MAAAA,wBAAwBN,aAAa3sE,MAAAA,EAAAA,CAASwR,GAAG,CAAA;QACvD,OAAIlW,CAAAA,CAAU2xE,UAAAA,yBAAyB,CAACX,gBAAgBrkD,QAAAA,CAASzW,GAAG,CAAA;IAErE,CAAA,EACAvN,GAAAA,CAAI,CAAC,CAACuN,KAAKlW,KAAK,CAAA,GAAM,GAAGowE,mBAAmBl6D,GAAG,CAAC,CAAA,CAAA,EAAIk6D,mBAAmBpwE,KAAK,CAAC,EAAE;IAGhF,OAAA;QAACuxE,cAAc,KAAK9sE,EAAE;KAAA,CACnBg1B,MAAAA,CAAO;QAACi4C,cAAc9vE,MAAAA,GAAS,KAAK8vE;QAAeF,cAAc;KAAA,CAAEvoE,MAAAA,CAAOgoE,QAAQ,EAAEW,IAAAA,EAAM,EAC1FxpE,IAAAA,CAAK,GAAG,KAAK;AAEpB;AAEO,SAASmoE,kBAAkBn7D,GAAAA,EAA0B;IAC1D,OAAIA,IAAIvC,OAAAA,CAAQ,IAAI,MAAM,CAAA,IACjBg/D,qBAAqBz8D,GAAG,IAG1BA,IACJuB,KAAAA,CAAM,GAAG,EACThO,GAAAA,CAAKmY,CAAU,UAAA;QACR,MAAA,CAACuwD,cAAc,GAAGS,cAAc,CAAA,GAAIhxD,MAAMnK,KAAAA,CAAM,GAAG,EAAEhO,GAAAA,CAAK03C,CAAY,YAAA;YAC1E,MAAM,CAAC57C,IAAI,GAAGglE,MAAM,CAAA,GAAIppB,QAAQ1pC,KAAAA,CAAM,GAAG;YACzC,OAAOu6D,YAAYzH,QAAQ;gBAAChlE;YAAAA,CAAG;QAAA,CAChC;QAED,OAAO;YACL4sE,cACA;eAAGS,eAAenpE,GAAAA,CAAKwoE,CAAa,UAAA,CAAA;oBAClC,GAAGE,YAAAA;oBACH,GAAGF,OAAAA;oBACH1sE,IAAI0sE,QAAQ1sE,EAAAA,IAAM4sE,aAAa5sE,EAAAA;oBAC/BC,QAAQ;wBAAC,sIAAGg0C,UAAAA,EAAK24B,aAAa3sE,MAAAA,EAAQssE,eAAe,CAAA;wBAAG,GAAGG,QAAQzsE,MAAAA;oBAAM;oBACzEC,SAASwsE,QAAQxsE,OAAAA,IAAW0sE,aAAa1sE,OAAAA;gBAAAA,CAAAA,CACzC,CAAC;SAAA;IAAA,CAEN,EACAsE,MAAAA,CAAQ6X,CAAUA,QAAAA,MAAMlf,MAAAA,GAAS,CAAC;AACvC;AAEA,SAASiwE,qBAAqBz8D,GAAAA,EAA0B;IACtD,MAAMq0D,SAA0B,CAAE,CAAA;IAElC,IAAIsI,SAAS38D;IACb,MAAO28D,OAAOnwE,MAAAA,EAAQ;QACd,MAAA,CAAC83D,OAAOj1D,IAAIutE,YAAY,CAAA,GAAID,OAAOrY,KAAAA,CAAMmX,WAAW,KAAK,CAAE,CAAA;QACjE,IAAI,CAACnX,OAAO;YACDqY,SAAAA,OAAOluE,KAAAA,CAAM,CAAC;YACvB;QAAA;QAGIc,MAAAA,UAAUqtE,gBAAgBC,gBAAgBD,YAAY;QAC5DvI,OAAOlgE,IAAAA,CAAK;YAAC9E;YAAIE;QAAQ,CAAA,GAEzBotE,SAASA,OAAOluE,KAAAA,CAAM61D,MAAM93D,MAAM;IAAA;IAGpC,OAAO;QAAC6nE,MAAM;KAAA;AAChB;AAEA,SAASwI,gBAAgB7mE,IAAAA,EAAc;IACjC,IAAA;QACK2Y,OAAAA,KAAKE,KAAAA,CAAM7Y,IAAI;IAAA,EAAA,OACf4qB,KAAK;QAEZtR,QAAQrK,IAAAA,CAAK,CAAA,4BAAA,EAA+B2b,IAAI31B,OAAO,EAAE;QACzD;IAAA;AAEJ;AAEA,SAAS+wE,sBAAsB5xD,IAAAA,EAAuB;IAChD,IAAA;QACKA,OAAAA,oKAAO0yD,mBAAAA,EAAiB1yD,IAAI,IAAI1W,KAAAA;IAAAA,EAAAA,OAChCktB,KAAK;QAEZtR,QAAQrK,IAAAA,CAAK,CAAA,4BAAA,EAA+B2b,IAAI31B,OAAO,EAAE;QACzD;IAAA;AAEJ;ACzLA,MAAMu0C,kBAAkB;IACtBnO;IACAuB;IACAhD;IACAG;IACAlB;IACA2B,oBAAoB;CAAA,EAGhBiP,iBAAiB;IAACyvB,aAAa;CAAA,EAE/Br5C,aAAa;IAAC8kD;IAAqBxB,gBAAgB;CAAA,EAgD5CjkD,gBAAgB6nD,2KAAAA,EAA2Cp0D,CAAY,YAAA;IAC5E5b,MAAAA,OAAO4b,SAAS5b,2JAAQiwE,mBAAAA;IAEvB,OAAA;QACLvrE,MAAM;QACNxH,UAAU;YACRyZ,SAAUu5D,CAAAA,cAGD9kE,MAAMC,IAAAA,CAASC,aAAAA,GAAAA,IAAAA,IAAI,CAAC;uBAAG4kE,aAAa;uBAAGz9B,eAAe;iBAAC,CAAC;YAEjE/tB,QAASyrD,CAAAA,aAGA/kE,MAAMC,IAAAA,CAASC,aAAAA,GAAAA,IAAAA,IAAI,CAAC;uBAAG6kE,YAAY;uBAAGz9B,cAAc;iBAAC,CAAC;YAE/D5pB,YAAasnD,CAAAA,iBAGJhlE,MAAMC,IAAAA,CAASC,aAAAA,GAAAA,IAAAA,IAAI,CAAC;uBAAG8kE,gBAAgB;uBAAGtnD,UAAU;iBAAC,CAAC;QAEjE;QAEAunD,OAAO;YACL;gBACE3rE,MAAMkX,SAASlX,QAAQ;gBACvBtG,OAAOwd,SAASxd,SAAS;gBACzB4B;gBACA2sB,qNAAW2jD,OAAAA,EAAK,MAAM,OAAO,cAA4B,CAAC;gBAC1DpY,iBAAiBA,CAAC/jD,QAAQ5R,SACpB4R,WAAW,WAAiBo8D,sBAAsBhuE,MAAM,IACxD4R,WAAW,SAAeq8D,oBAAoBjuE,MAAM,IACjD,CAAA;gBAET+/D;gBAAAA,iFAAAA;gBAEAmO,uBAAuB,CAAA;gBACvB70D;gBACA0yD;YAAAA,CACD;SAAA;QAGH7vD,MAAM;YACJiyD,SAAS;gBAACj0E,8BAA8B;aAAA;QAAA;IAE5C;AACF,CAAC;AAED,SAAS8zE,sBAAsBhuE,MAAAA,EAAiC;IAExD,OAAA,UAAUA,SAMT,cAAcA,SAAS;QAACwB,UAAU,CAAA;IAAA,IAAQ,CAAA,IALxC,CAAA;AAMX;AAEA,SAASysE,oBAAoBjuE,MAAAA,EAAiC;IAEtD,OAAA,QAAQA,SAOP,UAAUA,SAAS;QAAC+tB,MAAM/tB,OAAO+tB,IAAAA,KAAS;IAAA,IAAe,CAAA,IANvD,CAAA;AAOX;ACjIO,SAASqgD,sBAAsB,EACpC3P,mBAAAA,EACA4P,WAAWC,gBAAAA,EACXltE,QAAAA,EAC0B,EAAiB;IACrC,MAAA,CAACyM,iBAAiB0gE,kBAAkB,CAAA,6MAAI7jE,WAAAA,EAAS,CAAA,CAAK,GACtDgtC,qKAAS5K,YAAAA,CAAU,IACnB4xB,4KAAgB8P,6BAAAA,EAA2B92B,MAAM,GACjD1vC,4KAAgBU,mBAAAA,KAEhB+lE,8MAAItuD,UAAAA,EAAQ,IACTq+C,uBAAuB;YAC5BC;YACA/mB;QAAAA,CACD,GACA;QAAC+mB;QAAqB/mB,MAAM;KAAC,GAE1Bg3B,yNAAevuD,UAAAA,EAAQ,IAEvBmuD,mBACKA,iBAAiBG,GAAG;YACzB,GAAG/P,aAAAA;YACH12D;QACD,CAAA,IACIymE,EAAE5P,QAAAA,IACR;QAAC4P;QAAGH;QAAkB5P;QAAe12D,aAAa;KAAC,GAEhDkiB,YAAkD/J,mNAAAA,EACtD,IAAA,CAAO;YACL9L,YAAYxG;YACZyc,gBAAgB,CAACzc;YACjB4lC,eAAe,CAAC5lC;YAChB0tB,YAAY,CAAC1tB;YACb+3B,YAAY,CAAC/3B;QAAAA,CAAAA,GAEf;QAACA,eAAe;KAClB,GAEM+X,kBAA2CzF,mNAAAA,EAAQ,IAAA,CAChD;YACL+J;YACArc;YACA0gE;YACAG;YACAC,kBAAkBF,EAAE9qE,OAAAA;QAAAA,CAAAA,GAErB;QAACumB;QAAUrc;QAAiB6gE;QAAcD,EAAE9qE,OAAO;KAAC;IAEvD,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,gJACG,uBAAA,CAAqB,QAAA,EAArB;QAA8B,OAAOiiB;QAAgBxkB;IAAAA,CAAS;AAEnE","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182]}},
    {"offset": {"line": 12983, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}